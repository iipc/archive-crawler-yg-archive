{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":95697582,"authorName":"G.B.Reddy","from":"&quot;G.B.Reddy&quot; &lt;reddy@...&gt;","profile":"gbreddysoft","replyTo":"LIST","senderId":"okdBeiufmZfSOeEXQkkMbbaftwyCAkYOhZ6Nqrc1OOIhBEfi_p3xJwzrlOPCjxLIfInP-pISi41wOnX5oaJkKpQK2qaejzj36fc9hUw","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] Re: Web crawler work ??","postDate":"1046973101","msgId":18,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDBlYzYwMWMyZTQwOSQwYmM2MDJjMCRkNTAwYThjMEB0aWRlbHBhcmsuaXNvZnR0ZWNoaW5kaWEuY29tPg==","referencesHeader":"PDM3ZWQwMWMyZDczNCQ0ZjQ0NjliMCRkNTAwYThjMEBSZWRkeUdCPiA8MDM4MDAxYzJkN2I2JDJjMTIxZjAwJDNhZWJlZGQxQGdvam92YWlvPiA8M2ZlMDAxYzJkOWM3JGU1OGE0YTgwJGQ1MDBhOGMwQFJlZGR5R0I+IDwwMGRjMDFjMmRhMDckNjZlZTEzNjAkM2FlYmVkZDFAZ29qb3ZhaW8+IDwwNzY5MDFjMmRlODEkMTNmY2ZlOTAkZDUwMGE4YzBAdGlkZWxwYXJrLmlzb2Z0dGVjaGluZGlhLmNvbT4gPDAwOGUwMWMyZGY2ZSQzZDQ4NGJlMCQ0ZGViZWRkMUBXT1JLU1RBVElPTjIxPg=="},"prevInTopic":16,"nextInTopic":21,"prevInTime":17,"nextInTime":19,"topicId":12,"numMessagesInTopic":6,"msgSnippet":"Gordon and Raymie, Below are the various stages and their design with the issues involved in the DNS Resolver and HTTP Client implementation. DNS History/Cache","rawEmail":"Return-Path: &lt;reddy@...&gt;\r\nX-Sender: reddy@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (EGP: mail-8_2_6_1); 6 Mar 2003 17:52:06 -0000\r\nReceived: (qmail 13472 invoked from network); 6 Mar 2003 17:52:03 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m4.grp.scd.yahoo.com with QMQP; 6 Mar 2003 17:52:03 -0000\r\nReceived: from unknown (HELO pub.isofttechindia.com) (203.199.202.17)\n  by mta3.grp.scd.yahoo.com with SMTP; 6 Mar 2003 17:52:01 -0000\r\nReceived: from ReddyGB (ReddyGB.isofttechindia.com [192.168.0.213])\n\tby pub.isofttechindia.com (8.11.0/8.11.0) with SMTP id h26HnKi23500;\n\tThu, 6 Mar 2003 23:19:21 +0530\r\nMessage-ID: &lt;0ec601c2e409$0bc602c0$d500a8c0@...&gt;\r\nTo: &lt;archive-crawler@yahoogroups.com&gt;\r\nCc: &lt;wcr-team@...&gt;\r\nReferences: &lt;37ed01c2d734$4f4469b0$d500a8c0@ReddyGB&gt; &lt;038001c2d7b6$2c121f00$3aebedd1@gojovaio&gt; &lt;3fe001c2d9c7$e58a4a80$d500a8c0@ReddyGB&gt; &lt;00dc01c2da07$66ee1360$3aebedd1@gojovaio&gt; &lt;076901c2de81$13fcfe90$d500a8c0@...&gt; &lt;008e01c2df6e$3d484be0$4debedd1@WORKSTATION21&gt;\r\nSubject: Re: [archive-crawler] Re: Web crawler work ??\r\nDate: Thu, 6 Mar 2003 23:21:41 +0530\r\nOrganization: ISoftTech\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_0EC3_01C2E437.252A2B50&quot;\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 5.50.4920.2300\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.50.4920.2300\r\nX-eGroups-From: &quot;G.B.Reddy&quot; &lt;reddy@...&gt;\r\nFrom: &quot;G.B.Reddy&quot; &lt;reddy@...&gt;\r\nReply-To: &quot;G.B.Reddy&quot; &lt;reddy@...&gt;\r\nX-Yahoo-Group-Post: member; u=95697582\r\nX-Yahoo-Profile: gbreddysoft\r\n\r\n\r\n------=_NextPart_000_0EC3_01C2E437.252A2B50\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nGordon and Raymie,\n\nBelow are the various stages and their design with the =\r\nissues involved in the DNS Resolver and HTTP Client implementation.\n\nDNS Hi=\r\nstory/Cache Handling Stage : \n\nOverview:\n- Maintains successful lookups in =\r\ncache.\n- Does negative caching.\n- Times itself to clean the expired entries=\r\n based on TTL. (Would use the ssTimer SEDA APIs to schedule itself periodic=\r\nally)\n- This stage would be dummy or could be skipped as of now since we wa=\r\nnt to do caching later.\n\nEvents:\n- Two types of events : DNSCacheLookupEven=\r\nt, DNSCacheUpdateEvent.\n- DNSCacheLookupEvent : If entry is found in cache,=\r\n the ipaddress is set in the CrawlURI object and is enqueued into the &quot;Page=\r\n Requesting Stage&quot;. Else, it is enqueued into the &quot;DNS Querying Stage&quot;. \n- =\r\nDNSCacheUpdateEvent : This event is published by the &quot;DNS Response Processi=\r\nng Stage&quot; every after successful/failed lookup inorder to update the cache.=\r\n\n\nOther notes:\n- This stage could be single threaded else lot of synchroniz=\r\nation might be needed.\n- Resubmitting events on queue full exceptions while=\r\n enqueuing into this stage&#39;s queue should be handled by the caller by sched=\r\nuling it in future.\n\n\nDNS Querying Stage : \n\nOverview:\n- Sends the actual D=\r\nNS ARecord query packets to the DNS Server. (The response packets are proce=\r\nssed in a later stage)\n- Maintains a pool of DatagramSocket objects. \n\nEven=\r\nts:\n- SendDNSQueryEvent : This is published by the &quot;DNS History/Cache Handl=\r\ning Stage&quot; when cache miss happens. The DNS query is formed and sent out. T=\r\nhe response handling sink is set as the &quot;DNS Response Processing Stage&quot;.\n\nI=\r\nmplementation:\n- A pool of DatagramSockets of a configurable maximum size i=\r\ns maintained. It will be filled incrementally. All these datagram sockets w=\r\nill be registered to the selector maintained by the SEDA internals. It woul=\r\nd be ideal if this pool gets shrunk or expanded based on the requirement. I=\r\nf it is not shrunk back, then it is an unnecessary overhead on the selector=\r\n. The reason behind having a pool is to restrict the number of ports the se=\r\nlector has to listen upon and also not to create individual DatagramSocket =\r\nobjects for every query. Can this logic of bounded pool, be implemented as =\r\na Controller in the SEDA framework (just like the ThreadPoolController) is =\r\nan open question.\n- When an event comes in, a free datagram socket in the p=\r\nool will be utilized for sending the message. If all sockets are engaged, t=\r\nhe incoming event should be postponed to reenter again after a period of ti=\r\nme.\n- This stage additionally has also to maintain the list of messages sen=\r\nt out, their IDs and the request timestamps. Let us call this &quot;RequestMap&quot; =\r\nfor future reference. The ID is the integer, described in the RFC DNS messa=\r\nge format, used to map the request-responses. The request timestamp will be=\r\n made use of in query timeout handling (discussed later). \n\nParameters to t=\r\nhis stage : \n- The DNS server hostname/ipaddress. If this is not given, the=\r\nn the /etc/resolve.conf will be parsed to get the name server (only the pri=\r\nmary would be taken as of now.). As a next step we will have to build a rou=\r\nnd-robin way of querying the various name servers in resolve.conf, inorder =\r\nto be polite with them.\n- If resolve.conf is not present, the local host wi=\r\nll be assumed as the name server.\n\n\nDNS Response Processing Stage :\n\nOvervi=\r\new:\n- Processes DNS responses.\n\nImplementation:\n- When the DNS datagram pac=\r\nkets are received, the ID field in the header should be used to match the c=\r\norresponding request packet. \n- Check for timeouts, and discard it if it ha=\r\nd timed out; else, set the ipaddress/canonical name in the CrawlURI object =\r\nand enqueue it to the &quot;Page Requesting Stage&quot;. In addition, enqueue an even=\r\nt into the &quot;DNS Cache Handling Stage&quot; for it to update its cache. Do the sa=\r\nme, even on DNS Errors like &quot;Name not found authoritative error&quot;. \n- The re=\r\nquest entry in the RequestMap (maintained for timeout handling) should be r=\r\nemoved. This map, being shared across stages, should be synchronized.\n\n\nHTT=\r\nP Page Requesting Stage :\n\nOverview:\n- Connects to host and sends GET reque=\r\nsts for pages.\n\nEvents:\n- Handles two types of events - StartFetchEvent and=\r\n ConnectionCompleteEvent. \n- The StartFetchEvent will make a TCP connect re=\r\nquest to the host. While doing so, we will register the current stage itsel=\r\nf to receive back the ConnectionComplete events. Once we receive this Conne=\r\nctionCompleteEvent, we should send a HTTP GET request to the page. The resp=\r\nonse handling sink is set as the &quot;HTTP Response Processing Stage&quot;. Write fa=\r\nilures should be handled.\n\n\nHTTP Response Processing Stage :\n\nOverview:\n- P=\r\nrocesses downloaded pages.\n\nImplementation:\n- Check for timeouts, and disca=\r\nrd it if it had timed out; else, read the packets. \n- Once the response is =\r\ncompletely read, the request entry in the RequestMap (maintained for timeou=\r\nt handling) should be removed. \n- One issue here is when we are reading len=\r\ngthy HTML pages, we might receive half of the page and it might stop after =\r\nthat. So, essentially the timeout should be applied between chunks of recep=\r\ntion.\n- Where should the errors like &quot;404 Not Found&quot;, etc be propogated ???=\r\n\n\n\nTimeout and Retry Handling Stage :\n\nOverview:\nThis is a single threaded =\r\nstage which enumerates through the RequestMap and checks for timeouts. The =\r\ntimed out CrawlURIs will be retried until retry count exhausts. This stage =\r\nwill be self-timed periodically using the SEDA ssTimer APIs.\n\nOther Notes:\n=\r\nThis timeout handling is a common stuff between the DNS requests and the HT=\r\nTP requests.\n\nParameters to this stage:\n- DNS timeout value.\n- HTTP timeout=\r\n value.\n- DNS retry count.\n- HTTP retry count. ( This would be 1 ).\n\n\nOne o=\r\nther thing that could be done is that, the events by themselves will contai=\r\nn information as to which next stage the output has to traverse. This will =\r\nbe flexible and no hardcoding is needed. Especially, in making this non-blo=\r\ncking DNS library an open-source, it would come handy. Moreover, many users=\r\n might not want it to be over SEDA. So, we will have to give other interfac=\r\nes as well.\n\nI am presently using the library classes given by dnsjava-1.3.=\r\n2. ( http://sourceforge.net/projects/dnsjava/ ). This is an LGPL java based=\r\n synchronous implementation of DNS Resolver. I only make use of the classes=\r\n which encapsulate the formation of request packets, parses response packet=\r\ns and the various ResourceRecord classes. This library is being used by Jav=\r\na Apache Mail Enterprise Server ( http://james.apache.org/ ). So, it should=\r\n be pretty reliable and tested. Moreover it has support for IPv6, compressi=\r\non and security which we can make use of later.\n\nThanks,\nReddy\n\n\n\n  ----- O=\r\nriginal Message ----- \n  From: Gordon Mohr \n  To: archive-crawler@yahoogrou=\r\nps.com \n  Cc: Raymie Stata ; wcr-team@... \n  Sent: Saturday,=\r\n March 01, 2003 2:43 AM\n  Subject: Re: [archive-crawler] Re: Web crawler wo=\r\nrk ??\n\n\n  Sounds like a reasonable plan.\n\n  By &quot;local name server&quot; do you m=\r\nean something *very* local -- for example,\n  a standard nameserver we run o=\r\nn the same machine?\n\n  That would seem to offer other benefits -- such as m=\r\ninimizing the modes\n  of DNS lookup we have to do and offloading caching to=\r\n another piece of\n  software (at least at first).\n\n  - Gordon\n\n  ----- Orig=\r\ninal Message -----\n  From: G.B.Reddy\n  To: archive-crawler@yahoogroups.com\n=\r\n  Cc: Raymie Stata ; wcr-team@...\n  Sent: Thursday, February=\r\n 27, 2003 8:55 AM\n  Subject: Re: [archive-crawler] Re: Web crawler work ??\n=\r\n\n\n  Gordon and Raymie,\n\n  Here goes the proposal for the asynchronous DNS l=\r\nookup API implementation.\n\n  We shall implement a minimal resolver which is=\r\n capable of sending DNS request packets and processing response packets in =\r\nan\n  asynchrounous nio fashion. This resolver class will contact a local na=\r\nme server and rely on it to do the actual lookup. The local\n  name server w=\r\nill be configured to support recursion and better would be to use a name se=\r\nrver which does lookup asynchronously. (\n  SQUID has asynchronous DNS looku=\r\np facilities ).  Even if the local name server is not asynchrounous, our ja=\r\nva resolver being\n  asynchronous will be good enough since our primary goal=\r\n is that we do not want any blocking code in our crawler implementation. Th=\r\nis\n  idea even sounds good considering the fact we would only reinvent the =\r\nsame wheel if we opt to implement a complete full-fledged\n  resolver implem=\r\nentation which complies with the RFC 1035 and 1034. We can definitely imple=\r\nment this full-fledged resolver but the\n  real concern is that this would r=\r\nequire a lot of testing and the efforts to make it rock solid in terms of r=\r\nobustness would be huge.\n\n  So, the various jobs that we would have to do t=\r\no build our Simple Asynchronous DNS lookup API would be\n      -- Request pa=\r\ncket formation and reply packet parsing in the exact RFC format.\n      -- U=\r\nse non-blocking IO APIs and do UDP. (We might not need TCP since the name s=\r\nerver is only in the local network.)\n      -- Do canonical name queries and=\r\n A record queries.\n      -- Implement timeouts.\n      -- Implement caching =\r\nbased on TTL. ( This may have to be deferred as pointed by Raymie earlier. =\r\n)\n      -- Integrate with SEDA.\n\n  Thanks,\n  Reddy\n\n  ----- Original Messag=\r\ne -----\n  From: Gordon Mohr\n  To: G.B.Reddy\n  Cc: Raymie Stata ; wcr-team@i=\r\nsofttechindia.com ; archive-crawler@yahoogroups.com\n  Sent: Saturday, Febru=\r\nary 22, 2003 5:37 AM\n  Subject: [archive-crawler] Re: Web crawler work ??\n\n=\r\n\n  [CC&#39;ing to archive-crawler@yahoogroups.com]\n\n  Reddy writes:\n\n  &gt; On the=\r\n first cut do we need to look at implementing an asynchronous DNS\n  &gt; looku=\r\np mechanism. If we are not, then it is going to be two stages, viz.\n  &gt; DNS=\r\nCacheHandlingStage and ResolvingStage, that can be employed using the\n  &gt; b=\r\nlocking DNS lookup calls in Java. The first stage, DNSCacheHandlingStage,\n =\r\n &gt; would check if the entry is available in the cache. If available, he wou=\r\nld\n  &gt; set the resolved address in the CrawlURI object and enqueue it to th=\r\ne\n  &gt; appropriate next stage. If the cache doesn&#39;t contain the entry, then =\r\nhe\n  &gt; would pass the request to the Resolving stage which would call the\n =\r\n &gt; InetAddress.getByName blocking method to resolve it. The getByName resul=\r\nt\n  &gt; would be set in the CrawlURI object as before and enqueued into the\n =\r\n &gt; appropriate next stage. In addition to this, the Resolving stage will\n  =\r\n&gt; enqueue another event into the DNSCacheHandlingStage to enable him update=\r\n\n  &gt; his cache. So, the DNSCacheHandlingStage would be handling two types o=\r\nf\n  &gt; events, one is the lookup events and the other is the update cache ev=\r\nents.\n  &gt;\n  &gt; One problem here is that the InetAddress class does not expos=\r\ne its cache\n  &gt; variables to its users. Even we cannot check if the cache h=\r\nas an entry\n  &gt; before calling the getByName method. So, we should be disab=\r\nling the java\n  &gt; cache ( using the policy file ) and implementing our own =\r\ncaching mechanism.\n  &gt; ( The DNSCacheHandlingStage would have to additional=\r\nly do the job of\n  &gt; throwing away the expired entries in the cache also.)\n=\r\n  &gt;\n  &gt; Let me know your comments on this.\n\n  This looks like a good first =\r\ncut. I&#39;m still working to improve my\n  understanding of the best way to use=\r\n the staged style, mostly by\n  looking at their HTTP and HTTP Server (Haboo=\r\nb) code.\n\n  It seems that they&#39;ve tended to use a single Stage object to do=\r\n\n  many different steps/aspects of one process, by switching on the\n  type =\r\nof QueueElement received.\n\n  So for example their seda.sandStorm.seda.apps.=\r\nHaboob.http.HttpRecv\n  accepts events of types....\n\n    - httpConnection\n  =\r\n  - httpRequest\n    - SinkClosedEvent\n    - timerEvent\n\n  And their seda.sa=\r\nndStorm.lib.http.httpServer accepts events of\n  types...\n\n    - ATcpInPacke=\r\nt\n    - ATcpConnection\n    - aSocketErrorEvent\n    - SinkDrainedEvent\n    -=\r\n SinkCloggedEvent\n    - SinkClosedEvent\n    - ATcpListenSuccessEvent\n\n  The=\r\ny also use Sinks that are not associated with stages; rather,\n  they interf=\r\nace to unstaged components which nonetheless result in\n  an eventual event =\r\nto some supplied answer Sink. See for example\n  seda.sandStorm.lib.http.htt=\r\npConnection.\n\n  So perhaps as a matter of grouping related tasks, the same =\r\nStage object\n  should be re-entered over the course of a lookup, with diffe=\r\nrent triggering\n  events. For example, you might want to reenter a single D=\r\nNSResolvingStage\n  over the course of cache lookup, lookup-initiation, resu=\r\nlt-receiving (or\n  timeout), etc. I&#39;m not sure; use your judgement as to ho=\r\nw many stages are\n  really needed.\n\n  &gt; P.S : We found some openly availabl=\r\ne async dns client APIs in C language.\n\n  That could be useful as a model. =\r\n(I doubt we&#39;d want to call out to C\n  for this simple step, though -- and i=\r\nf we nailed down a truly async Java\n  DNS facility, a lot of open source pr=\r\nojects would probably be quite happy.)\n\n  Also: I heard back from Patrick E=\r\naton about SEDA-style async HTTP client\n  code... he has a rough implementa=\r\ntion for simple usage, and he knows of\n  another one at Berkeley which goes=\r\n deeper into HTTP/1.1 conformance and\n  optimal performance. I&#39;ve asked him=\r\n to forward whatever additional code\n  or details he can.\n\n  - Gordon\n\n\n\n\n =\r\n To unsubscribe from this group, send an email to:\n  archive-crawler-unsubs=\r\ncribe@yahoogroups.com\n\n\n\n  Your use of Yahoo! Groups is subject to the Yaho=\r\no! Terms of Service.\n\n\n  Yahoo! Groups Sponsor\n  ADVERTISEMENT\n\n\n\n\n  To uns=\r\nubscribe from this group, send an email to:\n  archive-crawler-unsubscribe@y=\r\nahoogroups.com\n\n\n\n  Your use of Yahoo! Groups is subject to the Yahoo! Term=\r\ns of Service.\n\n\n        Yahoo! Groups Sponsor \n              ADVERTISEMENT\n=\r\n             \n       \n       \n\n  To unsubscribe from this group, send an em=\r\nail to:\n  archive-crawler-unsubscribe@yahoogroups.com\n\n\n\n  Your use of Yaho=\r\no! Groups is subject to the Yahoo! Terms of Service. \n\n\r\n------=_NextPart_000_0EC3_01C2E437.252A2B50\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META http-equiv=3DContent-Type content=3D&quot;text/html; charset=3Diso-8859-1=\r\n&quot;&gt;\n&lt;META content=3D&quot;MSHTML 5.50.4134.600&quot; name=3DGENERATOR&gt;\n&lt;STYLE&gt;&lt;/STYLE&gt;=\r\n\n&lt;/HEAD&gt;\n&lt;BODY bgColor=3D#ffffff&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Gordon a=\r\nnd Raymie,&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV=\r\n&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Below are the various stages and their \n=\r\ndesign&nbsp;with the&nbsp;issues involved in the DNS Resolver and HTTP \nCli=\r\nent&nbsp;implementation.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FO=\r\nNT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;STRONG&gt;DNS History/Cache =\r\nHandling Stage : \n&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;=\r\n/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr style=3D&quot;MARGIN-RIGHT: 0px&quot;&gt;&lt;FONT face=3D=\r\nArial \nsize=3D2&gt;Overview:&lt;BR&gt;-&nbsp;Maintains successful lookups in cache.&lt;=\r\n/FONT&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr style=3D&quot;MARGIN-RIGHT: 0px&quot;&gt;&lt;FONT face=3DArial =\r\nsize=3D2&gt;- Does negative \ncaching.&lt;BR&gt;-&nbsp;Times itself to clean the expi=\r\nred entries based on TTL. \n(Would use the ssTimer SEDA APIs to schedule its=\r\nelf periodically)&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV dir=3Dltr style=3D&quot;MARGIN-RIGHT: 0px&quot;&gt;&lt;=\r\nFONT face=3DArial size=3D2&gt;- This stage \nwould be dummy or could be skipped=\r\n as of now since we want to do caching \nlater.&lt;/FONT&gt;&lt;BR&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT =\r\nface=3DArial size=3D2&gt;Events:&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2=\r\n&gt;- Two types of events : DNSCacheLookupEvent, \nDNSCacheUpdateEvent.&lt;/FONT&gt;&lt;=\r\n/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;- DNSCacheLookupEvent : If entry is =\r\nfound in cache, \nthe ipaddress is set in the CrawlURI object and is enqueue=\r\nd into the &quot;Page \nRequesting Stage&quot;. &lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;Els=\r\ne, it is enqueued into the \n&quot;DNS Querying Stage&quot;. &lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT =\r\nface=3DArial size=3D2&gt;- DNSCacheUpdateEvent : This event is published by \nt=\r\nhe &quot;DNS Response Processing Stage&quot; every after successful/failed \nlookup&nb=\r\nsp;inorder to&nbsp;update the cache.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial s=\r\nize=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Other notes:&lt;/=\r\nFONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;- This stage could be single t=\r\nhreaded else lot of \nsynchronization might be needed.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FO=\r\nNT face=3DArial size=3D2&gt;-&nbsp;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;Resubmit=\r\nting \nevents on&nbsp;queue full exceptions while enqueuing into this stage&=\r\n#8217;s queue \nshould be handled by the caller by scheduling it in future.&lt;=\r\n/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;\n&lt;DIV&gt;&lt;BR&gt;&lt;STRONG&gt;DNS Querying Stage : &lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;D=\r\nIV&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Overview:&lt;BR&gt;-&nbsp;Sends the actual =\r\nDNS ARecord query packets to the DNS \nServer. (The response packets are pro=\r\ncessed in a later stage)&lt;/DIV&gt;\n&lt;DIV&gt;- Maintains a pool of DatagramSocket ob=\r\njects. &lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Events:&lt;/DIV&gt;\n&lt;DIV&gt;- SendDNSQueryEvent=\r\n : This is published by the &quot;DNS History/Cache Handling \nStage&quot; when cache =\r\nmiss happens. The DNS query is formed and sent out. The \nresponse handling =\r\nsink is set as the &quot;DNS Response Processing Stage&quot;.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;=\r\n\n&lt;DIV&gt;Implementation:&lt;/DIV&gt;\n&lt;DIV&gt;- A pool of&nbsp;DatagramSockets of a conf=\r\nigurable maximum size is \nmaintained. It will be filled incrementally. All =\r\nthese datagram sockets will be \nregistered to the selector maintained by th=\r\ne SEDA internals. It would be ideal \nif this pool gets shrunk or expanded b=\r\nased on the requirement. If it is not \nshrunk back, then it is an unnecessa=\r\nry overhead on the selector. The reason \nbehind having a pool is to restric=\r\nt the number of ports the selector has to \nlisten upon and also not to crea=\r\nte individual DatagramSocket objects for every \nquery. Can this logic of bo=\r\nunded pool, be implemented as a Controller in the \nSEDA framework (just lik=\r\ne the ThreadPoolController) is an open question.&lt;BR&gt;- \nWhen an event comes =\r\nin, a free datagram socket in the pool will be utilized for \nsending the me=\r\nssage. If all sockets are engaged, the incoming event should be \npostponed =\r\nto reenter again after a period of time.&lt;/DIV&gt;\n&lt;DIV&gt;- This stage additional=\r\nly has also to&nbsp;maintain&nbsp;the list of \nmessages sent out, their IDs=\r\n and the request timestamps. Let us call this \n&quot;RequestMap&quot; for future refe=\r\nrence. The ID is the integer, described in the RFC \nDNS message format, use=\r\nd to map the request-responses. The request timestamp \nwill be made use of =\r\nin query timeout handling (discussed later). &lt;BR&gt;&lt;/DIV&gt;\n&lt;DIV&gt;Parameters to =\r\nthis stage : &lt;/DIV&gt;\n&lt;DIV&gt;- The DNS server hostname/ipaddress. If this is no=\r\nt given, then the \n/etc/resolve.conf will be parsed to get the name server =\r\n(only the primary would \nbe taken as of now.). As a next step we will have =\r\nto build a round-robin way of \nquerying the various name servers in resolve=\r\n.conf, inorder to be polite with \nthem.&lt;/DIV&gt;\n&lt;DIV&gt;- If resolve.conf is not=\r\n present, the local host will be assumed as the \nname server.&lt;/DIV&gt;\n&lt;DIV&gt;&n=\r\nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;BR&gt;&lt;STRONG&gt;DNS Response Processing Stage :&lt;/STRONG&gt;&lt;/DIV&gt;\n=\r\n&lt;DIV&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Overview:&lt;/DIV&gt;\n&lt;DIV&gt;- Processes DN=\r\nS responses.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Implementation:&lt;/DIV&gt;\n&lt;DIV&gt;-&nbsp=\r\n;When the DNS datagram packets are received, the ID field in the \nheader sh=\r\nould be used to match the corresponding request packet. &lt;/DIV&gt;\n&lt;DIV&gt;- Check=\r\n for timeouts, and discard it if it had timed out; else, set the \nipaddress=\r\n/canonical name&nbsp;in the CrawlURI object and enqueue it to the &quot;Page \nRe=\r\nquesting Stage&quot;. In addition, enqueue an event into the &quot;DNS Cache Handling=\r\n \nStage&quot; for it to update its cache. Do the same, even on DNS Errors like &=\r\n#8220;Name \nnot found authoritative error&#8221;. &lt;/DIV&gt;\n&lt;DIV&gt;- The request=\r\n entry in the&nbsp;RequestMap (maintained for timeout \nhandling) should be =\r\nremoved. This map, being shared across stages, should be \nsynchronized.&lt;/DI=\r\nV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;HTTP&n=\r\nbsp;Page Requesting Stage :&lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Ove=\r\nrview:&lt;/DIV&gt;\n&lt;DIV&gt;- Connects to host and sends GET requests for pages.&lt;/DIV=\r\n&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Events:&lt;/DIV&gt;\n&lt;DIV&gt;- Handles two types of events -=\r\n StartFetchEvent and \nConnectionCompleteEvent. &lt;/DIV&gt;\n&lt;DIV&gt;- The StartFetch=\r\nEvent will make a TCP connect request to the host. While \ndoing so, we will=\r\n register the current stage itself to receive back the \nConnectionComplete =\r\nevents. Once we receive this ConnectionCompleteEvent, we \nshould send a HTT=\r\nP GET request to the page. The response handling sink is set as \nthe &quot;HTTP =\r\nResponse Processing Stage&quot;. Write failures&nbsp;should be \nhandled.&lt;/DIV&gt;\n&lt;=\r\nDIV&gt;&nbsp;&lt;/DIV&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;BR&gt;&lt;STRONG&gt;HTTP Response Processing Stage :&lt;/S=\r\nTRONG&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;\n&lt;DIV&gt;Overview:&lt;/DIV&gt;\n=\r\n&lt;DIV&gt;- Processes downloaded pages.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;&lt;/DIV&gt;\n&lt;DIV&gt;Imple=\r\nmentation:&lt;/DIV&gt;\n&lt;DIV&gt;- Check for timeouts, and discard it if it had timed =\r\nout; else, read the \npackets. &lt;/DIV&gt;\n&lt;DIV&gt;- Once the response is completely=\r\n read, the request entry in \nthe&nbsp;RequestMap (maintained for timeout ha=\r\nndling) should be removed. &lt;/DIV&gt;\n&lt;DIV&gt;- One issue here is when we are read=\r\ning lengthy HTML pages, we might \nreceive half of the page and it might sto=\r\np after that. So, essentially the \ntimeout should be applied between chunks=\r\n of reception.&lt;/DIV&gt;\n&lt;DIV&gt;- Where should the errors like &quot;404 Not Found&quot;, e=\r\ntc be propogated ???&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;BR&gt;&lt;STRONG&gt;Timeout and R=\r\netry Handling Stage :&lt;/STRONG&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Overview:&lt;/DIV&gt;=\r\n\n&lt;DIV&gt;This is a single threaded stage which enumerates through the RequestM=\r\nap and \nchecks for timeouts. The timed out CrawlURIs will be retried until =\r\nretry count \nexhausts. This stage will be self-timed periodically using the=\r\n SEDA ssTimer \nAPIs.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Other Notes:&lt;/DIV&gt;\n&lt;DIV&gt;T=\r\nhis timeout handling is a common stuff between the DNS requests and the \nHT=\r\nTP requests.&lt;BR&gt;&lt;/DIV&gt;\n&lt;DIV&gt;Parameters to this stage:&lt;/DIV&gt;\n&lt;DIV&gt;- DNS time=\r\nout value.&lt;/DIV&gt;\n&lt;DIV&gt;- HTTP timeout value.&lt;/DIV&gt;\n&lt;DIV&gt;- DNS retry count.&lt;/=\r\nDIV&gt;\n&lt;DIV&gt;- HTTP retry count. ( This would be 1 ).&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;&lt;=\r\n/FONT&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;One other thing that could be done is \nthat,&nbsp;the eve=\r\nnts by themselves will contain information as to which next \nstage the outp=\r\nut has to traverse. This will be flexible&nbsp;and&nbsp;no \nhardcoding is n=\r\needed. Especially, i&lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;n making this \nnon-b=\r\nlocking DNS library an open-source, it would come handy. Moreover, many \n&lt;/=\r\nFONT&gt;&lt;FONT face=3DArial size=3D2&gt;users might not want it to be over SEDA. S=\r\no, we \nwill have to give other interfaces as well.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT =\r\nface=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;=\r\nI am presently using the library classes given by \ndnsjava-1.3.2. ( &lt;A \nhre=\r\nf=3D&quot;http://sourceforge.net/projects/dnsjava/&quot;&gt;http://sourceforge.net/proje=\r\ncts/dnsjava/&lt;/A&gt;&nbsp;).&nbsp;This \nis an LGPL java based synchronous imple=\r\nmentation of DNS Resolver. I only make \nuse of the classes which encapsulat=\r\ne the formation of request \npackets,&nbsp;parses response packets and the&n=\r\nbsp;various ResourceRecord \nclasses. This library is being used by Java Apa=\r\nche Mail Enterprise Server ( &lt;A \nhref=3D&quot;http://james.apache.org/&quot;&gt;http://j=\r\names.apache.org/&lt;/A&gt;&nbsp;). So,&nbsp;it \nshould be pretty reliable and tes=\r\nted. Moreover it has support for IPv6, \ncompression and security which we c=\r\nan make use of later.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;=\r\n&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Thanks,&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FO=\r\nNT face=3DArial size=3D2&gt;Reddy&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D=\r\n2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n=\r\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;BLOCKQUOTE \nstyle=3D&quot;=\r\nPADDING-RIGHT: 0px; PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #0000=\r\n00 2px solid; MARGIN-RIGHT: 0px&quot;&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;----- O=\r\nriginal Message ----- &lt;/DIV&gt;\n  &lt;DIV \n  style=3D&quot;BACKGROUND: #e4e4e4; FONT: =\r\n10pt arial; font-color: black&quot;&gt;&lt;B&gt;From:&lt;/B&gt; \n  &lt;A title=3Dgojomo@...=\r\ng href=3D&quot;mailto:gojomo@...&quot;&gt;Gordon Mohr&lt;/A&gt; \n  &lt;/DIV&gt;\n  &lt;DIV style=\r\n=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;To:&lt;/B&gt; &lt;A \n  title=3Darchive-crawler@yahoogroups.=\r\ncom \n  href=3D&quot;mailto:archive-crawler@yahoogroups.com&quot;&gt;archive-crawler@yaho=\r\nogroups.com&lt;/A&gt; \n  &lt;/DIV&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Cc:&lt;/B&gt; &lt;A t=\r\nitle=3Draymie@... \n  href=3D&quot;mailto:raymie@...&quot;&gt;Raymie Stat=\r\na&lt;/A&gt; ; &lt;A \n  title=3Dwcr-team@... \n  href=3D&quot;mailto:wcr-tea=\r\nm@...&quot;&gt;wcr-team@...&lt;/A&gt; \n  &lt;/DIV&gt;\n  &lt;DIV styl=\r\ne=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Sent:&lt;/B&gt; Saturday, March 01, 2003 2:43 \n  AM&lt;/DI=\r\nV&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Subject:&lt;/B&gt; Re: [archive-crawler] =\r\nRe: Web \n  crawler work ??&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;=\r\n&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT \n  face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;F=\r\nONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial \n  size=3D2&gt;&lt;/FONT&gt;&lt;FON=\r\nT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial \n  size=3D2&gt;&lt;/FONT&gt;&lt;FONT =\r\nface=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial \n  size=3D2&gt;&lt;/FONT&gt;&lt;BR&gt;&lt;/DI=\r\nV&gt;&lt;TT&gt;Sounds like a reasonable plan.&lt;BR&gt;&lt;BR&gt;By &quot;local \n  name server&quot; do yo=\r\nu mean something *very* local -- for example,&lt;BR&gt;a standard \n  nameserver w=\r\ne run on the same machine?&lt;BR&gt;&lt;BR&gt;That would seem to offer other \n  benefit=\r\ns -- such as minimizing the modes&lt;BR&gt;of DNS lookup we have to do and \n  off=\r\nloading caching to another piece of&lt;BR&gt;software (at least at \n  first).&lt;BR&gt;=\r\n&lt;BR&gt;- Gordon&lt;BR&gt;&lt;BR&gt;----- Original Message -----&lt;BR&gt;From: \n  G.B.Reddy&lt;BR&gt;T=\r\no: &lt;A \n  href=3D&quot;mailto:archive-crawler@yahoogroups.com&quot;&gt;archive-crawler@ya=\r\nhoogroups.com&lt;/A&gt;&lt;BR&gt;Cc: \n  Raymie Stata ; &lt;A \n  href=3D&quot;mailto:wcr-team@is=\r\nofttechindia.com&quot;&gt;wcr-team@...&lt;/A&gt;&lt;BR&gt;Sent: \n  Thursday, Feb=\r\nruary 27, 2003 8:55 AM&lt;BR&gt;Subject: Re: [archive-crawler] Re: Web \n  crawler=\r\n work ??&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Gordon and Raymie,&lt;BR&gt;&lt;BR&gt;Here goes the proposal \n  for=\r\n the asynchronous DNS lookup API implementation.&lt;BR&gt;&lt;BR&gt;We shall implement =\r\n\n  a minimal resolver which is capable of sending DNS request packets and \n=\r\n  processing response packets in an&lt;BR&gt;asynchrounous nio fashion. This reso=\r\nlver \n  class will contact a local name server and rely on it to do the act=\r\nual lookup. \n  The local&lt;BR&gt;name server will be configured to support recur=\r\nsion and better \n  would be to use a name server which does lookup asynchro=\r\nnously. (&lt;BR&gt;SQUID has \n  asynchronous DNS lookup facilities ).&nbsp; Even =\r\nif the local name server is \n  not asynchrounous, our java resolver being&lt;B=\r\nR&gt;asynchronous will be good enough \n  since our primary goal is that we do =\r\nnot want any blocking code in our crawler \n  implementation. This&lt;BR&gt;idea e=\r\nven sounds good considering the fact we would \n  only reinvent the same whe=\r\nel if we opt to implement a complete \n  full-fledged&lt;BR&gt;resolver implementa=\r\ntion which complies with the RFC 1035 and \n  1034. We can definitely implem=\r\nent this full-fledged resolver but the&lt;BR&gt;real \n  concern is that this woul=\r\nd require a lot of testing and the efforts to make it \n  rock solid in term=\r\ns of robustness would be huge.&lt;BR&gt;&lt;BR&gt;So, the various jobs \n  that we would=\r\n have to do to build our Simple Asynchronous DNS lookup API would \n  be&lt;BR&gt;=\r\n&nbsp;&nbsp;&nbsp; -- Request packet formation and reply packet parsing \n  =\r\nin the exact RFC format.&lt;BR&gt;&nbsp;&nbsp;&nbsp; -- Use non-blocking IO APIs =\r\nand \n  do UDP. (We might not need TCP since the name server is only in the =\r\nlocal \n  network.)&lt;BR&gt;&nbsp;&nbsp;&nbsp; -- Do canonical name queries and A=\r\n record \n  queries.&lt;BR&gt;&nbsp;&nbsp;&nbsp; -- Implement timeouts.&lt;BR&gt;&nbsp;&=\r\nnbsp;&nbsp; -- \n  Implement caching based on TTL. ( This may have to be def=\r\nerred as pointed by \n  Raymie earlier. )&lt;BR&gt;&nbsp;&nbsp;&nbsp; -- Integrate=\r\n with \n  SEDA.&lt;BR&gt;&lt;BR&gt;Thanks,&lt;BR&gt;Reddy&lt;BR&gt;&lt;BR&gt;----- Original Message -----&lt;=\r\nBR&gt;From: \n  Gordon Mohr&lt;BR&gt;To: G.B.Reddy&lt;BR&gt;Cc: Raymie Stata ; wcr-team@iso=\r\nfttechindia.com \n  ; archive-crawler@yahoogroups.com&lt;BR&gt;Sent: Saturday, Feb=\r\nruary 22, 2003 5:37 \n  AM&lt;BR&gt;Subject: [archive-crawler] Re: Web crawler wor=\r\nk ??&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;[CC&#39;ing to \n  archive-crawler@yahoogroups.com]&lt;BR&gt;&lt;BR&gt;Reddy=\r\n writes:&lt;BR&gt;&lt;BR&gt;&gt; On the first \n  cut do we need to look at implementing=\r\n an asynchronous DNS&lt;BR&gt;&gt; lookup \n  mechanism. If we are not, then it is=\r\n going to be two stages, viz.&lt;BR&gt;&gt; \n  DNSCacheHandlingStage and Resolvin=\r\ngStage, that can be employed using \n  the&lt;BR&gt;&gt; blocking DNS lookup calls=\r\n in Java. The first stage, \n  DNSCacheHandlingStage,&lt;BR&gt;&gt; would check if=\r\n the entry is available in the \n  cache. If available, he would&lt;BR&gt;&gt; set=\r\n the resolved address in the CrawlURI \n  object and enqueue it to the&lt;BR&gt;&g=\r\nt; appropriate next stage. If the cache \n  doesn&#39;t contain the entry, then =\r\nhe&lt;BR&gt;&gt; would pass the request to the \n  Resolving stage which would cal=\r\nl the&lt;BR&gt;&gt; InetAddress.getByName blocking \n  method to resolve it. The g=\r\netByName result&lt;BR&gt;&gt; would be set in the \n  CrawlURI object as before an=\r\nd enqueued into the&lt;BR&gt;&gt; appropriate next \n  stage. In addition to this,=\r\n the Resolving stage will&lt;BR&gt;&gt; enqueue another \n  event into the DNSCach=\r\neHandlingStage to enable him update&lt;BR&gt;&gt; his cache. \n  So, the DNSCacheH=\r\nandlingStage would be handling two types of&lt;BR&gt;&gt; events, \n  one is the l=\r\nookup events and the other is the update cache \n  events.&lt;BR&gt;&gt;&lt;BR&gt;&gt; O=\r\nne problem here is that the InetAddress class does \n  not expose its cache&lt;=\r\nBR&gt;&gt; variables to its users. Even we cannot check if \n  the cache has an=\r\n entry&lt;BR&gt;&gt; before calling the getByName method. So, we \n  should be dis=\r\nabling the java&lt;BR&gt;&gt; cache ( using the policy file ) and \n  implementing=\r\n our own caching mechanism.&lt;BR&gt;&gt; ( The DNSCacheHandlingStage \n  would ha=\r\nve to additionally do the job of&lt;BR&gt;&gt; throwing away the expired \n  entri=\r\nes in the cache also.)&lt;BR&gt;&gt;&lt;BR&gt;&gt; Let me know your comments on \n  this=\r\n.&lt;BR&gt;&lt;BR&gt;This looks like a good first cut. I&#39;m still working to improve \n  =\r\nmy&lt;BR&gt;understanding of the best way to use the staged style, mostly \n  by&lt;B=\r\nR&gt;looking at their HTTP and HTTP Server (Haboob) code.&lt;BR&gt;&lt;BR&gt;It seems \n  t=\r\nhat they&#39;ve tended to use a single Stage object to do&lt;BR&gt;many different \n  =\r\nsteps/aspects of one process, by switching on the&lt;BR&gt;type of QueueElement \n=\r\n  received.&lt;BR&gt;&lt;BR&gt;So for example their \n  seda.sandStorm.seda.apps.Haboob.=\r\nhttp.HttpRecv&lt;BR&gt;accepts events of \n  types....&lt;BR&gt;&lt;BR&gt;&nbsp; - httpConnect=\r\nion&lt;BR&gt;&nbsp; - httpRequest&lt;BR&gt;&nbsp; - \n  SinkClosedEvent&lt;BR&gt;&nbsp; - time=\r\nrEvent&lt;BR&gt;&lt;BR&gt;And their \n  seda.sandStorm.lib.http.httpServer accepts event=\r\ns of&lt;BR&gt;types...&lt;BR&gt;&lt;BR&gt;&nbsp; \n  - ATcpInPacket&lt;BR&gt;&nbsp; - ATcpConnection=\r\n&lt;BR&gt;&nbsp; - \n  aSocketErrorEvent&lt;BR&gt;&nbsp; - SinkDrainedEvent&lt;BR&gt;&nbsp; - =\r\n\n  SinkCloggedEvent&lt;BR&gt;&nbsp; - SinkClosedEvent&lt;BR&gt;&nbsp; - \n  ATcpListenSu=\r\nccessEvent&lt;BR&gt;&lt;BR&gt;They also use Sinks that are not associated with \n  stage=\r\ns; rather,&lt;BR&gt;they interface to unstaged components which nonetheless \n  re=\r\nsult in&lt;BR&gt;an eventual event to some supplied answer Sink. See for \n  examp=\r\nle&lt;BR&gt;seda.sandStorm.lib.http.httpConnection.&lt;BR&gt;&lt;BR&gt;So perhaps as a \n  mat=\r\nter of grouping related tasks, the same Stage object&lt;BR&gt;should be \n  re-ent=\r\nered over the course of a lookup, with different triggering&lt;BR&gt;events. \n  F=\r\nor example, you might want to reenter a single DNSResolvingStage&lt;BR&gt;over th=\r\ne \n  course of cache lookup, lookup-initiation, result-receiving (or&lt;BR&gt;tim=\r\neout), \n  etc. I&#39;m not sure; use your judgement as to how many stages are&lt;B=\r\nR&gt;really \n  needed.&lt;BR&gt;&lt;BR&gt;&gt; P.S : We found some openly available async =\r\ndns client APIs \n  in C language.&lt;BR&gt;&lt;BR&gt;That could be useful as a model. (=\r\nI doubt we&#39;d want to \n  call out to C&lt;BR&gt;for this simple step, though -- an=\r\nd if we nailed down a truly \n  async Java&lt;BR&gt;DNS facility, a lot of open so=\r\nurce projects would probably be \n  quite happy.)&lt;BR&gt;&lt;BR&gt;Also: I heard back =\r\nfrom Patrick Eaton about SEDA-style \n  async HTTP client&lt;BR&gt;code... he has =\r\na rough implementation for simple usage, \n  and he knows of&lt;BR&gt;another one =\r\nat Berkeley which goes deeper into HTTP/1.1 \n  conformance and&lt;BR&gt;optimal p=\r\nerformance. I&#39;ve asked him to forward whatever \n  additional code&lt;BR&gt;or det=\r\nails he can.&lt;BR&gt;&lt;BR&gt;- Gordon&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;To \n  unsubscribe from this=\r\n group, send an email \n  to:&lt;BR&gt;archive-crawler-unsubscribe@yahoogroups.com=\r\n&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Your use of \n  Yahoo! Groups is subject to the Yahoo! Terms=\r\n of Service.&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Yahoo! \n  Groups Sponsor&lt;BR&gt;ADVERTISEMENT&lt;BR&gt;&lt;BR&gt;&lt;B=\r\nR&gt;&lt;BR&gt;&lt;BR&gt;To unsubscribe from this \n  group, send an email \n  to:&lt;BR&gt;archiv=\r\ne-crawler-unsubscribe@yahoogroups.com&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Your use of \n  Yahoo! =\r\nGroups is subject to the Yahoo! Terms of Service.&lt;BR&gt;&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;BR&gt;&lt;TT&gt;T=\r\no \n  unsubscribe from this group, send an email \n  to:&lt;BR&gt;archive-crawler-u=\r\nnsubscribe@yahoogroups.com&lt;BR&gt;&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;BR&gt;&lt;TT&gt;Your \n  use of Yahoo! Gr=\r\noups is subject to the &lt;A \n  href=3D&quot;http://docs.yahoo.com/info/terms/&quot;&gt;Yah=\r\noo! Terms of Service&lt;/A&gt;.&lt;/TT&gt; \n&lt;BR&gt;&lt;/BLOCKQUOTE&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n\r\n------=_NextPart_000_0EC3_01C2E437.252A2B50--\r\n\n"}}