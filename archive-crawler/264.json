{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"kDlcD4-H7UFIbUGMmzRnXrtxo3RGfK4_vGFZdECFrQWIpsSdAHjpmI9tB6PzQBWsrzpcntQjvA6eK5AbXJ8jfldflKQgP_w","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] Heritrix Checkpointing High-Level Design","postDate":"1075155331","msgId":264,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQwMTU5MTgzLjUwNTAwMDZAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDEwNzQ4OTI0NDguNDAxMThlYTAzZWNkMUBtYWlsLWRldi5hcmNoaXZlLm9yZz4=","referencesHeader":"PDQwMERBMjRELjMwMjA0MDNAYXJjaGl2ZS5vcmc+IDw0MDEwODU2OS42MDYwMUBhcmNoaXZlLm9yZz4gPDQwMTE3QjJCLjUwNDAwQGFyY2hpdmUub3JnPiA8MTA3NDg5MjQ0OC40MDExOGVhMDNlY2QxQG1haWwtZGV2LmFyY2hpdmUub3JnPg=="},"prevInTopic":261,"nextInTopic":265,"prevInTime":263,"nextInTime":265,"topicId":244,"numMessagesInTopic":13,"msgSnippet":"... This would be very nice, although I don t know how often in practice an operator would want a resume-from-checkpoint that s waiting some (potentially","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 20622 invoked from network); 26 Jan 2004 22:15:33 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m15.grp.scd.yahoo.com with QMQP; 26 Jan 2004 22:15:33 -0000\r\nReceived: from unknown (HELO ia00524.archive.org) (209.237.232.202)\n  by mta4.grp.scd.yahoo.com with SMTP; 26 Jan 2004 22:15:33 -0000\r\nReceived: (qmail 25707 invoked by uid 100); 26 Jan 2004 22:13:09 -0000\r\nReceived: from b116-dyn-43.archive.org (HELO archive.org) (gojomo@...@209.237.240.43)\n  by ia14404.archive.org with SMTP; 26 Jan 2004 22:13:09 -0000\r\nMessage-ID: &lt;40159183.5050006@...&gt;\r\nDate: Mon, 26 Jan 2004 14:15:31 -0800\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6b) Gecko/20031205 Thunderbird/0.4\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;400DA24D.3020403@...&gt; &lt;40108569.60601@...&gt; &lt;40117B2B.50400@...&gt; &lt;1074892448.40118ea03ecd1@...&gt;\r\nIn-Reply-To: &lt;1074892448.40118ea03ecd1@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Spam-DCC: : \r\nX-Spam-Checker-Version: SpamAssassin 2.63 (2004-01-11) on ia00524.archive.org\r\nX-Spam-Level: \r\nX-Spam-Status: No, hits=-4.4 required=6.0 tests=AWL,BAYES_00 autolearn=ham \n\tversion=2.63\r\nX-eGroups-Remote-IP: 209.237.232.202\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\nSubject: Re: [archive-crawler] Heritrix Checkpointing High-Level Design\r\nX-Yahoo-Group-Post: member; u=137285340\r\nX-Yahoo-Profile: gojomo\r\n\r\nkris@... wrote:\n &gt; Another option here is that when we resume from a checkpoint it is handled like\n &gt; any other job. Thus if the crawler was already running, it would simply be\n &gt; prepared and put into the pending queue.\n &gt;\n &gt; Thus the process would be something like:\n &gt; Load checkpoint, edit settings (optional), submit to CrawlJobHandler, job\n &gt; resumes when it is it&#39;s turn (if no job is running, that would be at once).\n\nThis would be very nice, although I don&#39;t know how often in practice\nan operator would want a resume-from-checkpoint that&#39;s waiting some\n(potentially indeterminate) amount of time before beginning. I expect\nresume-from-checkpoint scenarios will usually have some urgency.\n\n &gt;&gt;The CrawlController (which implements Checkpointable) is sent the\n &gt;&gt;relevant messages. It propagates these to all components it\n &gt;&gt;believes needs checkpointing. Those may further propagate the\n &gt;&gt;messages. Any POJO can implement the interface, but that&#39;s no\n &gt;&gt;guarantee it will be called; there&#39;s got to be a chain of\n &gt;&gt;intentional calls from the CrawlController down.\n &gt;\n &gt; For consistency with existing code this should be done with the Event model.\n\nI&#39;m not sure; the checkpoint process will likely need to enforce a\nstronger sense of ordering than is typical when simply registering\nfor a notification that an event (&quot;checkpoint begun&quot;, &quot;checkpoint\nended&quot;) has occurred. A tighter coupling may be inevitable.\n\n &gt;&gt; &gt; (Is there a facilty for pausing a crawl or stopping a crawl?  If so, how\n &gt;&gt; &gt; is that done?)\n &gt;&gt;\n &gt;&gt;The existing pause/terminate facility will be touched up as necessary;\n &gt;&gt;I believe it currently sets a flag indicating that a pause or termination\n &gt;&gt;has been requested, and lets the CrawlController control thread react.\n &gt;\n &gt; That is correct. The CrawlController basically stops new URIs from being\n &gt; processed and eventually halt&#39;s the crawl. Currently if there is a thread that\n &gt; &#39;hangs&#39; it will hang the entire pausing, making resumes impossible.\n\nThe same progressively more-disruptive steps that a checkpoint would\nuse to try to recover from an unresponsive thread should also be used\nfor an operator-requested pause.\n\nThe last of these steps would not be &quot;killing&quot; a thread (an\nunsupported operation which could aggravate inconsistency problems).\nRather, the problem URI and thread would be noted and logged, and a\nflag set which, if the thread ever emerges into an aware state, would\nindicate to abort normal wrapup procedures, minimizing its subsequent\ndamage.\n\nIf a long-running JVM process suffered such last-ditch recovery\nprocedures many times, a large number of zombie threads might\nstick around; a fresh restart and resume from checkpoint would\nbe the recommended remedy.\n\n &gt;&gt; &gt; Is it completely up to the Checkpointable implementer how they checkpoint?\n &gt;&gt;\n &gt;&gt;Yes, though by convention, they should ensure all their state goes\n &gt;&gt;into the designated checkpoint directory.\n &gt;\n &gt; I suggest that by default the checkpointing directory be a subdirectory of the\n &gt; job directory. Thus it would be easy to see what job any checkpoint belongs to.\n &gt; This should then be configurable in the crawl order.\n\nYes, makes sense.\n\n- Gordon\n\n"}}