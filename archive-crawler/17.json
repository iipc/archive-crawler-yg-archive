{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"&quot;Gordon Mohr&quot; &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"zxXMHifDw7jO1EW1zhaRLpz7Z6xQimzXUw79HLONidgs-SuGq-F6IqVmQ5Pglonj3jUED0BuS2y_mCjY_rIN9mtxTdegvkiA8w","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Crawler stages, events, objects design notes","postDate":"1046903364","msgId":17,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwZWQwMWMyZTM2NiRhY2Y2YTVkMCQ0ZGViZWRkMUBXT1JLU1RBVElPTjIxPg=="},"prevInTopic":0,"nextInTopic":0,"prevInTime":16,"nextInTime":18,"topicId":17,"numMessagesInTopic":1,"msgSnippet":"Driven by our meeting with Raymie last Thursday, and refined by further analysis, here are some notes on our design directions. = STAGED CRAWLER DESIGN NOTES =","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (EGP: mail-8_2_6_1); 5 Mar 2003 22:29:44 -0000\r\nReceived: (qmail 67125 invoked from network); 5 Mar 2003 22:29:44 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m14.grp.scd.yahoo.com with QMQP; 5 Mar 2003 22:29:44 -0000\r\nReceived: from unknown (HELO mail.archive.org) (209.237.232.3)\n  by mta1.grp.scd.yahoo.com with SMTP; 5 Mar 2003 22:29:43 -0000\r\nReceived: from WORKSTATION21 (dynamic-77.archive.org [209.237.235.77])\n\tby [209.237.232.3] (8.12.8/8.10.2) with SMTP id h25LovCY003712\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Wed, 5 Mar 2003 13:50:57 -0800\r\nMessage-ID: &lt;00ed01c2e366$acf6a5d0$4debedd1@WORKSTATION21&gt;\r\nTo: &lt;archive-crawler@yahoogroups.com&gt;\r\nSubject: Crawler stages, events, objects design notes\r\nDate: Wed, 5 Mar 2003 14:29:24 -0800\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;Windows-1252&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2800.1106\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1106\r\nFrom: &quot;Gordon Mohr&quot; &lt;gojomo@...&gt;\r\nX-Yahoo-Group-Post: member; u=137285340\r\nX-Yahoo-Profile: gojomo\r\n\r\nDriven by our meeting with Raymie last Thursday, and refined by further \nanalysis, here are some notes on our design directions. \n\n= STAGED CRAWLER DESIGN NOTES =\n\nSTAGE 0: &quot;Pumping&quot;\n\nOverview:\n- Exists to drive the system into action\n- Modelled as stage so that external SEDA flow-maximizing\n  managers can monitor its output, allocate it more or\n  less cycles as necessary to optimize system.\n\nEvent flow:\n- Accepts events which START, CONTINUE, or STOP action\n- Each START event flips stage to &quot;on&quot; state, and\n  further enqueues one DO event to next stage, and \n  one CONTINUE event to self.\n- Each CONTINUE event while &quot;on&quot; enqueues one DO event \n  to next stage. While &quot;off&quot;, CONTINUEs are ignored.\n- Each STOP event flips stage to &quot;off&quot; state.\n- When next stage gives SinkFullException, a CONTINUE\n  is scheduled for some configurable delay in the future.\n- When next stage gives SinkClosedException, stage \n  flips to &quot;off&quot; status. \n\nImplementation:\n- Initially a SimplePump class. Further refinements TBD.\n\nSTAGE 1: &quot;URIChoosing&quot;\n\nOverview:\n- Exists to emit candidate URIs to further processing.\n- Output should reflect Crawler&#39;s ideal sense of URI \n  prioritization -- with politeness typically delegated\n  to later stage(s).\n- May be one facet of larger URIManager entity, which\n  also includes &quot;URIStoring&quot; stage (see below).\n\nEvent flow:\n- Accepts DO events, which are a signal to identify\n  some finite number of candidate URIs and pass to \n  next stage.\n- Emits CrawlURI objects, which implement QueueElementIF,\n  to next stage.\n\nImplementation(s):\n- Initially: StaticFrontier class, which supplies \n  URIs one at a time from a static disk file. CrawlURI\n  only includes URI string. \n- Then: Breadth- and Depth-first crawls from finite\n  number of seeds.\n- Then: More sophisticated policies using persistence\n  and distribution across machines, TBD.\n\nSTAGE 2: &quot;Preprocessing&quot;\n\nOverview:\n- Exists to apply configurable politeness and filtering\n  to candidate URIs before passing to next stage.\n- Will eventually perform DNS, to allow IP-based (rather \n  than hostname-based) politeness rules. \n- Could potentially be chained. \n\nEvent flow:\n- Accepts CrawlURI objects as events.\n- Examine, process, markup, and where appropriate\n  hold CrawlURI objects in internal waiting queues\n  to enforce politeness rules.\n- May mark CrawlURIs as cancelled to disable further\n  processing by subsequent stages (&quot;preconditioned\n  execution&quot;), or mark them and directly forward them\n  to an explicit &quot;cancelled stage&quot; (such as the final\n  &quot;URIStoring&quot; stage).\n- Feeds changed CrawlURI object to next stage. \n\nImplementation(s):\n- Initially, a noop stage which prints the URI and\n  passes it along.\n- Then, a stage which does basic hostname-based politeness.\n- Then, a stage which does DNS and ip-based politeness.\n- Then, a stage which accomodates priority fetching\n  (such as robots.txt or closely-associated resources.)\n- Then, a stage which respects robots.txt\n- Then, as TBD.\n\nSTAGE 3: &quot;Fetching&quot;\n\nOverview:\n- Exists to conduct all network-fetching operations.\n\nEvent flow:\n- Accepts CrawlURI objects, possibly as marked up \n  with resolved IP addresses, past fetch/error histories,\n  cookies/authentication info, etc.\n- Makes a finite number of attempts to fetch resource,\n  probably just one, and then marks up CrawlURI with\n  results.\n- Forwards CrawlURI to next stage.\n\nImplementation(s):\n- Initially, blocking HTTP fetch using off-the-shelf\n  (JRE or 3rd-party) utility library. Retrieved resource\n  fully in memory, discard oversized fetches.\n- Then, non-blocking HTTP fetch. \n- Then, disk-assist for large items.\n- Then, greater capabilities TBD.\n\nSTAGE 4: &quot;Postprocessing&quot;\n\nOverview:\n- Exists to analyze results, primarily in the ways the\n  crawl needs to proceed.\n- Could potentially be chained. \n\nEvent flow:\n- Accepts CrawlURI objects, as marked up by fetch\n  results.\n- Scans and processes in arbitrary ways, marking\n  up passed-in CrawlURI and potentially creating\n  new CrawlURIs.\n- Forwards passed-in CrawlURI and others to next\n  stage.\n\nImplementation(s):\n- Initially, a noop stage which prints the URI and\n  passes it along.\n- Then, a simple ARC-writer. \n- Then, a simple link-extractor.\n- Then, more sophisticated policies adapting to\n  new file/link types and multi-machine distribution\n  architectures, TBD.\n\nSTAGE 5: &quot;URIStoring&quot;\n\nOverview:\n- Exists to persist results of one CrawlURI processing\n  cycle, and feed new candidates back to URIChoosing\n  stage.\n\nEvent flow:\n- Accepts CrawlURI objects, which may have finished\n  a processing cycle or be brand new.\n- Performs necessary persistence and possibly \n  prioritization work; affects shared data structures\n  with URIChoosing stage in a thread-safe way, but\n  does not enqueue events to URIChoosing.\n- Output events, if any, TBD.\n\nImplementation(s):\n- Initially, a logging stage which prints the URI with\n  any processing results.\n- Then, a stage which arranges for URIs as necessary\n  to be available to URIChoosing.\n- Then, a stage with proper persistence and synchronization\n  with URIChoosing to support checkpointing.\n- Then, support for more sophisticated scheduling policies\n  and multi-machine distribution.\n\n--\nNOTES ON THE SYSTEM AS A WHOLE\n\n- If you stop feeding stages 1-5 &quot;DO&quot; events, crawler\n  will eventually come to rest, within some bounded time. \n- Although the &quot;Pumping&quot; stage will push as many DOs in \n  as it can, a properly-configured external queue-monitoring \n  SEDA manager will deprive it of the cycles it needs\n  to get too far ahead of the rest of the system. \n- URIChoosing and URIStoring can maintain an &quot;in-process&quot; list \n  of CrawlURIs (those released to the other stages that \n  have not been returned), remembering their state before they \n  were passed to the Preprocessing stage. Thus a checkpoint at \n  any time should be synthesizable by capturing the state of \n  URIChoosing+URIStoring, plus the &quot;rollback&quot; version of \n  pending CrawlURIs.\n- There is likely an in-memory Host/IP database, available\n  in the Preprocessing stage, that can rapidly decorate CrawlURIs \n  with the latest knowledge about their host/IP. \n \n\n--\nTHE CrawlURI CLASS\n\nOver time will come to contain all of the following:\n - URI string\n - a KnownHost\n   - IP (as resolved at certain times)\n     - performance history for that IP\n   - robots.txt\n   - server-software\n   - cookies\n   - authentication info\n - fetching history (including result codes/summary values)\n - processing history\n - labelling based on originating context (eg role in page, encountered URIs)\n\nNeeds flexible, efficient keyed storage of arbitrary attributes; clear\nconventions for use by stages; allocation-and-GC-efficient string facilities;\nclear conventions for persistence/reconstruction by URIManager.\n\n--\n\n- Gordon\n\n\n\n"}}