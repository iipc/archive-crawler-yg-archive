{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"oj0fqweBunPtiwqGiNNR4mOOZ9y31IHSiD0ikINoXMLKUcHEh8q4UqQbx-Rpg_x0EyWvabOXFblQL_fgr6zHQ5Q-gXqLKOI","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [archive-crawler] Killing hang up threads in Heritrix","postDate":"1409362882","msgId":8602,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDU0MDEyQkMyLjMwODAxMDJAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PEQwMjRGQTU0LkI3OTklYWFsc3VtQHN0YW5mb3JkLmVkdT4=","referencesHeader":"PEQwMjM0QjRDLkI2Q0MlYWFsc3VtQHN0YW5mb3JkLmVkdT4gPENBQS16NzBKUFMrK3lUSnc5NENhYzlIS29OVVFlT3l0VVZmZ0Zwd1V6NVZOaXBIQWJRZ0BtYWlsLmdtYWlsLmNvbT4gPDUzRkU2N0JDLjcwMDA3MDhAYXJjaGl2ZS5vcmc+IDw1M0ZFNkUzNi44MDYwMjA1QGFyY2hpdmUub3JnPiA8RDAyNEZBNTQuQjc5OSVhYWxzdW1Ac3RhbmZvcmQuZWR1Pg=="},"prevInTopic":8601,"nextInTopic":0,"prevInTime":8601,"nextInTime":8603,"topicId":8594,"numMessagesInTopic":7,"msgSnippet":"From only what you ve forwarded, this thread/queue might not be the culprit for a idle hang: those timers in the threads report suggest it s only been in that","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nX-Received: (qmail 55128 invoked by uid 102); 30 Aug 2014 01:41:24 -0000\r\nX-Received: from unknown (HELO mtaq5.grp.bf1.yahoo.com) (10.193.84.36)\n  by m1.grp.bf1.yahoo.com with SMTP; 30 Aug 2014 01:41:24 -0000\r\nX-Received: (qmail 30701 invoked from network); 30 Aug 2014 01:41:24 -0000\r\nX-Received: from unknown (HELO relay03.pair.com) (98.139.245.164)\n  by mtaq5.grp.bf1.yahoo.com with SMTP; 30 Aug 2014 01:41:24 -0000\r\nX-Received: (qmail 79610 invoked by uid 0); 30 Aug 2014 01:41:23 -0000\r\nX-Received: from 142.254.51.72 (HELO probook.local) (142.254.51.72)\n  by relay03.pair.com with SMTP; 30 Aug 2014 01:41:23 -0000\r\nX-pair-Authenticated: 142.254.51.72\r\nMessage-ID: &lt;54012BC2.3080102@...&gt;\r\nDate: Fri, 29 Aug 2014 18:41:22 -0700\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:24.0) Gecko/20100101 Thunderbird/24.6.0\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;D0234B4C.B6CC%aalsum@...&gt; &lt;CAA-z70JPS++yTJw94Cac9HKoNUQeOytUVfgFpwUz5VNipHAbQg@...&gt; &lt;53FE67BC.7000708@...&gt; &lt;53FE6E36.8060205@...&gt; &lt;D024FA54.B799%aalsum@...&gt;\r\nIn-Reply-To: &lt;D024FA54.B799%aalsum@...&gt;\r\nContent-Type: text/plain; charset=windows-1252; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nSubject: Re: [archive-crawler] Killing hang up threads in Heritrix\r\nX-Yahoo-Group-Post: member; u=137285340; y=bU9fu612sXlU9lxO2VLgPMfo1DoO2s5EWIxFZ2y7_PuH\r\nX-Yahoo-Profile: gojomo\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\n\r\n From only what you&#39;ve forwarded, this thread/queue might not be the \nculprit for a idle hang: those timers in the threads report suggest it&#39;s \nonly been in that Processor for under a minute (56s527ms). Maybe it&#39;s \nmaking  progress � just slowly, due to some throttling somewhere... in \nwhich case it&#39;ll eventually either finish or give up based on some of \nthe FetchHTTP timeout limits. (That is, it may not be a hung thread but \na genuinely slow socket connection.)\n\nI&#39;d sample the thread stack repeatedly over many minutes: is it always \nat the same place, on the same URI, for more than the configured \ntimeouts? Then that&#39;s definitely a Heritrix bug: it&#39;s supposed to give \nup after the configured timeouts.\n\nIf you do have a &#39;rule-of-thumb&#39; or when to give up, you could configure \nit via the usual timeout settings, rather than apply it manually/ad-hoc.\n\nI&#39;d also look for other errors in other crawler/system logs around the \ntime its progress stopped/slowed, just in case some other error at \nanother level is the real culprit.\n\nIs this the only queue with pending URIs � so until this finishes \nthere&#39;s no progress? Because otherwise, no matter what happens in one \nworker ToeThread should stop all progress.\n\nA couple other far-out thoughts:\n\nAt times using a web browser on linux at the Archive&#39;s office � with \ngreat bandwidth - I would encounter reproducible loading hangs on major \nwebsites&#39; home pages (eg: Apple). Same machine, different OS resulted in \nno problems. Talking to our network engineer, it turned out the \ninteraction of the exact length of the response and some \nnetwork-fragmentation-settings somewhere in the network were causing the \nhang, but only with the linux TCP/IP stack&#39;s defaults. He was able to \nsee the problem and work-around it in our routers, even though he \nimplied the real fault was closer to the source sites.\n\nSo to the extent this is highly reproducible, perhaps always with \nparticular sites or exact URIs causing an inexplicable socket stall, you \nmight want to enlist a local network wizard to take a look at things in \nthe stalled state.\n\nFurther, quite rarely, but often enough that large-scale projects will \neventually hit it, network hardware may fail in ways specific to exact \npacket-lengths and bit-patterns. A symptom might be a particular packet \nnever arrives, no matter how many retries. So when other possibilities \nare exhausted, or if it&#39;s easy to do so, trying the same \ncrawls/problem-URIs on a system with a different \nNIC/upstream-router-path might give a surprise improvement.\n\nHope this helps,\n\n- Gordon\n\n\nOn 8/28/14, 3:27 PM, Ahmed Alsum aalsum@... [archive-crawler] \nwrote:\n&gt;\n&gt;\n&gt; Thanks Gordon for your detailed analysis.\n&gt;\n&gt; Back to the question of why do you need to kill a thread. I reran the\n&gt; job and it stopped in the middle. I looked into the reports/logs and I\n&gt; got the following for one of my threads.\n&gt;\n&gt; threads-report.txt\t\n&gt;\n&gt; [ToeThread #20: https://www.youtube.com/embed/fR9d3HRDS4Y?hl=en&fs=1&autoplay=0&hd=1&showinfo=0&rel=0\n&gt;   CrawlURI https://www.youtube.com/embed/fR9d3HRDS4Y?hl=en&fs=1&autoplay=0&hd=1&showinfo=0&rel=0 LLLE http://news.stanford.edu/news/2014/may/amy-blue-urbanek-051514.html    0 attempts\n&gt;      in processor: fetchHttp\n&gt;      ACTIVE for 56s528ms\n&gt;      step: ABOUT_TO_BEGIN_PROCESSOR for 56s527ms\n&gt; Java Thread State: RUNNABLE\n&gt; Blocked/Waiting On: NONE\n&gt;      java.net.SocketInputStream.socketRead0(Native Method)\n&gt;      java.net.SocketInputStream.read(SocketInputStream.java:129)\n&gt;      com.sun.net.ssl.internal.ssl.InputRecord.readFully(InputRecord.java:422)\n&gt;      com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:460)\n&gt;      com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:863)\n&gt;      com.sun.net.ssl.internal.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:820)\n&gt;      com.sun.net.ssl.internal.ssl.AppInputStream.read(AppInputStream.java:75)\n&gt;      java.io.BufferedInputStream.read1(BufferedInputStream.java:256)\n&gt;      java.io.BufferedInputStream.read(BufferedInputStream.java:317)\n&gt;      org.archive.io.RecordingInputStream.read(RecordingInputStream.java:113)\n&gt;      org.archive.io.RecordingInputStream.readFullyOrUntil(RecordingInputStream.java:200)\n&gt;      org.archive.modules.fetcher.FetchHTTP.innerProcess(FetchHTTP.java:682)\n&gt;      org.archive.modules.Processor.innerProcessResult(Processor.java:175)\n&gt;      org.archive.modules.Processor.process(Processor.java:142)\n&gt;      org.archive.modules.fetcher.FetchHTTP.process(FetchHTTP.java:918)\n&gt;      org.archive.modules.ProcessorChain.process(ProcessorChain.java:131)\n&gt;      org.archive.crawler.framework.ToeThread.run(ToeThread.java:148)\n&gt;\n&gt;\n&gt; frontier-summary-report.txt\n&gt;\n&gt;   -----===== IN-PROCESS QUEUES =====-----\n&gt; IN-PROCESS#0:\n&gt; Queue com,youtube,www, (p3)\n&gt;    24 items\n&gt;      last enqueued: https://www.youtube.com/embed/SlyKK9DPK_k?hl=en&fs=1&autoplay=0&hd=1\n&gt;        last peeked: https://www.youtube.com/embed/fR9d3HRDS4Y?hl=en&fs=1&autoplay=0&hd=1&showinfo=0&rel=0\n&gt;     total expended: 92 (total budget: -1)\n&gt;     active balance: 2999\n&gt;     last(avg) cost: 1(1)\n&gt;     totalScheduled fetchSuccesses fetchFailures fetchDisregards fetchResponses robotsDenials successBytes totalBytes fetchNonResponses lastSuccessTime\n&gt;     116 92 0 0 92 0 1765293 1765293 3 2014-08-28T22:17:09.580Z\n&gt;     SimplePrecedenceProvider\n&gt;     3\n&gt;\n&gt; Any idea what is wrong? Or how to avoid this problem without killing the\n&gt; thread?\n&gt;\n&gt; Regards,\n&gt; Ahmed\n&gt;\n&gt; From: &quot;Gordon Mohr gojomo@... &lt;mailto:gojomo@...&gt;\n&gt; [archive-crawler]&quot; &lt;archive-crawler@yahoogroups.com\n&gt; &lt;mailto:archive-crawler@yahoogroups.com&gt;&gt;\n&gt; Reply-To: &lt;archive-crawler@yahoogroups.com\n&gt; &lt;mailto:archive-crawler@yahoogroups.com&gt;&gt;\n&gt; Date: Wednesday, August 27, 2014 at 4:48 PM\n&gt; To: &lt;archive-crawler@yahoogroups.com&gt;\n&gt; Subject: Re: [archive-crawler] Killing hang up threads in Heritrix\n&gt;\n&gt; Having just looked more at jdb and the blog post you referenced, I see\n&gt; that the jdb &#39;kill&#39; is likely a bit safer than I thought - it injects an\n&gt; exception into the thread, rather than doing some sort of native kill\n&gt; (like say the old deprecated Thread.kill() method).\n&gt;\n&gt; It&#39;d still depend on where it was injected, though - the ToeThread code\n&gt; has some last-ditch catchall handlers that try to clean things up\n&gt; properly, but I wouldn&#39;t rely on that in any particular recurring\n&gt; situation without a closer look.\n&gt;\n&gt; Another possibility that occurred to me is that the thread might not be\n&gt; &#39;hung&#39; idly, but rather in some busy-spin on some processing step.\n&gt;\n&gt; In my experience this has been most common when a casually-constructed\n&gt; regex hits some unexpected worst-case input. And in such cases, you\n&gt; might want to abort that match, but then also want to tighten the regex\n&gt; (most often with reluctant-match qualifiers or other quick-fail tricks)\n&gt; to prevent the same spin in the future.\n&gt;\n&gt; The jdb method might be an OK method to break out of such runaway regex\n&gt; matches... but I suspect you could do the same via the &#39;Scripting\n&gt; Console&#39;: via the CrawlController & ToePool, get the offending thread,\n&gt; and call its ToeThread.kill() method.\n&gt;\n&gt; - Gordon\n&gt;\n&gt; On 8/27/14, 4:20 PM, Gordon Mohr gojomo@...\n&gt; &lt;mailto:gojomo@...&gt; [archive-crawler] wrote:\n&gt;&gt; Indeed I don&#39;t believe that generally, you can kill threads in this\n&gt;&gt; manner and still be sure that Java (including native JVM) data\n&gt;&gt; structures are still in a consistent state. So you could have mysterious\n&gt;&gt; corruption or crashes, only evident arbitrarily later.\n&gt;&gt;\n&gt;&gt; Fully diagnosing and correcting the cause of any such hangs is a better\n&gt;&gt; approach. Essentially every step of the usual Heritrix operation already\n&gt;&gt; has designed-in timeouts or other limitations, so any indefinite hang is\n&gt;&gt; a defect that should be fixed rather than adapted-to.\n&gt;&gt;\n&gt;&gt; As Noah requests, representative stacks might give more ideas.\n&gt;&gt;\n&gt;&gt; Notably, exactly those places that might be &#39;safest&#39; to do an\n&gt;&gt; out-of-band thread kill may also be the easiest problems to diagnose/fix.\n&gt;&gt;\n&gt;&gt; Also, I recall in the long-ago era of early JVMs and often-flaky Linux\n&gt;&gt; threading (~2004ish; before/early-days-of NPTL era), some JVM/OS\n&gt;&gt; combinations were prone to threads transiently missing the &#39;wake&#39; signal\n&gt;&gt; from the OS.  In such cases, a workaround was to connect with gdb, and\n&gt;&gt; send the right &#39;IO is ready&#39; signal to the thread - which then resumed\n&gt;&gt; progress. (I think it was SIGIO, but not sure.)\n&gt;&gt;\n&gt;&gt; We&#39;re long separated from those bad old days, I hope � unless you&#39;re\n&gt;&gt; using an older/atypical OS/JVM combination, or some other mix of new\n&gt;&gt; hardware/filesystems that might have similar undebugged multi-threaded\n&gt;&gt; timing issues. So I wonder if a similar &quot;send the overlooked signal&quot;\n&gt;&gt; could be tried here, to unstick rather than kill the thread.\n&gt;&gt;\n&gt;&gt; (For a few subsequent years, OpenJDK at least through 1.6 versions often\n&gt;&gt; had mysterious thread hangs, that I tended to attribute to some sort of\n&gt;&gt; similar issue - and tended to disappear when avoiding OpenJDK.)\n&gt;&gt;\n&gt;&gt; - Gordon\n&gt;&gt;\n&gt;&gt; On 8/27/14, 10:16 AM, Noah Levittnlevitt@... &lt;mailto:nlevitt@...&gt; [archive-crawler]\n&gt;&gt; wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; Hey Ahmed,\n&gt;&gt;&gt;\n&gt;&gt;&gt; Do you have a stack trace of these hung threads? It&#39;s not something I\n&gt;&gt;&gt; see very often. Usually they will finish if you wait them out.\n&gt;&gt;&gt;\n&gt;&gt;&gt; Noah\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; On Wed, Aug 27, 2014 at 8:46 AM, Ahmed Alsumaalsum@... &lt;mailto:aalsum@...&gt;\n&gt;&gt;&gt; &lt;mailto:aalsum@...&gt; [archive-crawler]\n&gt;&gt;&gt; &lt;archive-crawler@yahoogroups.com &lt;mailto:archive-crawler@yahoogroups.com&gt;\n&gt;&gt;&gt; &lt;mailto:archive-crawler@yahoogroups.com&gt;&gt; wrote:\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;      Hello,\n&gt;&gt;&gt;\n&gt;&gt;&gt;      Sometimes we face the problem of hang up threads in Heritrix job\n&gt;&gt;&gt;      that may suspend the whole job. I investigated in this issue and\n&gt;&gt;&gt;      came with a method to kill these threads. I would like to share the\n&gt;&gt;&gt;      idea with you and looking forward for your feedback if there is any\n&gt;&gt;&gt;      concern or if there are other methods that I may add to the post.\n&gt;&gt;&gt;\n&gt;&gt;&gt;http://a-alsum.blogspot.com/2014/08/killing-hang-up-threads-in-heritrix.html\n&gt;&gt;&gt;\n&gt;&gt;&gt;      Best regards,\n&gt;&gt;&gt;      Ahmed AlSum, Ph.D.\n&gt;&gt;&gt;      Web Archiving Engineer\n&gt;&gt;&gt;      Digital Library System and Services\n&gt;&gt;&gt;      Stanford University Library\n&gt;&gt;&gt;      Work: 650-868-7449 &lt;tel:650-868-7449&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;      &lt; /div&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; ------------------------------------\n&gt;&gt; Posted by: Gordon Mohr &lt;gojomo@... &lt;mailto:gojomo@...&gt;&gt;\n&gt;&gt; ------------------------------------\n&gt;&gt;\n&gt;&gt;\n&gt;&gt; ------------------------------------\n&gt;&gt;\n&gt;&gt; Yahoo Groups Links\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;\n&gt;\n&gt;\n&gt; \n\n"}}