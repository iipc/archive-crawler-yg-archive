{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":168599281,"authorName":"Michael Stack","from":"Michael Stack &lt;stack@...&gt;","profile":"stackarchiveorg","replyTo":"LIST","senderId":"eQFfwjHB_zY7JRHz1QSjQciEfVMYqzcrlfIo1bF0EOJyVHXemAqDHoGjLea82F4GypwNUcgqN7KEneWKDbuxiEK4BGlocPZH","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] [Thoughts / Fixes] bugs 1507554,1517693","postDate":"1152942750","msgId":3055,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ0Qjg4MjlFLjUwNzA3QGFyY2hpdmUub3JnPg==","inReplyToHeader":"PGIxM2YzZjA2MDYwNzEzMDAzN3U1NjVkZWFlNWtkNGVhYjRkMGY2OTI4ZmY4QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PGIxM2YzZjA2MDYwNzA5MTQyN2czYmZkMTgyMXlhYmE5MTZjZDE5NmJkZTc1QG1haWwuZ21haWwuY29tPgkgPDQ0QjI5RUY5LjkwNDA4MDRAYXJjaGl2ZS5vcmc+IDw0NEIyREQ4MC43MDUwODA3QGFyY2hpdmUub3JnPgkgPGIxM2YzZjA2MDYwNzEwMjEzM2gxNzg0OGRmY3BkNTBkYTFlYzdjYjQ2MjBlQG1haWwuZ21haWwuY29tPgkgPDQ0QjQxQzZBLjUwMzAzMDRAYXJjaGl2ZS5vcmc+IDxiMTNmM2YwNjA2MDcxMzAwMzd1NTY1ZGVhZTVrZDRlYWI0ZDBmNjkyOGZmOEBtYWlsLmdtYWlsLmNvbT4="},"prevInTopic":3048,"nextInTopic":0,"prevInTime":3054,"nextInTime":3056,"topicId":3026,"numMessagesInTopic":10,"msgSnippet":"... I just committed your patches Yousef (and closed the two issues they fixed).  I renamed descapeHtmlForURI as unescapeHtml (I m not sure descape is a word","rawEmail":"Return-Path: &lt;stack@...&gt;\r\nX-Sender: stack@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 41638 invoked from network); 15 Jul 2006 05:52:34 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m25.grp.scd.yahoo.com with QMQP; 15 Jul 2006 05:52:34 -0000\r\nReceived: from unknown (HELO dns.duboce.net) (63.203.238.114)\n  by mta5.grp.scd.yahoo.com with SMTP; 15 Jul 2006 05:52:33 -0000\r\nReceived: from [192.168.1.106] ([192.168.1.106])\n\t(authenticated)\n\tby dns-eth1.duboce.net (8.10.2/8.10.2) with ESMTP id k6F4aSk21724\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Fri, 14 Jul 2006 21:36:28 -0700\r\nMessage-ID: &lt;44B8829E.50707@...&gt;\r\nDate: Fri, 14 Jul 2006 22:52:30 -0700\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.8.0.4) Gecko/20060516 SeaMonkey/1.0.2\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;b13f3f060607091427g3bfd1821yaba916cd196bde75@...&gt;\t &lt;44B29EF9.9040804@...&gt; &lt;44B2DD80.7050807@...&gt;\t &lt;b13f3f060607102133h17848dfcpd50da1ec7cb4620e@...&gt;\t &lt;44B41C6A.5030304@...&gt; &lt;b13f3f060607130037u565deae5kd4eab4d0f6928ff8@...&gt;\r\nIn-Reply-To: &lt;b13f3f060607130037u565deae5kd4eab4d0f6928ff8@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Michael Stack &lt;stack@...&gt;\r\nSubject: Re: [archive-crawler] [Thoughts / Fixes] bugs 1507554,1517693\r\nX-Yahoo-Group-Post: member; u=168599281; y=PwA86EpbJx9NjYuBeHBFmGp4mK8UG_itDBqSWjchkJXn2zTyNMgM-5Ef\r\nX-Yahoo-Profile: stackarchiveorg\r\n\r\nYousef Ourabi wrote:\n&gt;\n&gt; Hello:\n&gt; I&#39;ve tweaked things a little more. Per St.Ack&#39;s nutch code, when a\n&gt; CharSequence is passed to descapeHtmlforURI there is first a check to\n&gt; see if it has an html entity before passing it to\n&gt; StringEscapeUtils.unescapeHtml (commons-lang)\n&gt;\n&gt; descapeHtmlForURI() now takes and returns a CharSequence.\n&gt;\n&gt; There was a duplicate call to descapeHtmlForURI that has also been \n&gt; removed,\n&gt;\n&gt; If anyone has any additional thoughts, please share!\n&gt;\n&gt; I&#39;m attaching the two patches, and the crude html page I used to test\n&gt; the changes.\n&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\nI just committed your patches Yousef (and closed the two issues they \nfixed).  I renamed descapeHtmlForURI as unescapeHtml (I&#39;m not sure \ndescape is a word and your code would work for non-URIs passed).  I also \nadded a unit test to prove your code was doing the right thing.\n\nThanks for the contribution!\nSt.Ack\n\n\n&gt;\n&gt; Best,\n&gt; Yousef\n&gt;\n&gt; On 7/11/06, stack@... &lt;mailto:stack%40archive.org&gt; \n&gt; &lt;stack@... &lt;mailto:stack%40archive.org&gt;&gt; wrote:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Yousef Ourabi wrote:\n&gt; &gt; &gt;\n&gt; &gt; &gt; Will, St.Ack, and Igor:\n&gt; &gt; &gt;\n&gt; &gt; &gt; Thanks for the input! The context for the eager link detection makes\n&gt; &gt; &gt; more sense now (from the archival point of view). I&#39;ve made\n&gt; &gt; &gt; overly-eager-link-detection and ignore-unexpected-html (there was a to\n&gt; &gt; &gt; do for it so I knocked it off) configurable via the UI under expert\n&gt; &gt; &gt; settings. This is the first step. What I plan on doing in the future\n&gt; &gt; &gt; is having levels of eagerness.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; This would be a nice addition.\n&gt; &gt;\n&gt; &gt; ....\n&gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt;\n&gt; &gt; &gt; I&#39;m still pondering the most elegant / practical way of using the\n&gt; &gt; &gt; Translate class from the htmlParser project as Will suggested. I&#39;m\n&gt; &gt; &gt; kind of adverse to importing three new classes which would be the\n&gt; &gt; &gt; fastest (human time wise -- and then descapeHtmlForUri would just be a\n&gt; &gt; &gt; facade for Translate.decode() ) -- and copying and pasting the method\n&gt; &gt; &gt; is a bit sloppy. I&#39;ll submit that patch tomorrow evening. In any case\n&gt; &gt; &gt; I&#39;m pretty sure the descapeHtmlForUri method signature will remain\n&gt; &gt; &gt; unchanged so I&#39;ve left that in ExtractorHTML.\n&gt; &gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; I can add apache commons-lang to Heritrix if you&#39;d like.\n&gt; &gt; \n&gt; http://jakarta.apache.org/commons/lang/api-release/org/apache/commons/lang/StringEscapeUtils.html#unescapeHtml \n&gt; &lt;http://jakarta.apache.org/commons/lang/api-release/org/apache/commons/lang/StringEscapeUtils.html#unescapeHtml&gt;(java.lang.String).\n&gt; &gt; Its about 200k which is kinda big but has loads of utility we could make\n&gt; &gt; use of elsewhere (I took a look at the implementation. Looks grand)\n&gt; &gt;\n&gt; &gt; In the past, addressing a similar issue in nutch, I first did a\n&gt; &gt; lookahead to see if String had HTML entity encodings present before\n&gt; &gt; handing it off to a decoder (Nutch has one built-in). I&#39;ve attached my\n&gt; &gt; old code. The lookahead was to avoid creating new Strings if possible\n&gt; &gt; (It could have been done better. Once an Entity encoding was found, it\n&gt; &gt; gives complete String to decoder rather than just where the first Entity\n&gt; &gt; was found). Related, the ExtractorHTML does its best to not create\n&gt; &gt; objects. Its the Great Offender as far object creation is concerned in\n&gt; &gt; Heritrix, as can be expected. Thats one reason its passing CharSequence\n&gt; &gt; everywhere. What&#39;d be sweet would be a version of commons-lang\n&gt; &gt; StringEscapeUtils that took a CharSequence and only created a new\n&gt; &gt; String/CharSequence if entity encoding present (Or, would only invoke\n&gt; &gt; commons-lang if entity encoding found).\n&gt; &gt;\n&gt; &gt; Otherwise, your patch looks good -- thanks for implementing the TODO --\n&gt; &gt; except for this:\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; @@ -220,6 +240,7 @@\n&gt; &gt; assert start &gt;= 0: &quot;Start is: &quot; + start + &quot;, &quot; + curi;\n&gt; &gt; assert end &gt;= 0: &quot;End is :&quot; + end + &quot;, &quot; + curi;\n&gt; &gt; CharSequence value = cs.subSequence(start, end);\n&gt; &gt; + value = TextUtils.descapeHtmlForURI(value.toString());\n&gt; &gt; if (attr.start(2) &gt; -1) {\n&gt; &gt; // HREF\n&gt; &gt; CharSequence context =\n&gt; &gt; @@ -276,7 +297,7 @@\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; Is the blanket decoding of the value CharSequence needed? Especially\n&gt; &gt; considering it converts the CharSequence to String? Can it be done only\n&gt; &gt; if there&#39;s a codebase match (regex group 6)? Thats the only time the\n&gt; &gt; replace of &amp; is currently done (Also, why the second call to descape\n&gt; &gt; if you&#39;ve dont it at the head of the if/else)?\n&gt; &gt;\n&gt; &gt; Thanks for working on this Yousef.\n&gt; &gt;\n&gt; &gt; St.Ack\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt; &gt; /**\n&gt; &gt; * Ensure string is legal xml and remove any html numeric character\n&gt; &gt; * encodings if present.\n&gt; &gt; * First look to see if string has illegal characters. If it doesn&#39;t,\n&gt; &gt; * just return it. Otherwise, create new string with legal characters.\n&gt; &gt; * Also remove any html numeric character encodings if present (One\n&gt; &gt; * source of these is the entity encoding done in Fragment#toString,\n&gt; &gt; * an inner class of Summary.\n&gt; &gt; * @param text String to verify.\n&gt; &gt; * @return Passed &lt;code&gt;text&lt;/code&gt; or a new string with illegal and\n&gt; &gt; * numeric character encodings removed if any found in &lt;code&gt;text&lt;/code&gt;.\n&gt; &gt; * @see &lt;a href=&quot;http://www.w3.org/TR/2000/REC-xml-20001006#NT-Char \n&gt; &lt;http://www.w3.org/TR/2000/REC-xml-20001006#NT-Char&gt;&quot;&gt;REC-xml-20001006&lt;/a&gt;\n&gt; &gt; */\n&gt; &gt; static String getXmlStr(final String text) {\n&gt; &gt; if (text == null) {\n&gt; &gt; return null;\n&gt; &gt; }\n&gt; &gt; boolean fix = false;\n&gt; &gt; int offset = 0;\n&gt; &gt; for (int i = 0; i &lt; text.length(); i++) {\n&gt; &gt; // Look for character entity encodings. One source is the html\n&gt; &gt; // entity encoding done down in the Summary Fetcher class.\n&gt; &gt; // Undo these unwanted encodings and pass\n&gt; &gt; // resultant character to the isLegalXml test in case its encoding\n&gt; &gt; // of\n&gt; &gt; // illegal character: e.g. &#7;.\n&gt; &gt; char c = text.charAt(i);\n&gt; &gt; if (isLikelyHtmlEntity(text, i, c) || !isLegalXml(c)) {\n&gt; &gt; offset = i;\n&gt; &gt; fix = true;\n&gt; &gt; break;\n&gt; &gt; }\n&gt; &gt; }\n&gt; &gt; return fix? xmlize(text, offset): text;\n&gt; &gt; }\n&gt; &gt;\n&gt; &gt; private static boolean isLikelyHtmlEntity(final String text,\n&gt; &gt; final int offset, final char c) {\n&gt; &gt; if (c != &#39;&&#39;) {\n&gt; &gt; return false;\n&gt; &gt; }\n&gt; &gt; int index = text.indexOf(&#39;;&#39;, offset + 1);\n&gt; &gt; // Look for semicolon and if distance to semicolon is less than or equal\n&gt; &gt; // to maximum entity name -- which seems to be 8 characters and all are\n&gt; &gt; // alphas -- then return true its likely html entity.\n&gt; &gt; if (index &gt; offset + 9) {\n&gt; &gt; return false;\n&gt; &gt; }\n&gt; &gt; for (int i = offset + 1; i &lt; index; i++) {\n&gt; &gt; if (!Character.isLetter(text.charAt(i))) {\n&gt; &gt; return false;\n&gt; &gt; }\n&gt; &gt; }\n&gt; &gt; return true;\n&gt; &gt; }\n&gt; &gt;\n&gt; &gt; private static String xmlize(final String text) {\n&gt; &gt; return xmlize(text, 0);\n&gt; &gt; }\n&gt; &gt;\n&gt; &gt; private static String xmlize(final String text, final int offset) {\n&gt; &gt; if (text == null) {\n&gt; &gt; return null;\n&gt; &gt; }\n&gt; &gt;\n&gt; &gt; StringBuffer buffer = new StringBuffer(text.length() * 2);\n&gt; &gt; if (offset &gt; 0) {\n&gt; &gt; buffer.append(text.substring(0, offset));\n&gt; &gt; }\n&gt; &gt; for (int i = offset; i &lt; text.length();) {\n&gt; &gt; char c = text.charAt(i);\n&gt; &gt; if (isLikelyHtmlEntity(text, i, c)) {\n&gt; &gt; int index = text.indexOf(&#39;;&#39;, i + 1);\n&gt; &gt; c = NutchwaxEntities.decode(text.substring(i, index + 1));\n&gt; &gt; i = index + 1;\n&gt; &gt; } else {\n&gt; &gt; i++;\n&gt; &gt; }\n&gt; &gt;\n&gt; &gt; if (isLegalXml(c)) {\n&gt; &gt; buffer.append(c);\n&gt; &gt; }\n&gt; &gt; }\n&gt; &gt; return buffer.toString();\n&gt; &gt; }\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt; \n&gt; ------------------------------------------------------------------------\n&gt;\n&gt; Hello \n&gt; &lt;http://127.0.0.1/%7Eyourabi/heritrix/yousef%27s/&yousef%27s-page%3Ctag%3E.html&gt; \n&gt;\n&gt;\n&gt; Hello \n&gt; &lt;http://127.0.0.1/%7Eyourabi/heritrix/yousef%27s/abckdefegegg&AAAAAAAAAAAAAAAA;abdcki.html&gt; \n&gt;\n&gt;\n&gt; foo\n&gt;\n&gt;\n&gt;   hello\n&gt;\n\n\n"}}