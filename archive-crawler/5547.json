{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"jMClcXASAQOXOvJMjcopq15CyWAtOJFU9Rj1dywAw_vXN9wxlY0fc6cToJHMBGjzE2JhG02f5ExVXbFjNHkZ9G2bDJbgqrQ","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [archive-crawler] Broad-scope 10M seeds Xmx6G 64-Bit JVM: OOME: GC overhead limit exceeded","postDate":"1224809386","msgId":5547,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ5MDExQkFBLjgwNDA3MDlAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDQ5MDA2MEQxLjUwNzA0MDdAdW1icmljaC5uZXQ+","referencesHeader":"PDQ5MDA2MEQxLjUwNzA0MDdAdW1icmljaC5uZXQ+"},"prevInTopic":5542,"nextInTopic":5548,"prevInTime":5546,"nextInTime":5548,"topicId":5537,"numMessagesInTopic":12,"msgSnippet":"We ve run many crawls that collect hundreds of millions of URIs over weeks (though usually from a smaller number of seeds), so this should be working for you,","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nX-Received: (qmail 61018 invoked from network); 24 Oct 2008 00:49:48 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m53.grp.scd.yahoo.com with QMQP; 24 Oct 2008 00:49:48 -0000\r\nX-Received: from unknown (HELO relay03.pair.com) (209.68.5.17)\n  by mta15.grp.scd.yahoo.com with SMTP; 24 Oct 2008 00:49:47 -0000\r\nX-Received: (qmail 87678 invoked from network); 24 Oct 2008 00:49:46 -0000\r\nX-Received: from 66.90.243.158 (HELO ?10.10.1.111?) (66.90.243.158)\n  by relay03.pair.com with SMTP; 24 Oct 2008 00:49:46 -0000\r\nX-pair-Authenticated: 66.90.243.158\r\nMessage-ID: &lt;49011BAA.8040709@...&gt;\r\nDate: Thu, 23 Oct 2008 17:49:46 -0700\r\nUser-Agent: Thunderbird 2.0.0.17 (Windows/20080914)\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;490060D1.5070407@...&gt;\r\nIn-Reply-To: &lt;490060D1.5070407@...&gt;\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\nSubject: Re: [archive-crawler] Broad-scope 10M seeds Xmx6G 64-Bit JVM: OOME:\n GC overhead limit exceeded\r\nX-Yahoo-Group-Post: member; u=137285340; y=NeXCVzNkjyvt3M2lhvFinD6UxT2_xnElTVDrEI63SH3Z\r\nX-Yahoo-Profile: gojomo\r\n\r\nWe&#39;ve run many crawls that collect hundreds of millions of URIs over \nweeks (though usually from a smaller number of seeds), so this should be \nworking for you, at least if the configuration is optimized.\n\nThe &quot;GC overhead limit exceeded&quot; variety of OOME is somewhat unique: it \ndoesn&#39;t actually mean that the VM tried and failed to allocate memory, \nbut rather that it decided it was spending a hopeless amount of time in \ngarbage collection (something like &gt;98% of all VM time, IIRC). There is \nsome obscure JVM option for decreasing that threshold, but clearly, if \nthis OOME is being hit, something is wrong -- something allocating an \nextreme amount of short-lived objects, such that more time is spent \nGCing than anything else.\n\nSome diagnostic questions and comments:\n\n(1) What version of Heritrix are you using?\n\n(2) What changes from the default, bundled crawl configurations have you \nmade? (Alternate implementation classes, different setting values, etc.?)\n\n(3) With BloomURIUniqFilter, have you changed the default sizing \nparameters (se in Heritrix 1.x by system properties) any?\n\n\n(4) Can you send full thread stacks (as in the &#39;Threads Report&#39; or \ndumped to the _out.log when the JVm process is sent a -SIGQUIT) of the \nthreads, ideally after the crawler has markedly slowed but before the \nOOME occurs? (After the OOME might be interesting too; in both cases we \nmight get a clue as to what&#39;s overwhelming the JVM with GC activity.)\n\n(5) On a quad-core with that much RAM you could probably run with many \nmore threads; we often use 150-200 on dual-core machines with only 4GB RAM.\n\n- Gordon @ IA\n\nJuergen Umbrich wrote:\n&gt; Hi all,\n&gt; \n&gt; we started yesterday evening a large crawl (10M seed URIs, 100 threads, BloomURIUniquFilter) on a server with the following setup:\n&gt;  ubuntu 8.04 server, quad core XEON 2.33GHz, 8GB RAM\n&gt; \n&gt; and the java version\n&gt;  java version &quot;1.6.0_06&quot;\n&gt;  Java(TM) SE Runtime Environment (build 1.6.0_06-b02)\n&gt;  Java HotSpot(TM) 64-Bit Server VM (build 10.0-b22, mixed mode)\n&gt; \n&gt; Heritrix was started with the webui and  JAVA_OPTS=&quot; -Xmx6G&quot;\n&gt; bdb-cache-percentage:60\n&gt; \n&gt; after around 5 hours (timestamp 2008-10-23T01:25:12Z in progress-statistics.log) the whole crawling process was slowing down\n&gt; and another 40 minutes later we run into a &quot;java.lang.OutOfMemoryError: GC overhead limit exceeded&quot; error message:\n&gt; After the exepction occurred the crawling is trying to pause\n&gt; The most of the toe-threads are in the state\n&gt;    in processor: \n&gt;     ACTIVE for 9h17m23s171ms\n&gt;     step: ABOUT_TO_RETURN_URI for 9h15m21s608ms\n&gt; \n&gt; \n&gt; Anyone else run into these problems for a large crawl and a big seed set?\n&gt; And any ideas how we can solve this problem? \n&gt; \tswitching to 32-bit JVM?\n&gt; \tdecreasing the Xmx?\n&gt; \tusing different modules?\n&gt; \tchanging the bdb-cache-percentage to 20? \n&gt; \n&gt; Best juergen\n&gt;        \n&gt; alerts.log\n&gt; ---------------------------------------------\n&gt; timestamp  discovered      queued   downloaded       doc/s(avg)  KB/s(avg)   dl-failures   busy-thread   mem-use-KB  heap-size-KB   congestion   max-depth   avg-depth\n&gt; 2008-10-23T02:15:23Z    21615683    19520820      1753528         0(87.55)    0(4008)            35           100      5334193       5854720     3,664.79      592106          24\n&gt;  (in thread &#39;ToeThread #58: http://cathcon.blogspot.com/2007/02/president-of-ecclesia-dei-commission.html?widgetType=BlogArchive&widgetId=BlogArchive1&action=toggle&dir=open&toggle=DAILY-1133128800000&toggleopen=DAILY-1200520800000&#39;; in processor &#39;ExtractorHTML&#39;)\n&gt; java.lang.OutOfMemoryError: GC overhead limit exceeded\n&gt; \tat java.lang.String.toCharArray(String.java:2726)\n&gt; \tat org.apache.commons.httpclient.URI.setURI(URI.java:2304)\n&gt; \tat org.archive.net.LaxURI.setURI(LaxURI.java:214)\n&gt; \tat org.apache.commons.httpclient.URI.&lt;init&gt;(URI.java:593)\n&gt; \tat org.archive.net.LaxURI.&lt;init&gt;(LaxURI.java:79)\n&gt; \tat org.archive.net.UURI.&lt;init&gt;(UURI.java:142)\n&gt; \tat org.archive.net.UURIFactory.create(UURIFactory.java:340)\n&gt; \tat org.archive.net.UURIFactory.getInstance(UURIFactory.java:289)\n&gt; \tat org.archive.modules.extractor.Link.addRelativeToBase(Link.java:135)\n&gt; \tat org.archive.modules.extractor.ExtractorHTML.addLinkFromString(ExtractorHTML.java:513)\n&gt; \tat org.archive.modules.extractor.ExtractorHTML.processLink(ExtractorHTML.java:496)\n&gt; \tat org.archive.modules.extractor.ExtractorHTML.processGeneralTag(ExtractorHTML.java:329)\n&gt; \tat org.archive.modules.extractor.ExtractorHTML.extract(ExtractorHTML.java:642)\n&gt; \tat org.archive.modules.extractor.ExtractorHTML.innerExtract(ExtractorHTML.java:588)\n&gt; \tat org.archive.modules.extractor.ContentExtractor.extract(ContentExtractor.java:41)\n&gt; \tat org.archive.modules.extractor.Extractor.innerProcess(Extractor.java:81)\n&gt; \tat org.archive.modules.Processor.innerProcessResult(Processor.java:157)\n&gt; \tat org.archive.modules.Processor.process(Processor.java:123)\n&gt; \tat org.archive.crawler.framework.ToeThread.processCrawlUri(ToeThread.java:310)\n&gt; \tat org.archive.crawler.framework.ToeThread.run(ToeThread.java:157)\n&gt; \n&gt; \n&gt; progress.log\n&gt; -------------------------------------------------\n&gt; ...\n&gt; 2008-10-23T01:25:12Z    21293183    19243268      1715634    101.4(100.75) 7127(4561)            34           100      5982452       6205568     1,174.99      562211          24\n&gt; 2008-10-23T01:25:32Z    21311147    19258558      1717786    107.6(100.76) 4764(4561)            34           100      4902086       6197696     1,144.64      563411          24\n&gt; 2008-10-23T01:25:52Z    21324571    19269129      1719989   110.15(100.77) 6178(4563)            34           100      6049911       6204672      1,138.2      563411          24\n&gt; 2008-10-23T01:26:12Z    21337106    19279128      1722024   101.75(100.77) 5639(4565)            34           100      4736609       6204864     1,144.87      564609          24\n&gt; 2008-10-23T01:26:32Z    21351335    19290456      1724248    111.2(100.78) 5070(4565)            34           100      5111065       6204096     1,170.33      564609          24\n&gt; 2008-10-23T01:26:52Z    21368500    19304977      1726370    106.1(100.79) 5037(4566)            34           100      5998218       6205696     1,108.41      565805          24\n&gt; 2008-10-23T01:27:16Z    21374205    19309707      1727201    36.13(100.69) 2683(4563)            34           100      4347106       6206656     1,759.74      565805          24\n&gt; 2008-10-23T01:27:36Z    21385008    19319012      1728411     60.5(100.65) 3693(4562)            34           100      5734990       6206656     1,034.79      566998          24\n&gt; 2008-10-23T01:27:56Z    21390723    19323471      1729405     49.7(100.59) 3153(4560)            34           100      5551707       6206656     1,085.77      566998          24\n&gt; 2008-10-23T01:28:16Z    21405897    19336401      1731204    89.95(100.58) 4857(4561)            34           100      4177063       6148672     1,301.37      568195          24\n&gt; 2008-10-23T01:28:36Z    21418956    19347193      1733115    95.55(100.57) 4878(4561)            34           100      5718823       6073152     1,152.28      569389          24\n&gt; 2008-10-23T01:28:56Z    21430669    19356890      1734839     86.2(100.55) 4056(4560)            34           100      5261514       5992320     1,164.21      569389          24\n&gt; 2008-10-23T01:29:16Z    21440989    19365996      1735893      52.7(100.5) 4148(4560)            34           100      5114942       5858112     1,435.82      570584          24\n&gt; 2008-10-23T01:29:42Z    21444874    19369176      1736512    24.76(100.38) 1456(4555)            34           100      4697427       5854720     2,236.76      570584          24\n&gt; 2008-10-23T01:30:04Z    21446508    19370672      1736647     6.14(100.26)  836(4550)            34           100      4442456       5854720     1,671.69      570584          24\n&gt; 2008-10-23T01:30:25Z    21449555    19373366      1736951     15.2(100.16) 1350(4547)            34           100      4571996       5854720     1,435.96      571443   \n&gt; ...\n&gt; \n&gt; ...\n&gt; 2008-10-23T02:13:01Z    21614390    19519597      1753459       0.4(88.12)   50(4033)            35           100      5382547       5854720     3,472.63      592106          24\n&gt; 2008-10-23T02:13:30Z    21614521    19519702      1753485         0.93(88)   27(4028)            35           100      5319947       5854720     3,193.76      592106          24\n&gt; 2008-10-23T02:13:56Z    21614858    19520000      1753523      1.46(87.88)  161(4023)            35           100      5415329       5854720     3,058.65      592106          24\n&gt; 2008-10-23T02:14:16Z    21615064    19520203      1753525       0.1(87.79)   12(4019)            35           100      5415645       5854720     3,487.93      592106          24\n&gt; 2008-10-23T02:14:34Z CRAWL WAITING - Pausing - Waiting for threads to finish\n&gt; 2008-10-23T02:14:45Z    21615268    19520404      1753528      0.11(87.67)   54(4013)            35           100      5327101       5854720     3,664.74      592106          24\n&gt; 2008-10-23T02:15:11Z    21615683    19520820      1753528         0(87.55)    0(4008)            35           100      5395253       5854720     3,664.79      592106   \n&gt; \n&gt; \n&gt; jmap -histo\n&gt; --------------------------------------------------------------\n&gt;  num     #instances         #bytes  class name\n&gt; ----------------------------------------------\n&gt;    1:      17859645     2687973960  [B\n&gt;    2:        246109      762397896  [I\n&gt;    3:       7502762      300110480  com.sleepycat.je.tree.LN\n&gt;    4:       1933216      260289128  [C\n&gt;    5:        136150      142679352  [[B\n&gt;    6:        136144      142678912  [Lcom.sleepycat.je.tree.Node;\n&gt;    7:        121702      127437960  [J\n&gt;    8:       1806612       72264480  java.lang.String\n&gt;    9:        731701       64389688  org.archive.modules.fetcher.FetchStats\n&gt;   10:        736672       53040384  org.archive.util.CachedBdbMap$SoftEntry\n&gt;   11:        728676       52464672  org.archive.modules.net.CrawlHost\n&gt;   12:        736672       47147008  org.archive.util.CachedBdbMap$PhantomEntry\n&gt;   13:         97855       43068792  [Ljava.util.HashMap$Entry;\n&gt;   14:        775754       37236192  java.util.HashMap$Entry\n&gt;   15:        132591       24396744  com.sleepycat.je.tree.BIN\n&gt;   16:        136162        8714368  com.sleepycat.je.latch.SharedLatch\n&gt;   17:        136162        8714368  java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync\n&gt;   18:        136362        6545376  java.util.concurrent.ConcurrentHashMap$HashEntry\n&gt;   19:         97431        6235584  java.util.HashMap\n&gt;   20:         35912        5251752  &lt;constMethodKlass&gt;\n&gt;   21:         18438        4425120  org.archive.crawler.datamodel.CrawlURI\n&gt;   22:         35912        4318144  &lt;methodKlass&gt;\n&gt;   23:        132605        4243360  com.sleepycat.je.utilint.TinyHashSet\n&gt;   24:          3412        4051888  &lt;constantPoolKlass&gt;\n&gt;   25:         22848        3655680  org.archive.net.UURI\n&gt;   26:        136163        3267912  java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter\n&gt;   27:        136163        3267912  java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock\n&gt;   28:        136163        3267912  java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock\n&gt;   29:         62604        3167912  &lt;symbolKlass&gt;\n&gt;   30:          3412        2546888  &lt;instanceKlassKlass&gt;\n&gt;   31:          3041        2502496  &lt;constantPoolCacheKlass&gt;\n&gt;   32:           321        2110576  [Ljava.util.concurrent.ConcurrentHashMap$HashEntry;\n&gt;   33:         77608        1862592  java.util.HashSet\n&gt;   34:          4171        1823160  &lt;methodDataKlass&gt;\n&gt;   35:         37497        1799856  java.io.StringWriter\n&gt;   36:         24471        1370376  java.lang.ThreadLocal$ThreadLocalMap$Entry\n&gt;   37:         41343        1322976  java.lang.StringBuffer\n&gt;   38:         13887         888768  java.util.TreeMap$Entry\n&gt;   39:         36857         884568  java.util.HashMap$KeySet\n&gt;   40:          9117         875232  java.util.regex.Pattern\n&gt;   41:         14773         827288  java.nio.HeapCharBuffer\n&gt;   42:          9291         817608  java.util.regex.Matcher\n&gt;   43:         14495         811720  java.nio.HeapByteBuffer\n&gt;   44:          7292         758368  [Ljava.util.regex.Pattern$GroupHead;\n&gt;   45:         23037         737184  java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter\n&gt;   46:          3711         682824  java.lang.Class\n&gt;   47:          5393         667352  [Ljava.lang.Object;\n&gt;   48:          3553         568480  com.sleepycat.je.tree.IN\n&gt;   49:         22109         530616  org.archive.modules.extractor.HTMLLinkContext\n&gt;   50:          1989         495304  [Z\n&gt;   51:           249         481752  [Ljava.lang.ThreadLocal$ThreadLocalMap$Entry;\n&gt;   52:          5411         470592  [[I\n&gt;   53:          5864         462376  [S\n&gt;   54:          9313         298016  java.util.regex.Pattern$Single\n&gt;   55:          8275         264800  java.util.regex.Pattern$Start\n&gt;   56:          1512         254016  org.archive.crawler.frontier.BdbWorkQueue\n&gt;   57:          7268         232576  java.util.regex.Pattern$TreeInfo\n&gt;   58:          2989         230992  [Ljava.lang.String;\n&gt; \n&gt; crawler_console\n&gt; **\n&gt; \n&gt; *Time*\n&gt; 14h47m1s elapsed\n&gt; 6d20h35m1s remaining (estimated)\n&gt; *Totals*\n&gt; downloaded 1753528  \t\n&gt; \t *8*% \t 19521622 queued\n&gt; \n&gt; 21275249 total downloaded and queued\n&gt; 72 GB uncompressed data received\n&gt; \n&gt; *Frontier*\n&gt; 796118 URI queues: 828 active (149 in-process; 611 ready; 68 snoozed); \n&gt; 794438 inactive; 0 ineligible; 0 retired; 852 exhausted [RUN: 0 in, 50 out]\n&gt; *Threads*\n&gt; 100 threads: 91 ABOUT_TO_RETURN_URI, 8 ABOUT_TO_BEGIN_PROCESSOR, etc...; \n&gt; 91 , 4 ExtractorHTML, 2 Archiver, 2 Updater, 1 Scheduler\n&gt; \n&gt; ------------------------------------\n&gt; \n&gt; Yahoo! Groups Links\n&gt; \n&gt; \n&gt; \n\n"}}