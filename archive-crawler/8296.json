{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"72_Kay7pl7T-SOFgUhrttiXYRRzYRUMEinwC6yf76lTChE7P0AwLQp2xz68bGDF-y9J-NRNLmhya7lWgK3BVa25PmAyjT0M","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [archive-crawler] Re: Effect of killing a thread on queue","postDate":"1376008072","msgId":8296,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDUyMDQzNzg4LjgwODA1QGFyY2hpdmUub3JnPg==","inReplyToHeader":"PGt1MHA0OStiZTg5QGVHcm91cHMuY29tPg==","referencesHeader":"PGt1MHA0OStiZTg5QGVHcm91cHMuY29tPg=="},"prevInTopic":8292,"nextInTopic":0,"prevInTime":8295,"nextInTime":8297,"topicId":8289,"numMessagesInTopic":4,"msgSnippet":"From your stacks, a few observations: The MirrorWriterProcessor is a bit of contributed code not used at the Internet Archive or most other large crawling","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nX-Received: (qmail 57416 invoked by uid 102); 9 Aug 2013 00:27:55 -0000\r\nX-Received: from unknown (HELO mtaq6.grp.bf1.yahoo.com) (10.193.84.37)\n  by m7.grp.bf1.yahoo.com with SMTP; 9 Aug 2013 00:27:55 -0000\r\nX-Received: (qmail 20928 invoked from network); 9 Aug 2013 00:27:55 -0000\r\nX-Received: from unknown (HELO relay02.pair.com) (209.68.5.16)\n  by mtaq6.grp.bf1.yahoo.com with SMTP; 9 Aug 2013 00:27:55 -0000\r\nX-Received: (qmail 69093 invoked by uid 0); 9 Aug 2013 00:27:53 -0000\r\nX-Received: from 50.0.89.173 (HELO silverbook.local) (50.0.89.173)\n  by relay02.pair.com with SMTP; 9 Aug 2013 00:27:53 -0000\r\nX-pair-Authenticated: 50.0.89.173\r\nMessage-ID: &lt;52043788.80805@...&gt;\r\nDate: Thu, 08 Aug 2013 17:27:52 -0700\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:17.0) Gecko/20130620 Thunderbird/17.0.7\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;ku0p49+be89@...&gt;\r\nIn-Reply-To: &lt;ku0p49+be89@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\nSubject: Re: [archive-crawler] Re: Effect of killing a thread on queue\r\nX-Yahoo-Group-Post: member; u=137285340; y=KR20DHnfMokC8a1UrUha6g_7-7-vR4y3zc4sXPqaAT6x\r\nX-Yahoo-Profile: gojomo\r\n\r\n From your stacks, a few observations:\n\nThe MirrorWriterProcessor is a bit of contributed code not used at the \nInternet Archive or most other large crawling efforts I know, so it&#39;s \nhad less testing and troubleshooting. (It should perhaps be in a \nseparate &#39;contrib&#39; subpackage.)\n\nMapping the URI path & query-string space into any particular filesystem \ninvolves a bunch of tradeoffs... and it&#39;s even my impression that some \ntradeoffs that work well with some sites are exactly the wrong decisions \nfor other sites, so there&#39;s no single &#39;best approach&#39;. Hence, many \nefforts store HTTP data without any URI-munging inside verbatim \ncontainer formats (ARC/WARC).\n\nIt&#39;s quite easy for a regex to have pathologically-bad performance on \nworst-case input; our extractor classes have worked through a number of \nsuch bugs over the years. Here, it seems likely one of the MirrorWriter \nrewriting regexes has a similar problem.\n\nOur ToeThread.kill(), sending an interrupt to the thread, might not \ncause a thread to break out of a tight pattern-matching loop. (We have \nour own &#39;InterruptibleCharSequence&#39; used some places that checks for \nthread-interrupt on every charAt-probe; I don&#39;t know and somewhat doubt \nthe MirrorWriter in your stack dump is matching against such a target.)\n\n From your other stack, I see you&#39;re using a WinNT filesystem; Heritrix \ngets very little testing on anything other than Linux systems. Still, \nunless subsequent thread dumps over a long period show that thread in \nthe same spot, the implication that File.exists() is the hangup might be \na spurious indicator. The real thing holding up that thread might be a \nregex problem similar to the other stack, or some sort of IO/scheduling \ncompetition with other threads stuck in their busy spin. Hard to say.\n\n- Gordon\n\nOn 8/8/13 11:47 AM, Niels wrote:\n&gt; I killed the threads in question and nothing seems to have been lost forever. One such thread was stuck doing some seemingly infinite regex:\n&gt; [ToeThread #159: http://www.moleculardevices.com/Company/What-We-Do/Events.html\n&gt;   CrawlURI http://www.moleculardevices.com/Company/What-We-Do/Events.html L http://www.moleculardevices.com/    1 attempts\n&gt;      in processor: toConvertMirrorWriter\n&gt;      ACTIVE for 5d14h10s687ms\n&gt;      step: ABOUT_TO_BEGIN_PROCESSOR for 5d14h10s203ms\n&gt; Java Thread State: RUNNABLE\n&gt; Blocked/Waiting On: NONE\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Loop.matchInit(Unknown Source)\n&gt;      java.util.regex.Pattern$Prolog.match(Unknown Source)\n&gt;      java.util.regex.Pattern$CharProperty.match(Unknown Source)\n&gt;      java.util.regex.Pattern$BranchConn.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupTail.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Slice.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match0(Unknown Source)\n&gt;      java.util.regex.Pattern$Curly.match(Unknown Source)\n&gt;      java.util.regex.Pattern$GroupHead.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Branch.match(Unknown Source)\n&gt;      java.util.regex.Pattern$Begin.match(Unknown Source)\n&gt;      java.util.regex.Matcher.match(Unknown Source)\n&gt;      java.util.regex.Matcher.matches(Unknown Source)\n&gt;      org.archive.modules.writer.LocalMirrorWriterProcessor.rewriteLink(LocalMirrorWriterProcessor.java:260)\n&gt;      org.archive.modules.writer.LocalMirrorWriterProcessor.rewriteLinksFromElements(LocalMirrorWriterProcessor.java:359)\n&gt;      org.archive.modules.writer.LocalMirrorWriterProcessor.innerProcess(LocalMirrorWriterProcessor.java:207)\n&gt;      org.archive.modules.Processor.innerProcessResult(Processor.java:175)\n&gt;      org.archive.modules.Processor.process(Processor.java:142)\n&gt;      org.archive.modules.ProcessorChain.process(ProcessorChain.java:131)\n&gt;      org.archive.crawler.framework.ToeThread.run(ToeThread.java:151)\n&gt; ]\n&gt;\n&gt; Another seemed to be stuck trying to figure out if a file existed:\n&gt; [ToeThread #273: http://honeywell.com/Pages/h%00t%00t%00p%00:%00/%00/%00t%00w%00i%00t%00t%00e%00r%00.%00c%00o%00m%00/%00h%00o%00m%00e%00?%00s%00t%00a%00t%00u%00s%00=\n&gt;   CrawlURI http://honeywell.com/Pages/h%00t%00t%00p%00:%00/%00/%00t%00w%00i%00t%00t%00e%00r%00.%00c%00o%00m%00/%00h%00o%00m%00e%00?%00s%00t%00a%00t%00u%00s%00= EX http://honeywell.com/_layouts/InternetFramework/Scripts/Honeywell_HeaderFooter.js    2 attempts\n&gt;      in processor: toConvertMirrorWriter\n&gt;      ACTIVE for 5d18h2m16s780ms\n&gt;      step: ABOUT_TO_BEGIN_PROCESSOR for 5d18h2m12s911ms\n&gt; Java Thread State: RUNNABLE\n&gt; Blocked/Waiting On: NONE\n&gt;      java.io.WinNTFileSystem.getBooleanAttributes(Native Method)\n&gt;      java.io.File.exists(Unknown Source)\n&gt;      org.archive.modules.writer.MirrorWriterProcessor$PathSegment.existsMaybeCaseSensitive(MirrorWriterProcessor.java:859)\n&gt;      org.archive.modules.writer.MirrorWriterProcessor$EndSegment.addToPath(MirrorWriterProcessor.java:1186)\n&gt;      org.archive.modules.writer.MirrorWriterProcessor.uriToFile(MirrorWriterProcessor.java:720)\n&gt;      org.archive.modules.writer.MirrorWriterProcessor.uriToFile(MirrorWriterProcessor.java:591)\n&gt;      org.archive.modules.writer.MirrorWriterProcessor.innerProcess(MirrorWriterProcessor.java:416)\n&gt;      org.archive.modules.writer.LocalMirrorWriterProcessor.innerProcess(LocalMirrorWriterProcessor.java:121)\n&gt;      org.archive.modules.Processor.innerProcessResult(Processor.java:175)\n&gt;      org.archive.modules.Processor.process(Processor.java:142)\n&gt;      org.archive.modules.ProcessorChain.process(ProcessorChain.java:131)\n&gt;      org.archive.crawler.framework.ToeThread.run(ToeThread.java:151)\n&gt; ]\n&gt;\n&gt; Those are the two instances of blockage from the thread report. I can&#39;t imagine why the regex pattern matcher is having such a hard time.\n&gt;\n&gt; Niels\n&gt;\n&gt; --- In archive-crawler@yahoogroups.com, Gordon Mohr &lt;gojomo@...&gt; wrote:\n&gt;&gt;\n&gt;&gt; On 8/7/13 3:12 PM, Niels wrote:\n&gt;&gt;&gt; Hello, Is there any documentation about what happens to the queue\n&gt;&gt;&gt; when a toe thread is killed? I have been waiting for 21 threads to\n&gt;&gt;&gt; finish for 2 days now and am thinking of just killing them off. Is\n&gt;&gt;&gt; the queue at all affected if threads are killed half-way through?\n&gt;&gt;&gt; Mainly, I care if the thread hold large amounts of information about\n&gt;&gt;&gt; the current crawl state and thus would heavily affect the crawl\n&gt;&gt;&gt; integrity. Niels\n&gt;&gt;\n&gt;&gt; Killing a thread via the ToeThread.kill() method tries to be safe,\n&gt;&gt; aborting the URI in progress as a failure and telling the ToeThread not\n&gt;&gt; to proceed any further.\n&gt;&gt;\n&gt;&gt; But, depending on the exact cause/position of the stall, and whether the\n&gt;&gt; ToeThread is doing anything else (especially anything involving custom\n&gt;&gt; components/state), it might not be completely clean.\n&gt;&gt;\n&gt;&gt; Can you say more about the relevant ToeThreads&#39; current state?\n&gt;&gt;\n&gt;&gt; What Heritrix version, and what does a thread stack dump show?\n&gt;&gt;\n&gt;&gt; Standard config and behavior should make network fetches time-out much\n&gt;&gt; earlier, so there&#39;s something unique (perhaps an undiagnosed/unnoticed\n&gt;&gt; error?) if you have threads that seem to stuck doing the exact same\n&gt;&gt; thing for many hours.\n&gt;&gt;\n&gt;&gt; - Gordon\n&gt;&gt;\n&gt;\n&gt;\n&gt;\n&gt; ------------------------------------\n&gt;\n&gt; Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n\n"}}