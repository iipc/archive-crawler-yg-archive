{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":146599166,"authorName":"Dawid Weiss","from":"Dawid Weiss &lt;dawid.weiss@...&gt;","profile":"dawid_weiss","replyTo":"LIST","senderId":"HITBO2hJ1EFhB97oB-wiTi7G18kB5qKik_ZYCovph6iGOnmmD3gm9fEHvkMOHexLbcZ8MRgl4xqYMmecMuzQSmP-CDOCrj8ih8pgVsr_LEvk","spamInfo":{"isSpam":false,"reason":"0"},"subject":"File handle leak in memory-mapped files (MultiByteReplayCharSequence)","postDate":"1184189203","msgId":4427,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PDQ2OTU0QjEzLjUwMTA4MDhAY3MucHV0LnBvem5hbi5wbD4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":4426,"nextInTime":4428,"topicId":4427,"numMessagesInTopic":1,"msgSnippet":"Hi there, My name is Dawid Weiss, I have been using Heritrix for a few weeks now -- great software, really. I noticed a very annoying bug, described below. ","rawEmail":"Return-Path: &lt;dawid.weiss@...&gt;\r\nReceived: (qmail 87472 invoked from network); 12 Jul 2007 00:06:41 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m54.grp.scd.yahoo.com with QMQP; 12 Jul 2007 00:06:41 -0000\r\nReceived: from unknown (HELO n23.bullet.scd.yahoo.com) (66.94.237.52)\n  by mta8.grp.scd.yahoo.com with SMTP; 12 Jul 2007 00:06:41 -0000\r\nReceived: from [66.218.69.6] by n23.bullet.scd.yahoo.com with NNFMP; 12 Jul 2007 00:12:53 -0000\r\nReceived: from [66.218.66.75] by t6.bullet.scd.yahoo.com with NNFMP; 12 Jul 2007 00:06:40 -0000\r\nX-Sender: dawid.weiss@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 62605 invoked from network); 11 Jul 2007 21:28:23 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m55.grp.scd.yahoo.com with QMQP; 11 Jul 2007 21:28:22 -0000\r\nReceived: from unknown (HELO libra.cs.put.poznan.pl) (150.254.30.30)\n  by mta8.grp.scd.yahoo.com with SMTP; 11 Jul 2007 21:28:22 -0000\r\nReceived: from localhost (unknown [127.0.0.1])\n\tby libra.cs.put.poznan.pl (Postfix on VMS) with ESMTP id 8F97195\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Wed, 11 Jul 2007 21:26:49 +0000 (UTC)\r\nX-Virus-Scanned: amavisd-new at cs.put.poznan.pl\r\nReceived: from libra.cs.put.poznan.pl ([127.0.0.1])\n\tby localhost (libra.cs.put.poznan.pl [127.0.0.1]) (amavisd-new, port 10024)\n\twith ESMTP id EyteY7QiQ+fJ for &lt;archive-crawler@yahoogroups.com&gt;;\n\tWed, 11 Jul 2007 23:26:45 +0200 (CEST)\r\nReceived: from [150.254.130.25] (idss-dw-2.cs.put.poznan.pl [150.254.130.25])\n\tby libra.cs.put.poznan.pl (Postfix on VMS) with ESMTP id BB02092\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Wed, 11 Jul 2007 23:26:45 +0200 (CEST)\r\nMessage-ID: &lt;46954B13.5010808@...&gt;\r\nDate: Wed, 11 Jul 2007 23:26:43 +0200\r\nUser-Agent: Thunderbird 1.5.0.9 (Windows/20061207)\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nContent-Type: text/plain; charset=UTF-8; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Dawid Weiss &lt;dawid.weiss@...&gt;\r\nSubject: File handle leak in memory-mapped files (MultiByteReplayCharSequence)\r\nX-Yahoo-Group-Post: member; u=146599166; y=zSGUu45melc4dx0QBjdxImevKAimcfTsuSDIVWYaBt-kCd3HAng\r\nX-Yahoo-Profile: dawid_weiss\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Approved-By: gojomo &lt;gojomo@...&gt; via web; 12 Jul 2007 00:06:37 -0000\r\n\r\n\nHi there,\n\nMy name is Dawid Weiss, I have been using Heritrix for a few weeks now -- great \nsoftware, really. I noticed a very annoying bug, described below.\n\nWHAT HAPPENS\n\n1. (FreeBSD, Linux) When running a medium-to-large crawl, the java process \nultimately runs out of file handles. This ends with at least complex stack \ntraces from the VM and in the worst case in the VM crash (FreeBSD).\n\n2. (Windows) There are occassional (not repeatable, but frequent) errors when \nthreads are trying to spill crawled data to disk. The IOException thrown says \nthe thread&#39;s temporary file is locked.\n\nWHY IT HAPPENS\n\nThe problem is with memory-mapped file regions that fetcher threads use to \n&quot;spill&quot; data to disk. The exact location is in MultiByteReplayCharSequence --\n\n         charBuffer = getReadOnlyMemoryMappedBuffer(this.decodedFile).\n             asCharBuffer();\n\nThe bug is actually quite tricky. The memory-mapped buffer this method creates \nis here:\n\nin = new FileInputStream(file);\nc = in.getChannel();\n// TODO: Confirm the READ_ONLY works.  I recall it not working.\n// The buffers seem to always say that the buffer is writeable.\nbb = c.map(FileChannel.MapMode.READ_ONLY, 0, c.size()).\n\tasReadOnlyBuffer();\n\nThis piece of code causes two things. First, on Windows it causes the file to be \nlocked (even though the input stream is closed later on, the file remains locked \nuntil the mapped buffer is closed). Second, the mapped channed _cannot_ be \nclosed and in fact is never closed because the Java API does not have such a \nmethod... This seems a bit ridiculous, but the JavaDOC states clearly that:\n\n&quot;The buffer and the mapping that it represents will remain valid until the \nbuffer itself is garbage-collected.&quot;\n\nSo basically what happens is that the temporary file is locked (on Windows) or \nthe file handle is allocated (on Unixes) until the mapped buffer is garbage \ncollected. But this may _not_ happen if there is enough memory so that the GC \ndoesn&#39;t need to be invoked...\n\nPOSSIBLE FIX\n\nTo be honest, I don&#39;t see any correct and good solutions -- the Java API doesn&#39;t \nhave a &quot;close&quot; method on mapped buffers... One could read the file&#39;s content to \nmemory entirely (which obviously negates the purpose of using mapped buffers \nanyway) or use multiple temporary files (which doesn&#39;t solve the problem of \nleaking file handles) or call System.gc() and hope all the mapped buffers are \ngarbage collected... none of the above are appealing, to tell the truth.\n\n\nHas anybody encountered these issues? Does it seem like a blind alley to you as \nwell?\n\nDawid\n\n\n\n"}}