{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137477665,"authorName":"Igor Ranitovic","from":"Igor Ranitovic &lt;igor@...&gt;","profile":"iranitovic","replyTo":"LIST","senderId":"NZIMFp4xQuYte5qesGy5VZoT1FXISwtrOPR81gGkESVZXtFNB2nLhVKb01NFb3USSz2SEv-ht9NO1vE_rd_bJMbDPkntnfys","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] &quot;Garden&quot; Tests Wanted","postDate":"1067301827","msgId":159,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PFBpbmUuTE5YLjQuMzMuMDMxMDI3MTIwMjEyMC4xMjg2NC0xMDAwMDBAaG9tZXNlcnZlci5hcmNoaXZlLm9yZz4=","inReplyToHeader":"PDNGOUQ3M0RCLjQwNzAwMDRAYXJjaGl2ZS5vcmc+"},"prevInTopic":158,"nextInTopic":0,"prevInTime":158,"nextInTime":160,"topicId":157,"numMessagesInTopic":3,"msgSnippet":"I will add the following tests: 1. Parsing links between escaped quotes found in javascript. Example: document.write( test","rawEmail":"Return-Path: &lt;igor@...&gt;\r\nX-Sender: igor@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 2598 invoked from network); 28 Oct 2003 00:44:23 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m14.grp.scd.yahoo.com with QMQP; 28 Oct 2003 00:44:23 -0000\r\nReceived: from unknown (HELO homeserver.archive.org) (209.237.233.202)\n  by mta6.grp.scd.yahoo.com with SMTP; 28 Oct 2003 00:44:22 -0000\r\nReceived: from localhost (igor@localhost)\n\tby homeserver.archive.org (8.11.6/8.11.6) with ESMTP id h9S0hqA00384\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Mon, 27 Oct 2003 16:44:07 -0800\r\nX-Authentication-Warning: homeserver.archive.org: igor owned process doing -bs\r\nDate: Mon, 27 Oct 2003 16:43:47 -0800 (PST)\r\nTo: &lt;archive-crawler@yahoogroups.com&gt;\r\nSubject: Re: [archive-crawler] &quot;Garden&quot; Tests Wanted\r\nIn-Reply-To: &lt;3F9D73DB.4070004@...&gt;\r\nMessage-ID: &lt;Pine.LNX.4.33.0310271202120.12864-100000@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: TEXT/PLAIN; charset=US-ASCII\r\nFrom: Igor Ranitovic &lt;igor@...&gt;\r\nX-Yahoo-Group-Post: member; u=137477665\r\nX-Yahoo-Profile: iranitovic\r\n\r\nI will add the following tests:\n\n1. Parsing links between escaped quotes found in javascript.\nExample:\ndocument.write(&quot;&lt;a href=&#92;&quot;http://a.com/aPage.html&#92;&quot;&gt; test &lt;/a&gt;&lt;br&gt;&quot;);\n\nExpected result:\n\thttp://a.com/aPage.html\nshould be added to discovered URL list.\n\nHeritrix will not parse this link correctly.\nCurrent result:\n\thttp://a.com/aPage.html%5C \n\n(note: not reported as a bug. I will do that today)\n\n2. Add all onXXX events tests.\n\nHeritrix is currently parsing script values that are specified in all \nonXXX events.\nExample:\n&lt;a href=&quot;rollover.html&quot;  onmouseover=&quot;rollover(&#39;http://a.com/rollover.gif&#39;)&gt;\nExpected result:\nLink http://a.com/rollover.gif should be added to discovered URL list.\n\n\ni.\n\n\nOn Mon, 27 Oct 2003, Gordon Mohr wrote:\n  \n&gt; In our meeting Friday, we resolved to each create 3 new test\n&gt; cases for our crawler &quot;test garden&quot;. This is an expandable\n&gt; collection of web-server content against which any crawler&#39;s\n&gt; ability to retrieve certain documents, while avoiding others,\n&gt; can be tested. For now, the results are evaluated by\n&gt; postprocessing the crawler logs, though we may move to a system\n&gt; where the server uses its own logs to evaluate crawler\n&gt; behavior.\n&gt; \n&gt; By creating a batch of new standalone tests, we hope to...\n&gt; \n&gt;    (1) expand the number of available tests\n&gt;    (2) gain insight into the ease with which\n&gt;        new tests can be contributed\n&gt;    (3) probe any limitations of the expressiveness\n&gt;        of the current approach (are there things we\n&gt;        want to test, but cannot?)\n&gt;    (4) probe how well the approach scales as the\n&gt;        number/variety of tests grows\n&gt; \n&gt; For reference, Parker&#39;s original note about the garden\n&gt; setup and practices is appended below.\n&gt; \n&gt; So that we don&#39;t overlap, and as an example of the kinds\n&gt; of tests that would be useful, I intend my tests to be:\n&gt; \n&gt;   (1) Are absolute URIs extracted properly in\n&gt;       included (&quot;&lt;script src=&quot;) Javascript files?\n&gt; \n&gt;       Expected result: Heritrix does not yet parse\n&gt;       Javscript in standalone JS files -- only in HTML --\n&gt;       and so would fail this test right now. But the\n&gt;       our current best-effort search for URI-like\n&gt;       strings in Javascript code could easily be placed\n&gt;       in a new Javascript Extractor prtocessor, so\n&gt;       we expect Heritrix to pass this test soon.\n&gt; \n&gt;   (2) Are relative URIs extracted properly in\n&gt;       included (&quot;&lt;script src=&quot;) Javascript files?\n&gt; \n&gt;       Expected result: Need to do more research;\n&gt;       I&#39;m not sure if they should be interpreted\n&gt;       relative to the JS file URI or the page that\n&gt;       included it. As above, Heritrix would fail\n&gt;       currently but should pass soon.\n&gt; \n&gt;   (3) Are URIs that are created via concatenation\n&gt;       of Javascript string variables or string variables\n&gt;       and string literals extracted properly?\n&gt; \n&gt;       Expected result: No crawler I know of yet handles\n&gt;       this. Someday, perhaps.\n&gt; \n&gt; So as should be clear, these tests don&#39;t have to be\n&gt; things we believe current crawlers do (or must) achieve.\n&gt; Any open or closed bugs in our Sourceforge Bug Tracker\n&gt; might also be good candidates for new test cases.\n&gt; \n&gt; Anyone else following the Heritrix project is also\n&gt; welcome to submit tests in the appropriate form, or\n&gt; comments about what should be testable.\n&gt; \n&gt; I&#39;d like to integrate any new tests onto crawl08 by the\n&gt; end of this week.\n&gt; \n&gt; - Gordon\n&gt; \n&gt; \n&gt; ================================================================\n&gt; Parker Thompson (parkert@...) wrote:\n&gt;  &gt; Today I checked into cvs a new test garden that should make automated\n&gt;  &gt; testing a whole lot easier.  I&#39;ve attached a readme.txt that explains how\n&gt;  &gt; the tools work and what&#39;s available.  You should be able to check out this\n&gt;  &gt; code from anywhere and use it witout modification (tests will let you know\n&gt;  &gt; if/when this is not the case).\n&gt;  &gt;\n&gt;  &gt; To see it in action check out:\n&gt;  &gt;\n&gt;  &gt;   http://crawl08.archive.org/\n&gt;  &gt;\n&gt;  &gt; For a file manifest:\n&gt;  &gt;\n&gt;  &gt;   http://crawl08.archive.org/?links=1\n&gt;  &gt;\n&gt;  &gt; Note: You may run any/all of the reporting scripts locally (results.cgi\n&gt;  &gt; and testreport.pl) even if the garden is remote, though they fetch\n&gt;  &gt; configuration information real-time based on the log files being parsed,\n&gt;  &gt; so you will need an internet connection when evaluating test results.\n&gt;  &gt;\n&gt;  &gt; Let me know if you have any questions,\n&gt;  &gt;\n&gt;  &gt; pt.\n&gt;  &gt;\n&gt;  &gt;\n&gt;  &gt; ------------------------------------------------------------------------\n&gt;  &gt;\n&gt;  &gt; Heritrix Web-based Test Suite\n&gt;  &gt; -----------------------------\n&gt;  &gt;\n&gt;  &gt; I. Introduction\n&gt;  &gt;\n&gt;  &gt; The following is a description of the functionaly provided by the Heritrix\n&gt;  &gt; web-based test suite.  This suite is meant to be a set of &quot;unit tests&quot;,\n&gt;  &gt; that can exist individually or as part of &quot;test suites&quot;.\n&gt;  &gt;\n&gt;  &gt; II. Installing\n&gt;  &gt;\n&gt;  &gt; To install these tests, just put the directory which came with this file\n&gt;  &gt; somewhere in the apache document tree, so it&#39;s viewable from the web, make\n&gt;  &gt; sure the path to perl is correct in each cgi (default is /usr/bin/perl),\n&gt;  &gt; change it if it is not, make sure you can execute cgis (see httpd.conf),\n&gt;  &gt; make sure index.cgi is a valid index (see httpd.conf), and you should be\n&gt;  &gt; set.\n&gt;  &gt;\n&gt;  &gt; Addionally, if you want the infinite breadth test to work you must make\n&gt;  &gt; sure the host on which these tests reside has a dns entry in the form of:\n&gt;  &gt;\n&gt;  &gt;   *.host.org\n&gt;  &gt;\n&gt;  &gt; so that infinite-content.cgi can create arbitrarily-named aliases.\n&gt;  &gt;\n&gt;  &gt; II. Running All Test\n&gt;  &gt;\n&gt;  &gt; To run all tests just point the crawler at the test directory.  It will be\n&gt;  &gt; presented with links to each test.\n&gt;  &gt;\n&gt;  &gt; III. Single Tests\n&gt;  &gt;\n&gt;  &gt; To run a single test, or test suite, point the crawler at the test\n&gt;  &gt; directory with the argument &#39;?test=name&#39; where name is the directory name\n&gt;  &gt; of the test or suite.  By convention this is &#39;testX&#39; where X is the test\n&gt;  &gt; number (e.g. http://test.archive.org/?test=test23).\n&gt;  &gt;\n&gt;  &gt; This will display a page with links to only the test specified, and any\n&gt;  &gt; tests on which the specified test is dependent.\n&gt;  &gt;\n&gt;  &gt; IV. Test Suites\n&gt;  &gt;\n&gt;  &gt; Test suites are simply tests that contain dependencies that are themselves\n&gt;  &gt; tests.  This terminology is just used to make it easier with people\n&gt;  &gt; already familiar with unit testing in other contexts.  To execute a single\n&gt;  &gt; test suite see the directions above for &#39;Single Tests&#39;.\n&gt;  &gt;\n&gt;  &gt; V. Viewing Results\n&gt;  &gt;\n&gt;  &gt; When you run the crawler several log files are created.  These contain\n&gt;  &gt; information about what pages were visited by the crawler.  You will want\n&gt;  &gt; to locate the file &#39;uri-processing.log&#39; in your ouput directory, which\n&gt;  &gt; will be used to determine what succeded and what failed.\n&gt;  &gt;\n&gt;  &gt; Once you have located this file you have two ways to view the results.\n&gt;  &gt;\n&gt;  &gt; A. Web-based Interface\n&gt;  &gt;\n&gt;  &gt; Included in this package is a script called &#39;report.cgi&#39; that will allow\n&gt;  &gt; you to upload a log file, which it will then parse, reporting on the tests\n&gt;  &gt; seen during your crawl.\n&gt;  &gt;\n&gt;  &gt; This should be most convienent when your garden is on a remote host and\n&gt;  &gt; you don&#39;t want to move log files around manually, or can&#39;t run the\n&gt;  &gt; command-line tool locally.\n&gt;  &gt;\n&gt;  &gt; B. Command-line Interface\n&gt;  &gt;\n&gt;  &gt; There is also a command-line tool that can be used to parse uri-processing\n&gt;  &gt; logs.  This tool is located in the root garden directory (where this\n&gt;  &gt; readme is) and is called &#39;testreport.pl&#39;.  It can be used to generate\n&gt;  &gt; reports similar to those produced by the web-based interface, which can\n&gt;  &gt; either be dumped to standard out, or emailed to a recipient list.\n&gt;  &gt;\n&gt;  &gt; Usage is as follows:\n&gt;  &gt;\n&gt;  &gt;   testreport.pl [-mail &lt;mailto list comma-delimited&gt;] &lt;heritrix log file&gt;\n&gt;  &gt;\n&gt;  &gt; Examples:\n&gt;  &gt;   ./testreport.pl uri-processing.log\n&gt;  &gt;   ./testreport.pl -mail a@...,b@... uri-processing.log\n&gt;  &gt;\n&gt;  &gt; VI. Test Configuration Files\n&gt;  &gt;\n&gt;  &gt; Tests are simply collections of files to be crawled, and a configuration\n&gt;  &gt; file that can e used to evaluate the results.  Tests have the following\n&gt;  &gt; properties:\n&gt;  &gt;\n&gt;  &gt; - The top-level test directory must be placed in the garden&#39;s root.\n&gt;  &gt;\n&gt;  &gt; - All files required by a test are contained within the tests&#39; directory\n&gt;  &gt; tree (though this tree may be arbitrarily complex).\n&gt;  &gt;\n&gt;  &gt; - The top-level directory must be named testXXX where XXX is a positive\n&gt;  &gt; integer and is unique within the garden.\n&gt;  &gt;\n&gt;  &gt; - The top-level test directory must contain a file called test.conf that\n&gt;  &gt; defines the tests&#39; properties.\n&gt;  &gt;\n&gt;  &gt; Test configuration files are defined using a simple key:value pair syntax.\n&gt;  &gt; Valid tags are:\n&gt;  &gt;\n&gt;  &gt; name - human readable name for the test\n&gt;  &gt; find - require a uri be found.\n&gt;  &gt; omit - require a uri be omitted.\n&gt;  &gt; test - require another test as a prerequisite.\n&gt;  &gt; info - a comment to be presented in the report.\n&gt;  &gt;\n&gt;  &gt; All URIs within the configuration file, including tests, are specified as\n&gt;  &gt; relative paths.\n&gt;  &gt;\n&gt;  &gt; A. Best Practices for Defining Tests\n&gt;  &gt;\n&gt;  &gt; While the &#39;name&#39; tag may contain any human readable string, it is\n&gt;  &gt; considered a best practice to prefix the test name with &#39;Test X&#39;, and use\n&gt;  &gt; a descriptive name.\n&gt;  &gt;\n&gt;  &gt; B. Example Configuration File\n&gt;  &gt;\n&gt;  &gt; name: Test 101\n&gt;  &gt; find: subdirectory/hardtofindlink.html\n&gt;  &gt; find: anothersub/sneakylink.html\n&gt;  &gt; omit: excluded/by/robots/page.html\n&gt;  &gt; omit: commented/out/link/page.html\n&gt;  &gt; test: ../test5\n&gt;  &gt; test: ../test46\n&gt;  &gt; test: ../test99\n&gt;  &gt; info: Note: Make sure you copied test101/robots.txt to your document root.\n&gt;  &gt;\n&gt;  &gt; VII. Special Arguments to Test Index (advanced)\n&gt;  &gt;\n&gt;  &gt; A. Generating Infinite Content\n&gt;  &gt;\n&gt;  &gt; If you wish to do crawler performance testing you may use the test index\n&gt;  &gt; to generate an infinite (more or less) amount of content by calling\n&gt;  &gt; index.cgi with the argument &#39;infinite=1&#39;, as in:\n&gt;  &gt;\n&gt;  &gt;   http://host.org/path/to/test/index/?infinite=1\n&gt;  &gt;\n&gt;  &gt; This will generate the appropriate links.\n&gt;  &gt;\n&gt;  &gt; Note:  To have this work the host &#39;host&#39; must have a dns entry that\n&gt;  &gt; resolves *.host.org to the host on which the files live, and apache must\n&gt;  &gt; be set up with the appropriate VirtualHost entries.\n&gt;  &gt;\n&gt;  &gt; B. Show Links to Test Requirements/Exclusions\n&gt;  &gt;\n&gt;  &gt; In general you will not want the test index to provide hyperlinks to a\n&gt;  &gt; test&#39;s requirements/omissions, since the crawler should be forced to\n&gt;  &gt; &quot;discover them&quot;.  However, if you&#39;d like to view an index with all URIs\n&gt;  &gt; hyperlinked for ease of browsing, you may pass the test index the argument\n&gt;  &gt; &#39;links=1&#39; as in:\n&gt;  &gt;\n&gt;  &gt;   http://host.org/path/to/test/index/?links=1\n&gt;  &gt;\n&gt;  &gt;\n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; \n&gt; To unsubscribe from this group, send an email to:\n&gt; archive-crawler-unsubscribe@yahoogroups.com\n&gt; \n&gt;  \n&gt; \n&gt; Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ \n&gt; \n&gt; \n\n\n\n\n\n"}}