{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"CLQXUzvBcfNBzmr129sAYgavQy3v6qy56Zbg18WZkdT6YL3yBfxDadt4cwmshTdWzvNhAQQkj1-x8Y-TEqxMh1ZesBVq-PM","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: [archive-crawler] Re: Heritrix traffic pattern over time","postDate":"1265881613","msgId":6381,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRCNzNEMjBELjYwMzA0MDJAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDQ5Qjg0MEE3LTI3MUQtNDdDMS04NkMwLTIxMzEyQkQ2MUI2QkBnbWFpbC5jb20+","referencesHeader":"PDRCNjkyNjRFLjYwODA5MDJAYXJjaGl2ZS5vcmc+IDxBQTg2QkVCNC0xMzNCLTQ1OTItQjc2Ri02QzQxQTVGNzNDODhAZ21haWwuY29tPiA8NEI2OUM2OTMuNDA4MDUwM0BhcmNoaXZlLm9yZz4gPEIyNTJEMUMyLUExQUItNEZENi04QjVBLTE0RDJGMEIzMjk2MkBnbWFpbC5jb20+IDw0QjZBMTNCNS40MDUwMjAyQGFyY2hpdmUub3JnPiA8NDJEMkZDQ0EtQkQwOS00RTMwLUEwRUMtQzgyMDNGMUY4MzYyQGdtYWlsLmNvbT4gPDRCNkIyMjZBLjcwNzA0MDhAYXJjaGl2ZS5vcmc+IDw5OTRDNzAyNi03NDJBLTQ5MjktQTZBNS1BOEZGMDI2QTgwQzFAZ21haWwuY29tPiA8NEI2QjZGMTYuMjA1MDcwMEBhcmNoaXZlLm9yZz4gPDQ5Qjg0MEE3LTI3MUQtNDdDMS04NkMwLTIxMzEyQkQ2MUI2QkBnbWFpbC5jb20+"},"prevInTopic":6374,"nextInTopic":0,"prevInTime":6380,"nextInTime":6382,"topicId":6359,"numMessagesInTopic":10,"msgSnippet":"... While OpenJDK 1.6 should work, I always recommend the Sun JDK, because: (1) It s also free to use. (2) OpenJDK has a bit of an odd derivation -- it s a","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nX-Received: (qmail 72755 invoked from network); 11 Feb 2010 09:46:56 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m10.grp.re1.yahoo.com with QMQP; 11 Feb 2010 09:46:56 -0000\r\nX-Received: from unknown (HELO relay03.pair.com) (209.68.5.17)\n  by mta1.grp.sp2.yahoo.com with SMTP; 11 Feb 2010 09:46:56 -0000\r\nX-Received: (qmail 96533 invoked from network); 11 Feb 2010 09:46:54 -0000\r\nX-Received: from 70.137.148.203 (HELO ?192.168.23.128?) (70.137.148.203)\n  by relay03.pair.com with SMTP; 11 Feb 2010 09:46:54 -0000\r\nX-pair-Authenticated: 70.137.148.203\r\nMessage-ID: &lt;4B73D20D.6030402@...&gt;\r\nDate: Thu, 11 Feb 2010 01:46:53 -0800\r\nUser-Agent: Thunderbird 2.0.0.23 (Windows/20090812)\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;4B69264E.6080902@...&gt; &lt;AA86BEB4-133B-4592-B76F-6C41A5F73C88@...&gt; &lt;4B69C693.4080503@...&gt; &lt;B252D1C2-A1AB-4FD6-8B5A-14D2F0B32962@...&gt; &lt;4B6A13B5.4050202@...&gt; &lt;42D2FCCA-BD09-4E30-A0EC-C8203F1F8362@...&gt; &lt;4B6B226A.7070408@...&gt; &lt;994C7026-742A-4929-A6A5-A8FF026A80C1@...&gt; &lt;4B6B6F16.2050700@...&gt; &lt;49B840A7-271D-47C1-86C0-21312BD61B6B@...&gt;\r\nIn-Reply-To: &lt;49B840A7-271D-47C1-86C0-21312BD61B6B@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\nSubject: Re: [archive-crawler] Re: Heritrix traffic pattern over time\r\nX-Yahoo-Group-Post: member; u=137285340; y=N0yVLQHqWlFs3DQH12LTHk7k3nzGZyqfIDPWwBBrzKqT\r\nX-Yahoo-Profile: gojomo\r\n\r\nDerek Pappas wrote:\n&gt; $ uname -a\n&gt; Linux 2.6.18-92.1.22.el5 #1 SMP Tue Dec 16 11:57:43 EST 2008 x86_64 \n&gt; x86_64 x86_64 GNU/Linux\n&gt; \n&gt; $ java -version\n&gt; java version &quot;1.6.0&quot;\n&gt; OpenJDK  Runtime Environment (build 1.6.0-b09)\n&gt; OpenJDK 64-Bit Server VM (build 1.6.0-b09, mixed mode)\n\nWhile OpenJDK 1.6 should work, I always recommend the Sun JDK, because:\n\n(1) It&#39;s also free to use.\n(2) OpenJDK has a bit of an odd derivation -- it&#39;s a backport from a \nearly version of Sun&#39;s 1.7 JDK, made to pass the 1.6 compatibility \ntests. Thus it doesn&#39;t exactly follow either Sun JDK6 or Sun/OpenJDK7 -- \nit&#39;s on its own little evolutionary branch. (See the chart at \n&lt;http://openjdk.java.net/projects/jdk6/&gt;.)\n(3) The Sun JDKs seem to get more official testing by Sun, and fixes first.\n\n(There are supposedly performance improvements in early-access JDK7 \nreleases, but JDK6 is still our testing/production platform.)\n\n&gt; Heritrix version 1.14.3\n&gt; \n&gt; \n&gt; On our target sites, each fetched URI averages 50KB or more.\n&gt; \n&gt; 20Mbps / 50KB = 50-per-second\n&gt; \n&gt; On the 5 machines we are seeing a total of ~12-per-second\n\nOK, then bandwidth isn&#39;t the issue at the moment -- unless some of the \ncrawlers have hit a temporary patch of much larger (multi-MB?) resources.\n\nAddressing the other possible issues -- swapping, queues to unresponsive \nhosts, disk contention -- may reach a URI throughput that saturates the \nnet link.\n\n&gt;&gt; - ensure the target disk for queues/uriUniqFilter (where the job&#39;s\n&gt;&gt; &#39;state&#39; directory lives) isn&#39;t slow or overbusy with other IO (including\n&gt;&gt; swapping or other log-writing). Our production crawls almost always\n&gt;&gt; target &#39;state&#39; to a dedicated disk, different than where logging and\n&gt;&gt; content-writing occurs.\n&gt;&gt;\n&gt; \n&gt; That makes sense.\n&gt; \n&gt; \n&gt; I do not see the filter options in\n&gt; -Modules\n&gt; -Submodules\n&gt; -Settings\n&gt; \n&gt; Which screen(s) is this on?\n\nSettings, after hitting the &#39;View expert settings&#39; toggle.\n\nThe &#39;state&#39; directory path can be set under &#39;crawl-order&#39;, a setting \ncalled &#39;state-path&#39;. The path is relative to the job directory, or (if \nit begins with &#39;/&#39;) an absolute path.\n\nThe choice of UriUniqFilter is a multi-select setting under frontier, \ncalled &#39;uri-included-structure&#39;. There is more discussion about the \ntradeoffs of using the BloomUriUniqFilter in previous list discussion.\n\nSome key points are:\n\n- the default Bloom settings use ~500MB RAM, and has a 1-in-4-million \nfalse positive rate through the first 125 million URIs discovered. \n(Tuning these settings in H1 requires setting java system properties.)\n\n- because that&#39;s now taking so much of the heap, and the \nBdbUriUniqFilter is no longer using the BerkeleyDB environment&#39;s cache, \nthe &#39;bdb-cache-percentage&#39; should be set to non-default, lower value (or \nelse the cache + bloom will use almsot all the heap). 25-40% rather than \nthe default 60% is typical (depending on heap size).\n\n&gt; \n&gt;&gt; - replace BdbUriUniqFilter with the purely-in-memory BloomUriUniqFilter,\n&gt;&gt; presuming you have enough memory, your crawl is expected to grow into\n&gt;&gt; the 10&#39;s to 100&#39;s of millions of URIs, and understand the implications\n&gt;&gt; (like a small false-positive rate where the crawler will skip URIs\n&gt;&gt; thinking they&#39;ve already been queued when they haven&#39;t).\n\n\n- Gordon @ IA\n\n"}}