{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":171907534,"authorName":"James Casey","from":"James Casey &lt;me@...&gt;","profile":"awol_design","replyTo":"LIST","senderId":"tD0w7igGulgaLS46BvIz1x3DE0cP27ZR3VsDW8mHH4cBvLicxL-3tkizU3uD57OjikzYM0tarvxewS8_w7XjLM8s","spamInfo":{"isSpam":false,"reason":"0"},"subject":"bug in AbstractLongFPSet","postDate":"1074696870","msgId":250,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQwMEU5MkE2LjQwMjAzMDFAamFtZXNjLm5ldD4="},"prevInTopic":0,"nextInTopic":254,"prevInTime":249,"nextInTime":251,"topicId":250,"numMessagesInTopic":3,"msgSnippet":"Hi guys, While writing tests, I ve encountered a nasty bug in AbstractLongFPSet and subclasses. The test code is as follows (using a MemLongFPSet for example) ","rawEmail":"Return-Path: &lt;me@...&gt;\r\nX-Sender: me@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 12812 invoked from network); 21 Jan 2004 14:58:13 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m15.grp.scd.yahoo.com with QMQP; 21 Jan 2004 14:58:13 -0000\r\nReceived: from unknown (HELO smtp3.cern.ch) (137.138.131.164)\n  by mta2.grp.scd.yahoo.com with SMTP; 21 Jan 2004 14:58:13 -0000\r\nReceived: from jamesc.net (pb-d-128-141-47-136.cern.ch [128.141.47.136])\n\tby smtp3.cern.ch (8.12.1-20030924/8.12.1) with ESMTP id i0LEsTYM014971\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Wed, 21 Jan 2004 15:54:29 +0100 (MET)\r\nX-Authentication-Warning: smtp3.cern.ch: Host pb-d-128-141-47-136.cern.ch [128.141.47.136] claimed to be jamesc.net\r\nMessage-ID: &lt;400E92A6.4020301@...&gt;\r\nDate: Wed, 21 Jan 2004 15:54:30 +0100\r\nOrganization: jamesc.net\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.4) Gecko/20030703\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 137.138.131.164\r\nFrom: James Casey &lt;me@...&gt;\r\nSubject: bug in AbstractLongFPSet\r\nX-Yahoo-Group-Post: member; u=171907534\r\nX-Yahoo-Profile: awol_design\r\n\r\nHi guys,\n\nWhile writing tests, I&#39;ve encountered a nasty bug in AbstractLongFPSet \nand subclasses.\n\nThe test code is as follows (using a MemLongFPSet for example)\n\n     public void testCount() {\n\tLongFPSet fpSet = new MemLongFPSet();\n         final int NUM = 1000;\n         assertEquals(&quot;empty set to start&quot;, 0, fpSet.count());\n\n         for(int i = 1; i &lt; NUM; ++i) {\n             fpSet.add((long)i);\n             assertEquals(&quot;correct num&quot;, i, fpSet.count());\n         }\n         for (int i = NUM - 1; i &gt; 0; --i) {\n             fpSet.remove((long) i);\n             assertEquals(&quot;correct num&quot;, i -1, fpSet.count());\n         }\n         assertEquals(&quot;empty set to start&quot;, 0, fpSet.count());\n\n     }\n\nYou&#39;ll get something like:\n\n     [junit]     FAILED\n     [junit] correct num expected:&lt;769&gt; but was:&lt;768&gt;\n     [junit] junit.framework.AssertionFailedError: correct num \nexpected:&lt;769&gt; but was:&lt;768&gt;\n     [junit]     at \norg.archive.util.LongFPSetTestCase.testCount(LongFPSetTestCase.java:124)\n     [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native \nMethod)\n     [junit]     at \nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n     [junit]     at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\n\nWhat happens is that when we fill up to the load factor (75% of 1024 = \n768) it tries to grow the space.  This works, but the count goes out of \nsync by one.  This is for the following reason.\n\nin  AbstractLongFPSet.add(long), we increment the count to check if we \nneed to grow.  If so then we do a makeSpace.\n\nMemLongFPSet.makeSpace() resets count to 0, and does the adds again, \nwhich increments count by the number of entries in the db\n\nthen the AbstractLongFPSet.add(long) finishes by doing a setAt(index, \nval) to set the new value.\n\nBut note, this means that the count is now actually one less than it \nshould be.\n\nI tried some quick fixes (such as adding a count++ after the makeSpace), \nbut this breaks other implementations such as LongFPSetCache, which \ndeletes an element, so the count stays the same.\n\nI think the main problem is that the subclasses are allowed to freely \nmodify the count, which belongs to the superclass, and the superclass \nassumes that it is the only thing modifying it, which is leading to \nsubtle errors.\n\nI could look at a solution to this, but it might turn out to be quite \nintrusive (a lot of code change to move things up and down between the \nsuper- and sub-classes).  Is there someone who knows the code better and \nmight be able to find a solution, or should I prototype the changes?\n\ncheers,\n\njames.\n\n\n\n"}}