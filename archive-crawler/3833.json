{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":168599281,"authorName":"Michael Stack","from":"Michael Stack &lt;stack@...&gt;","profile":"stackarchiveorg","replyTo":"LIST","senderId":"uDJMBfcQx2hqajZqfbRsWSlu00T5VeOIxjxsOrsxnpTBos9qpe58Uh73tjnI1Ep4K0ryGkEKpLP3YgmfGH-3x9tJz65AlWlA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] How can read method of ArcRecord perform faster","postDate":"1172163809","msgId":3833,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ1RERDQ0UxLjMwOTA2MDhAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDJhMTljNzlmMDcwMjIxMjA0NHEyYzBmZDYzYXAyOWVjNjU0NzY5ZDI0YzI1QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDJhMTljNzlmMDcwMjIxMDU0M3M0ZjAyMWFhMWwzZjA2ODE5YWM4MTIyNjlhQG1haWwuZ21haWwuY29tPgkgPDQ1REM2NzhFLjEwNDA1MDlAZHVib2NlLm5ldD4gPDJhMTljNzlmMDcwMjIxMjA0NHEyYzBmZDYzYXAyOWVjNjU0NzY5ZDI0YzI1QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":3832,"nextInTopic":3838,"prevInTime":3832,"nextInTime":3834,"topicId":3829,"numMessagesInTopic":5,"msgSnippet":"Try somthing like this: ArcReader arc = ARCReaderFactory.get(arcfile); final int BUFFERSIZE = 4096; byte [] b = new byte[BUFFERSIZE]; for(final Iterator i =","rawEmail":"Return-Path: &lt;stack@...&gt;\r\nX-Sender: stack@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 89258 invoked from network); 22 Feb 2007 17:01:40 -0000\r\nReceived: from unknown (66.218.66.72)\n  by m41.grp.scd.yahoo.com with QMQP; 22 Feb 2007 17:01:40 -0000\r\nReceived: from unknown (HELO dns.duboce.net) (63.203.238.116)\n  by mta14.grp.scd.yahoo.com with SMTP; 22 Feb 2007 17:01:40 -0000\r\nReceived: by dns.duboce.net (Postfix, from userid 1008)\n\tid 66F93C51D; Thu, 22 Feb 2007 07:39:52 -0800 (PST)\r\nX-Spam-Checker-Version: SpamAssassin 3.1.4 (2006-07-26) on dns.duboce.net\r\nX-Spam-Level: \r\nX-Spam-Status: No, score=-3.1 required=5.0 tests=ALL_TRUSTED,AWL,BAYES_00,\n\tHTML_MESSAGE,HTML_TINY_FONT autolearn=ham version=3.1.4\r\nReceived: from [192.168.1.107] (debord.duboce.net [192.168.1.107])\n\tby dns.duboce.net (Postfix) with ESMTP id 45245C3F2;\n\tThu, 22 Feb 2007 07:39:42 -0800 (PST)\r\nMessage-ID: &lt;45DDCCE1.3090608@...&gt;\r\nDate: Thu, 22 Feb 2007 09:03:29 -0800\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.2pre) Gecko/20070111 SeaMonkey/1.1\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;2a19c79f0702210543s4f021aa1l3f06819ac812269a@...&gt;\t &lt;45DC678E.1040509@...&gt; &lt;2a19c79f0702212044q2c0fd63ap29ec654769d24c25@...&gt;\r\nIn-Reply-To: &lt;2a19c79f0702212044q2c0fd63ap29ec654769d24c25@...&gt;\r\nContent-Type: multipart/alternative;\n boundary=&quot;------------040909080607090107040403&quot;\r\nX-eGroups-Msg-Info: 1:0:0:0\r\nFrom: Michael Stack &lt;stack@...&gt;\r\nSubject: Re: [archive-crawler] How can read method of ArcRecord perform faster\r\nX-Yahoo-Group-Post: member; u=168599281; y=ysDaj5EKwTvz9p3NfL2BGT61EtcGHMQSut9b8idvIudJUCuYwE6Rq_as\r\nX-Yahoo-Profile: stackarchiveorg\r\n\r\n\r\n--------------040909080607090107040403\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\n\r\nTry somthing like this:\n\nArcReader arc = ARCReaderFactory.get(arcfile);\nfinal int BUFFERSIZE = 4096;\nbyte [] b = new byte[BUFFERSIZE];\nfor(final Iterator i = arc.iterator(); i.hasNext();)\n{\n    ARCReader r = (ARCRecord)i.next();\n    r.skipHttpHeader();\n    ByteArrayOutputStream baos = new \nByteArrayOutputStream(r.getMetaData().getLength());\n    for(int read; (read = r.read(b, 0, BUFFERSIZE)) != -1;) {\n        baos.write(b, 0, read);\n    }\n}\n\n+ The above preallocates a buffer of size 4096 bytes and reuses it for \neach read.  In your code, you allocate it per read.  Above allocates an \narray of &#39;byte&#39;, not &#39;Byte&#39;.  The former is a primitive type as opposed \nto the latter, a class, and likely more expensive to construct.\n+ &#39;r.available()&#39; is not good as a source for how many bytes to read.  \nIts best used as a binary test of whether or not there bytes available.  \nBetter to read until you get a -1.\n+ When you create the BAOS, you are again using available.  Since this \nis going to return a length that is a good deal shorter than the actual \nrecord length, your BAOS is going to be spending lots of wasted time \ncopying buffers trying to expand its size accommodating new appends (The \nlength is available in the ARCRecord metadata).\n\nGood luck,\nSt.Ack\n\n\nsajid khan wrote:\n&gt;\n&gt; Hi Stack,\n&gt;       Thank you for the instant reply. I have used &#39;read(byte[] b, int \n&gt; offset, int length)&#39; also like\n&gt;\n&gt; //arcfile --- The path of the arc file.\n&gt;  ArcReader arc = ARCReaderFactory.get(arcfile);\n&gt;  Iterator iter = arc.iterator();\n&gt;  while(iter.hasNext())\n&gt;  {\n&gt;       ARCRecord r = (ARCRecord) iter.next();\n&gt;       ByteArrayOutputStream baos = new ByteArrayOutputStream( \n&gt; r.available());\n&gt;       r.skipHttpHeader();\n&gt;       sizeOfArcRecord = r.available();\n&gt;       Byte[] b = new Byte[sizeOfArcRecord];\n&gt;       r.read(b, 0, sizeOfArcRecord );\n&gt;       baos.write(b, 0, sizeOfArcRecord);\n&gt;\n&gt;       //Doing somthing with baos.\n&gt; }\n&gt;\n&gt; Here the problem is when I am going with the above way, not getting \n&gt; the whole number of bytes that I am getting by simple r.read() method \n&gt; in a loop. ie. somhow it is reading less amount of data from the arc \n&gt; file. I think as it is reading less amount of data, so it is taking \n&gt; less amount of time, otherwise I am going somewhere wrong in the code.\n&gt;\n&gt; Can you please help me to come out this problem.\n&gt;\n&gt; Thanks and regards\n&gt; Sajid Khan\n&gt;\n&gt; On 2/21/07, *Michael Stack* &lt; stack@... \n&gt; &lt;mailto:stack@...&gt;&gt; wrote:\n&gt;\n&gt;     Currently, you are reading a byte at a time.  You should use\n&gt;     &#39;read(byte[] b, int offset, int length)&#39; (even though its using\n&gt;     read() at its core).  If you did the same on a FileInputStream, I\n&gt;     believe you would experience the same phenomenon.\n&gt;     St.Ack\n&gt;\n&gt;\n&gt;\n&gt;\n&gt;     sajid khan wrote:\n&gt;&gt;\n&gt;&gt;     Hi,\n&gt;&gt;         My program reads arc files and processes its contents. I\n&gt;&gt;     noticed that bulk of the time is spent in reading the arc file\n&gt;&gt;     rather than processing the data.\n&gt;&gt;     I am reading the arc files using ArcRecord&#39;s read() method. The\n&gt;&gt;     code looks like this,\n&gt;&gt;\n&gt;&gt;     //arcfile --- The path of the arc file.\n&gt;&gt;      ArcReader arc = ARCReaderFactory.get(arcfile);\n&gt;&gt;      Iterator iter = arc.iterator();\n&gt;&gt;      while(iter.hasNext())\n&gt;&gt;      {\n&gt;&gt;           ARCRecord r = (ARCRecord) iter.next();\n&gt;&gt;           ByteArrayOutputStream baos = new ByteArrayOutputStream(\n&gt;&gt;     r.available());\n&gt;&gt;           r.skipHttpHeader();\n&gt;&gt;           sizeOfArcRecord = r.available();\n&gt;&gt;          \n&gt;&gt;           //this while loop consumes lot of time\n&gt;&gt;           while (sizeOfArcRecord-- &gt; 0)\n&gt;&gt;           {\n&gt;&gt;                             baos.write(r.read());\n&gt;&gt;           }\n&gt;&gt;           //Doing somthing with baos.\n&gt;&gt;     }\n&gt;&gt;\n&gt;&gt;     On analyzing the time spent on each section of the code, I\n&gt;&gt;     noticed that the inner loop in the above code takes more time\n&gt;&gt;     than I had expected. For processing 40MB arc file it(the inner\n&gt;&gt;     loop) is taking nearly 1 min 30 second in my machine(512MB RAM,\n&gt;&gt;     2.6GHz processor). I thought the following function may help by\n&gt;&gt;     reading several bytes in one attempt, but it is also internally\n&gt;&gt;     calling the read() funtion of ArcRecord\n&gt;&gt;                 read(byte[] b, int offset, int length) of ArcRecord.\n&gt;&gt;\n&gt;&gt;     Can anybody please help me.\n&gt;&gt;\n&gt;&gt;     Thanks and regards\n&gt;&gt;     Sajid Khan\n&gt;&gt;     |\n&gt;&gt;     |\n&gt;&gt;\n&gt;\n&gt;\n&gt;  \n\n\r\n--------------040909080607090107040403\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta content=&quot;text/html;charset=ISO-8859-1&quot; http-equiv=&quot;Content-Type&quot;&gt;\n&lt;/head&gt;\n&lt;body bgcolor=&quot;#ffffff&quot; text=&quot;#000000&quot;&gt;\nTry somthing like this:&lt;br&gt;\n&lt;br&gt;\n&lt;span class=&quot;e&quot; id=&quot;q_110e4f94de6b597d_1&quot;&gt;ArcReader arc =\nARCReaderFactory.&lt;wbr&gt;get(arcfile)&lt;wbr&gt;;&lt;/span&gt;&lt;br&gt;\nfinal int BUFFERSIZE = 4096;&lt;br&gt;\nbyte [] b = new byte[BUFFERSIZE];&lt;br&gt;\nfor(final Iterator i = arc.iterator(); i.hasNext();)&lt;br&gt;\n{&lt;br&gt;\n&nbsp;&nbsp;&nbsp; ARCReader r = (ARCRecord)i.next();&lt;br&gt;\n&nbsp;&nbsp;&nbsp; r.skipHttpHeader();&lt;br&gt;\n&nbsp; &nbsp; ByteArrayOutputStream baos = new\nByteArrayOutputStream(r.getMetaData().getLength());&lt;br&gt;\n&nbsp;&nbsp;&nbsp; for(int read; (read = r.read(b, 0, BUFFERSIZE)) != -1;) {&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; baos.write(b, 0, read);&lt;br&gt;\n&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n}&lt;br&gt;\n&lt;br&gt;\n+ The above preallocates a buffer of size 4096 bytes and reuses it for\neach read.&nbsp; In your code, you allocate it per read.&nbsp; Above allocates an\narray of &#39;byte&#39;, not &#39;Byte&#39;.&nbsp; The former is a primitive type as opposed\nto the latter, a class, and likely more expensive to construct.&lt;br&gt;\n+ &#39;r.available()&#39; is not good as a source for how many bytes to read.&nbsp;\nIts best used as a binary test of whether or not there bytes\navailable.&nbsp; Better to read until you get a -1.&lt;br&gt;\n+ When you create the BAOS, you are again using available.&nbsp; Since this\nis going to return a length that is a good deal shorter than the actual\nrecord length, your BAOS is going to be spending lots of wasted time\ncopying buffers trying to expand its size accommodating new appends\n(The length is available in the ARCRecord metadata).&lt;br&gt;\n&lt;br&gt;\nGood luck,&lt;br&gt;\nSt.Ack&lt;br&gt;\n&lt;br&gt;\n&lt;br&gt;\nsajid khan wrote:\n&lt;blockquote\n cite=&quot;mid:2a19c79f0702212044q2c0fd63ap29ec654769d24c25@...&quot;\n type=&quot;cite&quot;&gt;&lt;!-- Network content --&gt;\n\n  &lt;div id=&quot;ygrp-text&quot;&gt;\n  &lt;p&gt;Hi Stack,&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thank you for the instant reply. I have used &#39;read(byte[] b, int\noffset, int length)&#39; also like&lt;br&gt;\n  &lt;br&gt;\n  &lt;span class=&quot;e&quot; id=&quot;q_110e4f94de6b597d_1&quot;&gt;//arcfile --- The path of\nthe arc file.&lt;br&gt;\n&nbsp;ArcReader arc = ARCReaderFactory.&lt;wbr&gt;get(arcfile)&lt;wbr&gt;;&lt;br&gt;\n&nbsp;Iterator iter = arc.iterator(&lt;wbr&gt;);&lt;br&gt;\n&nbsp;while(iter.hasNext(&lt;wbr&gt;))&lt;br&gt;\n&nbsp;{&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ARCRecord r = (ARCRecord) iter.next();&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByteArrayOutputStre&lt;wbr&gt;am baos = new ByteArrayOutputStre&lt;wbr&gt;am(\nr.available(&lt;wbr&gt;));&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.skipHttpHeader(&lt;wbr&gt;);&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeOfArcRecord = r.available(&lt;wbr&gt;);&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Byte[] b = new Byte[&lt;/span&gt;&lt;span class=&quot;e&quot;\n id=&quot;q_110e4f94de6b597d_1&quot;&gt;sizeOfArcRecord&lt;/span&gt;&lt;span class=&quot;e&quot;\n id=&quot;q_110e4f94de6b597d_1&quot;&gt;];&lt;br&gt;\n&nbsp;&nbsp;&nbsp; &nbsp; r.read(b, 0, &lt;/span&gt;&lt;span class=&quot;e&quot; id=&quot;q_110e4f94de6b597d_1&quot;&gt;sizeOfArcRecord\n  &lt;/span&gt;&lt;span class=&quot;e&quot; id=&quot;q_110e4f94de6b597d_1&quot;&gt;);&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; baos.write(b, 0, &lt;/span&gt;&lt;span class=&quot;e&quot; id=&quot;q_110e4f94de6b597d_1&quot;&gt;sizeOfArcRecord&lt;/span&gt;&lt;span\n class=&quot;e&quot; id=&quot;q_110e4f94de6b597d_1&quot;&gt;);&lt;br&gt;\n  &lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Doing somthing with baos.&lt;br&gt;\n}&lt;/span&gt;&lt;br&gt;\n  &lt;br&gt;\nHere the problem is when I am going with the above way, not getting the\nwhole number of bytes that I am getting by simple r.read() method in a\nloop. ie. somhow it is reading less amount of data from the arc file. I\nthink as it is reading less amount of data, so it is taking less amount\nof time, otherwise I am going somewhere wrong in the code.\n  &lt;br&gt;\n  &lt;br&gt;\nCan you please help me to come out this problem.&lt;br&gt;\n  &lt;br&gt;\nThanks and regards&lt;br&gt;\nSajid Khan&lt;br&gt;\n  &lt;br&gt;\n  &lt;/p&gt;\n  &lt;div&gt;&lt;span class=&quot;gmail_quote&quot;&gt;On 2/21/07, &lt;b\n class=&quot;gmail_sendername&quot;&gt;Michael Stack&lt;/b&gt; &lt;&lt;a\n moz-do-not-send=&quot;true&quot; href=&quot;mailto:stack@...&quot;&gt;\nstack@duboce.&lt;wbr&gt;net&lt;/a&gt;&gt; wrote:&lt;/span&gt;\n  &lt;blockquote class=&quot;gmail_quote&quot;\n style=&quot;border-left: 1px solid rgb(204, 204, 204);&quot;&gt;\n    &lt;div style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;\n    &lt;div&gt;\n    &lt;div&gt;\n    &lt;div&gt;\n    &lt;p&gt;Currently, you are reading a byte at a time.&nbsp; You should use\n&#39;read(byte[] b, int offset, int length)&#39; (even though its using read()\nat its core).&nbsp; If you did the same on a FileInputStream, I believe you\nwould experience the same phenomenon.&lt;br&gt;\nSt.Ack&lt;/p&gt;\n    &lt;div&gt;&lt;span class=&quot;e&quot; id=&quot;q_110e4f94de6b597d_1&quot;&gt;&lt;br&gt;\n    &lt;br&gt;\n    &lt;br&gt;\nsajid khan wrote:\n    &lt;blockquote type=&quot;cite&quot;&gt;\n      &lt;div&gt;\n      &lt;p&gt;Hi,&lt;br&gt;\n&nbsp;&nbsp;&nbsp; My program reads arc files and processes its contents. I noticed\nthat bulk of the time is spent in reading the arc file rather than\nprocessing the data.&lt;br&gt;\nI am reading the arc files using ArcRecord&#39;s read() method. The code\nlooks like this, &lt;br&gt;\n      &lt;br&gt;\n//arcfile --- The path of the arc file.&lt;br&gt;\n&nbsp;ArcReader arc = ARCReaderFactory.&lt;wbr&gt;get(arcfile)&lt;wbr&gt;;&lt;br&gt;\n&nbsp;Iterator iter = arc.iterator(&lt;wbr&gt;);&lt;br&gt;\n&nbsp;while(iter.hasNext(&lt;wbr&gt;))&lt;br&gt;\n&nbsp;{&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ARCRecord r = (ARCRecord) iter.next();&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByteArrayOutputStre&lt;wbr&gt;am baos = new ByteArrayOutputStre&lt;wbr&gt;am(\nr.available(&lt;wbr&gt;));&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r.skipHttpHeader(&lt;wbr&gt;);&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeOfArcRecord = r.available(&lt;wbr&gt;);&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //this while loop consumes lot of time&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (sizeOfArcRecord-&lt;wbr&gt;- &gt; 0)&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&lt;br&gt;\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; baos.write(r.&lt;wbr&gt;read());&lt;br&gt;\n&nbsp;&nbsp;&nbsp; &nbsp; }&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Doing somthing with baos.&lt;br&gt;\n}&lt;br&gt;\n      &lt;br&gt;\nOn analyzing the time spent on each section of the code, I noticed that\nthe inner loop in the above code takes more time than I had expected.\nFor processing 40MB arc file it(the inner loop) is taking nearly 1 min\n30 second in my machine(512MB RAM, 2.6GHz processor). I thought the\nfollowing function may help by reading several bytes in one attempt,\nbut it is also internally calling the read() funtion of ArcRecord&lt;br&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; read(byte[] b, int offset, int length) of ArcRecord. &lt;br&gt;\n      &lt;br&gt;\nCan anybody please help me.&lt;br&gt;\n      &lt;br&gt;\nThanks and regards&lt;br&gt;\nSajid Khan&lt;br&gt;\n      &lt;code&gt;&lt;span style=&quot;font-family: mon;&quot;&gt;&lt;/span&gt;&lt;span\n style=&quot;font-weight: bold;&quot;&gt;&lt;/span&gt;&lt;br&gt;\n      &lt;/code&gt;&lt;br&gt;\n      &lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/blockquote&gt;\n    &lt;br&gt;\n    &lt;/span&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;span width=&quot;1&quot; style=&quot;color: white;&quot;&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/blockquote&gt;\n  &lt;/div&gt;\n  &lt;br&gt;\n  &lt;/div&gt;\n\n&lt;!--End group email --&gt;&lt;/blockquote&gt;\n&lt;br&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\r\n--------------040909080607090107040403--\r\n\n"}}