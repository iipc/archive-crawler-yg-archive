{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":170539272,"authorName":"tztwh","from":"&quot;tztwh&quot; &lt;tztwh@...&gt;","profile":"tztwh","replyTo":"LIST","senderId":"7k9bBs6PIaUST3LUUGIqn6SjO35VJOrkIY_STNhN-59B88BmDcfk6pmd_u2YcTtnMzcXtWxkPZdnt3FErpNlCTM","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Persistent frontier with XML, prioritization","postDate":"1101927105","msgId":1234,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGNvbDNzMStubmNuQGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":1239,"prevInTime":1233,"nextInTime":1235,"topicId":1234,"numMessagesInTopic":3,"msgSnippet":"I ve written a frontier module with persistent state.  Both the current frontier state (queued URIs, statistics, etc.) and the set of successfully fetched URIs","rawEmail":"Return-Path: &lt;tztwh@...&gt;\r\nX-Sender: tztwh@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 68540 invoked from network); 1 Dec 2004 18:51:52 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m10.grp.scd.yahoo.com with QMQP; 1 Dec 2004 18:51:52 -0000\r\nReceived: from unknown (HELO n9a.bulk.scd.yahoo.com) (66.94.237.43)\n  by mta5.grp.scd.yahoo.com with SMTP; 1 Dec 2004 18:51:52 -0000\r\nReceived: from [66.218.69.3] by n9.bulk.scd.yahoo.com with NNFMP; 01 Dec 2004 18:51:45 -0000\r\nReceived: from [66.218.67.187] by mailer3.bulk.scd.yahoo.com with NNFMP; 01 Dec 2004 18:51:45 -0000\r\nDate: Wed, 01 Dec 2004 18:51:45 -0000\r\nTo: archive-crawler@yahoogroups.com\r\nMessage-ID: &lt;col3s1+nncn@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 2701\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Remote-IP: 66.94.237.43\r\nFrom: &quot;tztwh&quot; &lt;tztwh@...&gt;\r\nSubject: Persistent frontier with XML, prioritization\r\nX-Yahoo-Group-Post: member; u=170539272\r\nX-Yahoo-Profile: tztwh\r\n\r\n\nI&#39;ve written a frontier module with persistent state.  Both the\ncurrent frontier state (queued URIs, statistics, etc.) and the\nset of successfully fetched URIs are stored in XML files.  By\nsaving an XML file, it&#39;s possible to re-crawl a site and fetch\nonly new URIs.\n\nHere&#39;s an example of what&#39;s saved for one successfully fetched\nURI:\n&lt;Resource URL=&quot;http://www.foo.com/index.html&quot;\n   lastModified=&quot;2004-11-21T11:13:37Z&quot;\n   Adler32=&quot;4050765356&quot; contentType=&quot;text/html&quot; bytes=&quot;36587&quot;\n   path=&quot;www.foo.com/index.html&quot; requestTime=&quot;2004-11-22T01:46:35Z&quot;/&gt;\n\nThe optional lastModified attribute gives the value of the\nLast-Modified header, if the server sent one.  The path is\nwhere MirrorWriterProcessor wrote the file.\n\nThere&#39;s currently no code to re-fetch already fetched URIs.\n\nEvery queued URI has a priority.  Seeds start with a default\npriority.  A newly discovered URI inherits the priority of its\nvia.  The inherited priority can be raised or lowered  by matching\nthe URI against a sequence of regular expressions.  For example,\nsuppose you want to fetch all PDF and jar files, grabbing each\njar file as soon as it is seen, but waiting until last to fetch\nthe PDFs.  The two rules\n   (?i).*&#92;.jar$   1\n   (?i).*&#92;.pdf$  -1\nwould increase the priority of jar files by one, and decrease\nthe priority of PDFs by one.  Since the URI queue is in an\nXML file, it&#39;s also easy to terminate a job, edit the XML, and\nstart a new job.\n\nI&#39;m not suggesting adding this code to the Heritrix\ndistribution.  The reason for this announcement is that it\nmight be useful to someone as a starting point for solving some\nspecialized problem.  Some reasons you might not want it are:\n\n* It&#39;s had very limited testing, only with Heritrix 1.0.4,\n  Java 1.4.1_01, and Mac OS X 10.2.8.\n\n* It uses JAXB for reading and writing XML.  I couldn&#39;t find a\n  satisfactory Maven plug-in for JAXB, so building is kludgy.\n\n* The JAXB I tested with is in Java Web Services Developer Pack 1.3.\n\n* It&#39;s only intended for crawling one site at a time, using one\n  toe thread.  The frontier only emits one URI for crawling at\n  a time.\n\n* Politeness is limited to a random time delay.\n\n* It needs MirrorWriterProcessor.  You&#39;d need to do a little\n  hacking to use ARCWriterProcessor.\n\n* It doesn&#39;t scale.  All data structures are in memory.  The\n  XML files are snapshots of in-memory data structures.\n\n* It needs tuning.\n\n* It doesn&#39;t follow Heritrix coding conventions.\n\nIf you&#39;d like to see the code, let me know and I&#39;ll make it\navailable.  It&#39;s all LGPL.  However, please only ask if you\nhave some serious use in mind, not if you&#39;re just idly\ncurious.  It&#39;s a fair amount of work to write up enough to\nexplain how to use and build it.\n\n\n\n\n"}}