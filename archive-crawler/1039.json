{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":168599281,"authorName":"stack","from":"stack &lt;stack@...&gt;","replyTo":"LIST","senderId":"Xtgc187F4fS8ziI3gZYSW-tykN21jwyaWg4DIX60DjA6I2YLQddIbDk8kbdC60nI6JqYGA4Dbf7tATrfhe4SGA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] Buggy host valence feature revisited","postDate":"1096303406","msgId":1039,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQxNTg0MzJFLjEwMDA1MDJAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDIwMDQwOTI0MTQzNC4yMDYwNS5uaWtsYXMudmFyZ2Vuc3RlbkBqYWpqYS5jb20+","referencesHeader":"PDIwMDQwOTI0MTQzNC4yMDYwNS5uaWtsYXMudmFyZ2Vuc3RlbkBqYWpqYS5jb20+"},"prevInTopic":1034,"nextInTopic":0,"prevInTime":1038,"nextInTime":1040,"topicId":1034,"numMessagesInTopic":2,"msgSnippet":"Niklas: Thats a beautiful story you tell below.  It makes for a great read.  You want to make a patch altogether since you ve made it so far?  Perhaps a unit","rawEmail":"Return-Path: &lt;stack@...&gt;\r\nX-Sender: stack@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 5546 invoked from network); 27 Sep 2004 16:50:12 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m22.grp.scd.yahoo.com with QMQP; 27 Sep 2004 16:50:12 -0000\r\nReceived: from unknown (HELO ia00524.archive.org) (209.237.232.202)\n  by mta1.grp.scd.yahoo.com with SMTP; 27 Sep 2004 16:50:12 -0000\r\nReceived: (qmail 8385 invoked by uid 100); 27 Sep 2004 16:39:35 -0000\r\nReceived: from debord.archive.org (HELO ?207.241.238.140?) (stack@...@207.241.238.140)\n  by mail-dev.archive.org with SMTP; 27 Sep 2004 16:39:35 -0000\r\nMessage-ID: &lt;4158432E.1000502@...&gt;\r\nDate: Mon, 27 Sep 2004 09:43:26 -0700\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.2) Gecko/20040820 Debian/1.7.2-4\r\nX-Accept-Language: en-us\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;200409241434.20605.niklas.vargensten@...&gt;\r\nIn-Reply-To: &lt;200409241434.20605.niklas.vargensten@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Spam-DCC: : \r\nX-Spam-Checker-Version: SpamAssassin 2.63 (2004-01-11) on ia00524.archive.org\r\nX-Spam-Level: \r\nX-Spam-Status: No, hits=0.1 required=7.0 tests=AWL autolearn=ham version=2.63\r\nX-eGroups-Remote-IP: 209.237.232.202\r\nFrom: stack &lt;stack@...&gt;\r\nSubject: Re: [archive-crawler] Buggy host valence feature revisited\r\nX-Yahoo-Group-Post: member; u=168599281\r\n\r\nNiklas:\n\nThats a beautiful story you tell below.  It makes for a great read.  You \nwant to make a patch altogether since you&#39;ve made it so far?  Perhaps a \nunit test to demonstrate your fix? (Otherwise, we&#39;ll do it).\n\nYours,\nSt.Ack\n\n\nNiklas Vargensten wrote:\n\n&gt;I think I may have tracked this bug down (maybe others have too).\n&gt;\n&gt;Preconditions for Frontier host settings: \n&gt;valence &gt; 1, delay factor != 0, min_delay != 0, max_delay != 0\n&gt;\n&gt;Assume a CrawlURI C, whose associated KeyedQueue Q is READY, is being fetched.  \n&gt;In the meantime some other CrawlURI for the same host finishes, and  Q \n&gt;becomes SNOOZED.\n&gt;\n&gt;When C has been fetched, the chain of events in Frontier is shown below.\n&gt;\n&gt;1. method: finished(C)\n&gt;\n&gt;2. method:  noteProcessingDone(C)\n&gt;3.   Q = keyedQueueFor(C);\n&gt;4.   Object startState = kq.getState(); // == SNOOZED\n&gt;5.   Q.noteProcessDone (sets Q&#39;s state to READY or EMPTY)\n&gt;\n&gt;6.    method: updateScheduling(C, Q)\n&gt;\n&gt;A. if the scheduling decides that Q should be SNOOZED\n&gt;\n&gt;7.        method:  snoozeQueueUntil(Q, WakeTime)\n&gt;8.            the state of Q is READY, so it is not removed from snoozeQueues\n&gt;9.           Q is added to snoozeQueues (event though it is already present)\n&gt;10.          the state of Q is now changed to SNOOZED\n&gt;11.          the wakeTime of Q is now changed to the new WakeTime\n&gt;\n&gt;B. if the scheduling does not chamge Q to SNOOZED               \n&gt;\n&gt;11. method: noteProcessingDone (continued)\n&gt;12.          if(startState != Q.state())\n&gt;                // yes: Q was SNOOZED, now READY or EMPTY\n&gt;13.            method:updateQ(Q) \n&gt;14.                if EMPTY, then it may be discarded\n&gt;15.                if READY then\n&gt;16                     readyClassQueues.add(Q)\n&gt;\n&gt;Case A demonstrates how the snoozeQueues TreeMap ends up \n&gt;in the invalid state in which Q is present twice in the map - once \n&gt;in the wrong place of the tree, and once in the correct place. This \n&gt;will later cause Q.remove(Q.first()) to fail in method: wakeReadyQueues. \n&gt;This will cause an infinite loop of severe logging messages, which \n&gt;makes heritrix_out grow until the program is killed.\n&gt;\n&gt;Case B (I don&#39;t know if this happens, but it is possible)\n&gt;Now, if Q became READY, it is present in both snoozedQueues and \n&gt;readyClassQueues. If it became EMPTY, then it was discarded. The latter \n&gt;never seems to happen, but the former sure does according to my traces.\n&gt;\n&gt;To summarize, the problem seems to be caused by Q.noteProcessDone on line 5, \n&gt;which sets the state of Q to READY. Since the following methods in the \n&gt;chain get the state from Q with getState() they will think that Q is READY, \n&gt;when it is actually SNOOZED. The solution is easy - just pass the actual state \n&gt;acquired on line 4 to the scheduling methods to avoid this mishap!\n&gt;\n&gt;Pheew!\n&gt;/ Niklas\n&gt;\n&gt;\n&gt;\n&gt; \n&gt;Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt; \n&gt;\n&gt;  \n&gt;\n\n\n"}}