{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"NZu-O8rD3eAL7dEEsK196qAagCtkrxqymJaVrkkG8IMv2DuewPiB6K1nP0Zu5XgyJN4xo7js0WZv5ZWUrPO8X1uf7uIlROo","spamInfo":{"isSpam":false,"reason":"4"},"subject":"Re: [archive-crawler] Re: Out of Memory Error","postDate":"1176844038","msgId":4127,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQ2MjUzNzA2LjQwOTAyMDNAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PGYwMzlraCszcThzQGVHcm91cHMuY29tPg==","referencesHeader":"PGYwMzlraCszcThzQGVHcm91cHMuY29tPg=="},"prevInTopic":4126,"nextInTopic":4162,"prevInTime":4126,"nextInTime":4128,"topicId":4013,"numMessagesInTopic":16,"msgSnippet":"The counts of ReentrantReadWriteLock-related instances are fishy -- and, by extension, the counts of other instances where there are about 127,700 of them,","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 79336 invoked from network); 17 Apr 2007 21:07:44 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m43.grp.scd.yahoo.com with QMQP; 17 Apr 2007 21:07:44 -0000\r\nReceived: from unknown (HELO relay00.pair.com) (209.68.5.9)\n  by mta8.grp.scd.yahoo.com with SMTP; 17 Apr 2007 21:07:44 -0000\r\nReceived: (qmail 40882 invoked from network); 17 Apr 2007 21:07:06 -0000\r\nReceived: from 81.253.53.4 (HELO ?172.18.107.69?) (81.253.53.4)\n  by relay00.pair.com with SMTP; 17 Apr 2007 21:07:06 -0000\r\nX-pair-Authenticated: 81.253.53.4\r\nMessage-ID: &lt;46253706.4090203@...&gt;\r\nDate: Tue, 17 Apr 2007 14:07:18 -0700\r\nUser-Agent: Thunderbird 1.5.0.10 (Windows/20070221)\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;f039kh+3q8s@...&gt;\r\nIn-Reply-To: &lt;f039kh+3q8s@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 2:4:8:0\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\nSubject: Re: [archive-crawler] Re: Out of Memory Error\r\nX-Yahoo-Group-Post: member; u=137285340; y=sedRA6-aoDSrG5Td64rG2QYxUBbEHPu5izF0qzcffCLr\r\nX-Yahoo-Profile: gojomo\r\n\r\nThe counts of ReentrantReadWriteLock-related instances are fishy -- and, \nby extension, the counts of other instances where there are about \n127,700 of them, such as com.sleepycat.je.latch.Java5SharedLatchImpl.\n\nI think you may be running into a bug in the BDB-JE library that&#39;s \nbundled with Heritrix-1.10.2 (je-3.0.12). See the note for &quot;#15214&quot; in \nthe BDB-JE change log:\n\nhttp://www.oracle.com/technology/software/products/berkeley-db/je/files/je3213_changelog.html\n\n(From the description there, it also looks like you are more likely to \ntrigger this bug on long-running smaller crawls that *don&#39;t* exceed the \nBDB-JE in-memory cache size.)\n\nIf you can&#39;t move to heritrix-1.12.0 (which uses BDB-JE 3.2.13), you can \n*probably* just replace the &#39;je-3.0.12.jar&#39; file in your \nHERITRIX_HOME/lib/ directory with the latest BDB-JE release, 3.2.23, from:\n\nhttp://www.oracle.com/technology/software/products/berkeley-db/je/index.html\n\nWe haven&#39;t tested that exact combination -- Heritrix 1.10.2 on BDB-JE \n3.2.23 -- but BDB-JE updates are generally drop-in compatible and we \nexpect to bundle BDB-JE 3.2.23 with Heritrix 1.12.1.\n\n- Gordon @ IA\n\nanitabidari wrote:\n&gt; Hi Olaf\n&gt;   Here is the top 100 or so lines from jmap -histo output. If you want\n&gt; to see the whole output which is 1500 lines, let me know. I will be\n&gt; happy to post it.\n&gt; \n&gt; num   #instances    #bytes  class name\n&gt; --------------------------------------\n&gt;   1:  16047112   547575856  [B\n&gt;   2:    172536   179339016  [J\n&gt;   3:    172718    91191232  [[B\n&gt;   4:    172710    91190880  [Lcom.sleepycat.je.tree.Node;\n&gt;   5:    169162    21652736  com.sleepycat.je.tree.BIN\n&gt;   6:    822988    19751712  com.sleepycat.je.tree.LN\n&gt;   7:    198911     9338280  [C\n&gt;   8:    176585     5650720  java.util.TreeMap$Entry\n&gt;   9:    172726     5527232  com.sleepycat.je.latch.Java5SharedLatchImpl\n&gt;  10:    172726     5527232 \n&gt; java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync\n&gt;  11:     38695     4958680  &lt;constMethodKlass&gt;\n&gt;  12:    197287     4734888  java.lang.String\n&gt;  13:     35553     3415760  [I\n&gt;  14:     67101     3301736  &lt;symbolKlass&gt;\n&gt;  15:     38695     3099976  &lt;methodKlass&gt;\n&gt;  16:    172726     2763616 \n&gt; java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter\n&gt;  17:    172726     2763616 \n&gt; java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock\n&gt;  18:    172726     2763616 \n&gt; java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock\n&gt;  19:    169174     2706784  com.sleepycat.je.utilint.TinyHashSet\n&gt;  20:     23967     2577656  [S\n&gt;  21:      3544     2181864  &lt;constantPoolKlass&gt;\n&gt;  22:      3544     1471096  &lt;instanceKlassKlass&gt;\n&gt;  23:      3206     1337328  &lt;constantPoolCacheKlass&gt;\n&gt;  24:     21012      840480  com.sleepycat.je.cleaner.FileSummary\n&gt;  25:      3437      833080  &lt;methodDataKlass&gt;\n&gt;  26:     18214      728560  com.sleepycat.je.tree.FileSummaryLN\n&gt;  27:     21936      701952 \n&gt; java.util.concurrent.locks.AbstractQueuedSynchronizer$Node\n&gt;  28:      5957      630024  [Ljava.util.HashMap$Entry;\n&gt;  29:      3548      368992  com.sleepycat.je.tree.IN\n&gt;  30:      3843      368928  java.lang.Class\n&gt;  31:     23005      368080  java.util.regex.Pattern$SliceA\n&gt;  32:      1351      350192  [Z\n&gt;  33:     18214      291424  com.sleepycat.je.cleaner.PackedOffsets\n&gt;  34:      5357      250592  [[I\n&gt;  35:      5735      229400  java.util.HashMap\n&gt;  36:      8199      196776  java.util.HashMap$Entry\n&gt;  37:      8018      192432  java.util.regex.Pattern$GroupTail\n&gt;  38:      2348      187904  [Ljava.util.regex.Pattern$Node;\n&gt;  39:      3377      165048  [Ljava.lang.Object;\n&gt;  40:         6      164128 \n&gt; [Lorg.archive.crawler.settings.SoftSettingsHash$SettingsEntry;\n&gt;  41:      4317      138144  java.util.regex.Pattern$Curly\n&gt;  42:      2144      137216  java.util.regex.Pattern\n&gt;  43:      2123      135872  java.util.regex.Matcher\n&gt;  44:      7919      126704  java.util.regex.Pattern$GroupHead\n&gt;  45:      3194      102208  java.util.HashMap$ValueIterator\n&gt;  46:       270       86400  &lt;objArrayKlassKlass&gt;\n&gt;  47:      4609       73744  java.util.HashSet\n&gt;  48:      2246       71872  java.lang.ThreadLocal$ThreadLocalMap$Entry\n&gt;  49:      1386       70688  [Ljava.lang.String;\n&gt;  50:      2874       68976  java.util.LinkedList$Entry\n&gt;  51:      2730       65520  java.util.regex.Pattern$3\n&gt;  52:      3865       61840  java.lang.Long\n&gt;  53:      2348       56352  java.util.regex.Pattern$Branch\n&gt;  54:      2140       51360  java.util.regex.Pattern$9\n&gt;  55:      1503       48096  java.lang.ref.SoftReference\n&gt;  56:      1921       46104  java.util.Hashtable$Entry\n&gt;  57:      1315       42080  java.util.LinkedHashMap$Entry\n&gt;  58:      2603       41648  java.util.regex.Pattern$Slice\n&gt;  59:      1690       40560  java.util.ArrayList\n&gt;  60:      2348       37568  java.util.regex.Pattern$BranchConn\n&gt;  61:       207       34544  [Ljava.lang.ThreadLocal$ThreadLocalMap$Entry;\n&gt;  62:      2119       33904  java.util.HashMap$KeySet\n&gt;  63:       416       33280  java.lang.reflect.Method\n&gt;  64:      1377       33048  java.util.regex.Pattern$5\n&gt;  65:      1956       31296  java.util.regex.Pattern$Dot\n&gt;  66:      1842       29472  java.util.regex.Pattern$Ctype\n&gt;  67:       603       28944 \n&gt; org.archive.crawler.settings.ModuleAttributeInfo\n&gt;  68:       423       27072  java.lang.reflect.Constructor\n&gt;  69:      1086       26064 \n&gt; java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter\n&gt;  70:       233       25560  [Ljava.util.Hashtable$Entry;\n&gt;  71:      1453       23248  java.util.regex.Pattern$Start\n&gt;  72:       544       21760  org.archive.crawler.settings.SimpleType\n&gt;  73:      1277       20432  java.util.regex.Pattern$BitClass\n&gt;  74:      1099       17584  java.lang.Integer\n&gt;  75:       258       16512  com.sleepycat.je.cleaner.TrackedFileSummary\n&gt;  76:        97       16296  org.archive.crawler.framework.ToeThread\n&gt;  77:       677       16248 \n&gt; java.util.concurrent.locks.ReentrantLock$NonfairSync\n&gt;  78:       883       14128  java.util.regex.Pattern$Dollar\n&gt;  79:       588       14112  java.util.regex.Pattern$6\n&gt;  80:       188       13536  java.lang.reflect.Field\n&gt;  81:       793       12688  java.util.regex.Pattern$CharProperty$1\n&gt;  82:       194       12416  org.archive.io.RecordingOutputStream\n&gt;  83:       765       12240 \n&gt; org.archive.crawler.settings.LegalValueTypeConstraint\n&gt;  84:       493       11832  java.util.regex.Pattern$Ques\n&gt;  85:       352       11264  java.util.concurrent.ConcurrentHashMap$Segment\n&gt;  86:       463       11112  sun.misc.CacheEntry\n&gt;  87:         8       10672  [Lsun.misc.CacheEntry;\n&gt;  88:       187       10472 \n&gt; javax.management.openmbean.OpenMBeanAttributeInfoSupport\n&gt;  89:       430       10320  java.lang.ref.WeakReference\n&gt;  90:       180       10080  org.archive.crawler.settings.DataContainer\n&gt;  91:       550        9808  [Ljava.lang.Class;\n&gt;  92:       400        9600  com.sleepycat.je.cleaner.OffsetList$Segment\n&gt;  93:       594        9504  java.util.regex.Pattern$Begin\n&gt;  94:       216        8640  java.math.BigInteger\n&gt;  95:       154        8624  java.security.Provider$Service\n&gt;  96:       356        8544  org.apache.commons.lang.IntHashMap$Entry\n&gt;  97:       253        8096  java.lang.ref.Finalizer\n&gt;  98:       200        8000  java.util.Hashtable\n&gt;  99:       124        7936  java.util.logging.Logger\n&gt; 100:       118        7208  [[C\n&gt; 101:       221        7072  java.io.ObjectStreamField\n&gt; 102:       285        6840  java.security.Provider$ServiceKey\n&gt; 103:       282        6768  sun.security.util.DerInputBuffer\n&gt; 104:       282        6768  sun.security.util.DerValue\n&gt; 105:       210        6720  org.mortbay.util.StringMap$Node\n&gt; 106:       280        6720  sun.security.x509.RDN\n&gt; 107:       352        6648  \n&gt; Total 19627050   1024430952\n&gt; \n&gt; \n&gt; --- In archive-crawler@yahoogroups.com, &quot;pandae667&quot; &lt;aaron667@...&gt; wrote:\n&gt;&gt; Hi,\n&gt;&gt;\n&gt;&gt; if you still have access to the machine and the process is still\n&gt;&gt; hanging arround in OOM condition you might try a &quot;jmap -histo &lt;pid&gt;&quot;\n&gt;&gt; to get an overview of all the objects arround - this might help to\n&gt;&gt; track down the real cause of the OOME.\n&gt;&gt;\n&gt;&gt; Regards\n&gt;&gt;   Olaf Freyer\n&gt;&gt;\n&gt;&gt; --- In archive-crawler@yahoogroups.com, &quot;anitabidari&quot; &lt;abidari@&gt; wrote:\n&gt;&gt;&gt; Hi Gordan\n&gt;&gt;&gt; I have run into the OOME again. This time I had the heap size set to\n&gt;&gt;&gt; 1G. I downloaded Java 1.6 per your suggestion, and below is the Stack\n&gt;&gt;&gt; Trace that you requested.\n&gt;&gt;&gt;\n&gt;&gt;&gt; The crawl ran for 11 days and progress stats are\n&gt;&gt;&gt; Discovered      Queued       Downloaded  mem-use-KB  Heap-use-KB   \n&gt;&gt;&gt; Congestion\n&gt;&gt;&gt; 23181561        11745868     11024191    979905     987584  1.0\n&gt;&gt;&gt; Do you need any other information such as my order.xml etc?\n&gt;&gt;&gt;\n&gt;&gt;&gt; 04/16/2007 17:24:20 +0000 SEVERE\n&gt;&gt;&gt; org.archive.crawler.framework.ToeThread seriousError Serious error\n&gt;&gt;&gt; occured trying to proces\n&gt;&gt;&gt; s &#39;unknown&#39;\n&gt;&gt;&gt; [ToeThread #79:\n&gt;&gt;&gt;  -no CrawlURI-\n&gt;&gt;&gt;     WAITING for 11m21s125ms\n&gt;&gt;&gt;     step: ABOUT_TO_GET_URI for 11m21s125ms\n&gt;&gt;&gt;     java.lang.Thread.getStackTrace(Thread.java:1426)\n&gt;&gt;&gt;    \n&gt; org.archive.crawler.framework.ToeThread.reportTo(ToeThread.java:513)\n&gt;&gt;&gt;    \n&gt; org.archive.crawler.framework.ToeThread.reportTo(ToeThread.java:591)\n&gt;&gt;&gt;     org.archive.util.DevUtils.extraInfo(DevUtils.java:65)\n&gt;&gt;&gt;    \n&gt;&gt;&gt;\n&gt; org.archive.crawler.framework.ToeThread.seriousError(ToeThread.java:230)\n&gt;&gt;&gt;     org.archive.crawler.framework.ToeThread.run(ToeThread.java:174)\n&gt;&gt;&gt; ]\n&gt;&gt;&gt;            timestamp  discovered      queued   downloaded      \n&gt;&gt;&gt; doc/s(avg)  KB/s(avg)   dl-failures   busy-thread   mem-use-\n&gt;&gt;&gt; KB  heap-size-KB   congestion   max-depth   avg-depth\n&gt;&gt;&gt; 2007-04-16T17:24:20Z    23181561    11745868     11024191      \n&gt;&gt;&gt; 0.0(12.68)     0(182)        450518             8       9769\n&gt;&gt;&gt; 99        987584          1.0     3681209     1468233\n&gt;&gt;&gt;\n&gt;&gt;&gt; java.lang.OutOfMemoryError: Java heap space\n&gt;&gt;&gt; &lt;Cleaner name=&quot;Cleaner-1&quot;/&gt; caught exception:\n&gt;&gt;&gt; java.lang.NullPointerException\n&gt;&gt;&gt; java.lang.NullPointerException\n&gt;&gt;&gt;         at java.util.TreeMap.getEntry(TreeMap.java:324)\n&gt;&gt;&gt;         at java.util.TreeMap.remove(TreeMap.java:580)\n&gt;&gt;&gt;         at java.util.TreeSet.remove(TreeSet.java:259)\n&gt;&gt;&gt;         at\n&gt;&gt;&gt;\n&gt; com.sleepycat.je.cleaner.FileSelector.selectFileForCleaning(FileSelector.java:236)\n&gt;&gt;&gt;         at\n&gt;&gt;&gt; com.sleepycat.je.cleaner.FileProcessor.doClean(FileProcessor.java:201)\n&gt;&gt;&gt;         at\n&gt;&gt;&gt;\n&gt; com.sleepycat.je.cleaner.FileProcessor.onWakeup(FileProcessor.java:143)\n&gt;&gt;&gt;         at\n&gt;&gt;&gt; com.sleepycat.je.utilint.DaemonThread.run(DaemonThread.java:189)\n&gt;&gt;&gt;         at java.lang.Thread.run(Thread.java:619)\n&gt;&gt;&gt; Continuing\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; --- In archive-crawler@yahoogroups.com, Gordon Mohr &lt;gojomo@&gt; wrote:\n&gt;&gt;&gt;&gt; anitabidari wrote:\n&gt;&gt;&gt;&gt;&gt; --- In archive-crawler@yahoogroups.com, Gordon Mohr &lt;gojomo@&gt;\n&gt; wrote:\n&gt;&gt;&gt;&gt;&gt;&gt; anitabidari wrote:\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; I have heretrix-1.10.2 running on a dual core Linux box with\n&gt;&gt; 2.8Ghz\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; cpu&#39;s and 8G memory. Heretrix is often running into an Out of\n&gt;&gt; Memory\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; error. I dont recall seeing this error with an older version of\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; heretrix v1.8 that I had running for quite sometime.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; I am running it on a 64 bit machine. And the version of java\n&gt; I am\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; using is j2se_jdk_sun-1.5.0.07. I have the heap size set to\n&gt; 3Gigs\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; (-Xmx option.). Does anyone have any ideas on how to resolve\n&gt; this?\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Should I try running it with a 64 bit JVM, so I can specify a\n&gt;&gt; larger\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; heap? \n&gt;&gt;&gt;&gt;&gt;&gt; Were you using the exact same JVM (esp. heap) and Heritrix (esp. \n&gt;&gt;&gt;&gt;&gt;&gt; Processors and UriUniqFilter) options in 1.8? How long does it\n&gt;&gt;&gt; take to \n&gt;&gt;&gt;&gt;&gt;&gt; OOME?\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; A problematic issue with our DNS library using an ever-growing\n&gt;&gt;&gt;&gt;&gt; amount of \n&gt;&gt;&gt;&gt;&gt;&gt; cache memory was resolved between 1.8 and 1.10.2, so I would\n&gt; have \n&gt;&gt;&gt;&gt;&gt;&gt; expected fewer OOMEs in long-running crawls, rather than more.\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; Some thoughts:\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; (1) Since you have 8GB, a 64bit JVM and larger heap could help --\n&gt;&gt;&gt;&gt;&gt; but it \n&gt;&gt;&gt;&gt;&gt;&gt; tends not help as much as you think, because 64bit object\n&gt;&gt;&gt; pointers mean \n&gt;&gt;&gt;&gt;&gt;&gt; it takes a large heap to hold the same number of objects. (One\n&gt;&gt;&gt; estimate \n&gt;&gt;&gt;&gt;&gt;&gt; I&#39;ve seen not specific to Heritrix&#39;s heap: 40% larger heap needed\n&gt;&gt;&gt; for \n&gt;&gt;&gt;&gt;&gt;&gt; same number of 64bit JVM objects.)\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; (2) Not all OOMEs are really caused by main heap depletion --\n&gt; some\n&gt;&gt;&gt;&gt;&gt; other \n&gt;&gt;&gt;&gt;&gt;&gt; resource/memory-space depletions also cause OOMEs. Some of these\n&gt;&gt;&gt; other \n&gt;&gt;&gt;&gt;&gt;&gt; depletions can be *worsened* by growing a heap closer to an\n&gt;&gt;&gt; addressing \n&gt;&gt;&gt;&gt;&gt;&gt; ceiling. If you have a OOME that&#39;s easy to reproduce quickly, you\n&gt;&gt;&gt; may \n&gt;&gt;&gt;&gt;&gt;&gt; want to try running under a 1.6 JVM -- its OOME errors are more \n&gt;&gt;&gt;&gt;&gt;&gt; descriptive, and there are other options for examining the heap\n&gt;&gt; (see \n&gt; http://java.sun.com/javase/6/webnotes/trouble/TSG-VM/html/memleaks.html#gbywi)\n&gt;&gt;&gt;&gt;&gt;&gt; after the OOME.\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt; - Gordon @ IA\n&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Yahoo! Groups Links\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; Hi Gordon\n&gt;&gt;&gt;&gt;&gt; Per your recommendation I have downloaded 1.6 JVM and am\n&gt; running the\n&gt;&gt;&gt;&gt;&gt; crawl. 3G is a lot of memory. What could be causing Heretrix\n&gt; to take\n&gt;&gt;&gt;&gt;&gt; up more than 3G?\n&gt;&gt;&gt;&gt; I don&#39;t know; the last OOME problem we had was related to the DNS\n&gt;&gt; issue \n&gt;&gt;&gt;&gt; fixed before 1.10.2.\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; What is your crawl like -- number of seeds, breadth/scoping, etc. --\n&gt;&gt;&gt; and \n&gt;&gt;&gt;&gt; how soon does it OOME (in time and number of URIs visited and\n&gt;&gt;&gt; scheduled)?\n&gt;&gt;&gt;&gt; - Gordon @ IA\n&gt;&gt;&gt;&gt;\n&gt; \n&gt; \n&gt; \n&gt; \n&gt;  \n&gt; Yahoo! Groups Links\n&gt; \n&gt; \n&gt; \n\n"}}