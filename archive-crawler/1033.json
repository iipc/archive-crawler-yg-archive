{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":199508284,"authorName":"Niklas Vargensten","from":"Niklas Vargensten &lt;niklas.vargensten@...&gt;","replyTo":"LIST","senderId":"0SUh6K4O7GJeCkOfn4HkU_8nqvUa0iQ0XB2GjiM_kp7GzhPKqd5cOXorTCeF4CVWa4Fm4MNF1SHlm92tW4FnvLuTpZtDJa0RVI2wmMJQn03Gc-hqseE","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Buggy host valence feature","postDate":"1096020376","msgId":1033,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDQwOTI0MTIwNi4xNjA3My5uaWtsYXMudmFyZ2Vuc3RlbkBqYWpqYS5jb20+"},"prevInTopic":0,"nextInTopic":0,"prevInTime":1032,"nextInTime":1034,"topicId":1033,"numMessagesInTopic":1,"msgSnippet":"Regarding valence  1 and logger code in Frontier.wakeReadyQueues at https://sourceforge.net/tracker/?func=detail&aid=995441&group_id=73833&atid=539099 It","rawEmail":"Return-Path: &lt;niklas.vargensten@...&gt;\r\nX-Sender: niklas.vargensten@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 96696 invoked from network); 24 Sep 2004 10:08:33 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m21.grp.scd.yahoo.com with QMQP; 24 Sep 2004 10:08:33 -0000\r\nReceived: from unknown (HELO mail.jajja.com) (82.96.63.21)\n  by mta1.grp.scd.yahoo.com with SMTP; 24 Sep 2004 10:08:33 -0000\r\nReceived: (qmail 21739 invoked by uid 1010); 24 Sep 2004 12:14:42 +0200\r\nReceived: from niklas.vargensten@... by app1 by uid 1007 with qmail-scanner-1.22-st-qms \n (clamdscan: 0.75. spamassassin: 2.63.  Clear:RC:1(192.168.10.108):. \n Processed in 0.014122 secs); 24 Sep 2004 10:14:42 -0000\r\nX-Antivirus-MYDOMAIN-Mail-From: niklas.vargensten@... via app1\r\nX-Antivirus-MYDOMAIN: 1.22-st-qms (Clear:RC:1(192.168.10.108):. Processed in 0.014122 secs Process 21735)\r\nReceived: from unknown (HELO ?192.168.10.108?) (192.168.10.108)\n  by mail.jajja.com with SMTP; 24 Sep 2004 12:14:42 +0200\r\nOrganization: Jajja Communications AB\r\nTo: archive-crawler@yahoogroups.com\r\nDate: Fri, 24 Sep 2004 12:06:16 +0200\r\nUser-Agent: KMail/1.6.2\r\nMIME-Version: 1.0\r\nContent-Disposition: inline\r\nContent-Type: text/plain;\n  charset=&quot;us-ascii&quot;\r\nContent-Transfer-Encoding: 7bit\r\nMessage-Id: &lt;200409241206.16073.niklas.vargensten@...&gt;\r\nX-eGroups-Remote-IP: 82.96.63.21\r\nFrom: Niklas Vargensten &lt;niklas.vargensten@...&gt;\r\nSubject: Buggy host valence feature\r\nX-Yahoo-Group-Post: member; u=199508284\r\n\r\nRegarding &quot;valence &gt; 1 and logger code in Frontier.wakeReadyQueues&quot; at  \nhttps://sourceforge.net/tracker/?func=detail&aid=995441&group_id=73833&atid=539099\n\nIt seems as if the problem of the ever-growing heritrix_out.log due \nto an inconsistent TreeSet state for snoozeQueues in class Frontier with host \nvalence &gt; 1 is still being investigated, so I thought I would contribute with \nsome of my thoughts. \n\nI added a sublcass of TreeSet in class Frontier and logged all \naccess to through the methods &#39;add&#39; and &#39;remove&#39;.\nHere is the history just before the debug-logging went crazy:\n\n09/24/2004 11:19:49 +0200 SEVERE org.archive.crawler.frontier.Frontier \nwakeReadyQueues first() item couldn&#39;t be remove()d! - \norg.archive.crawler.frontier.\nKeyedQueue@1c1c92b(www.filmmix.com) - false\n\n09/24/2004 11:19:49 +0200 SEVERE org.archive.crawler.frontier.Frontier \nwakeReadyQueues History\n\n...\n(passage 1)\n\nThread[ToeThread #17,4,main] added KeyedQueue@1c1c92b(wakeTime:1096017581633), \ntrue\nThread[ToeThread #3,4,main] added KeyedQueue@1c1c92b(wakeTime:1096017581619), \nfalse\nThread[ToeThread #20,4,main] added KeyedQueue@1c1c92b(wakeTime:1096017581625), \nfalse\nThread[ToeThread #9,4,main] added KeyedQueue@1c1c92b(wakeTime:1096017581629), \nfalse\n\n...\n(passage 2)\n\nThread[ToeThread #2,4,main] added KeyedQueue@1c1c92b(wakeTime:1096017586705), \ntrue\n\n...\n(passage 3)\n\nThread[ToeThread #24,4,main] removed \nKeyedQueue@1c1c92b(wakeTime:1096017589549), true\nThread[ToeThread #24,4,main] removed \nKeyedQueue@1c1c92b(wakeTime:1096017589549), false\n\n\nThe above snoozeQueues history covers TreeSet interaction with the object \nKeyedQueue@1c1c92b.\nAs can be seen, the object was added once on the first line in passage 1, and \nthen again in passage 2 - without being removed in between. So of course, the \ntree is in an inconsistent state. The cause of the problem is definitely that \nthe wakeTime of the object is changed while it is still in the tree, which \ncauses the SchedulingComparator not to find it. The fact that add returned \nfalse on the remaining lines of passage 2 is only because no other objects \nwith a higher time values were added in between.\n\nI tried replacing the TreeSet subclass used for snoozeQueues with a simpler  \nimplementation of SortedSet (an ArrayList with linear searching using the \nSchedulingComparator), and of course haven&#39;t been able to reproduce the \nproblem since. That is of course not the solution to the problem. \n\nThe way to go is to make sure that no KeyedQueue wakeTime value is changed if \nit is present in the tree structure. The snoozeQueueUntil tries to satisfy \nthis, but obviously it fails:\n\nfrom snoozeQueueUntil(URWorkQueue, long):\n ...\n            } else if(kq.getState()== URIWorkQueue.SNOOZED) {\n                // must be removed before time may be mutated\n                snoozeQueues.remove(kq);\n            }\n...\n            kq.setWakeTime(wake);\n            snoozeQueues.add(kq);\n            kq.snooze();\n\nThere is no way that the queue could be in the SNOOZED state and not be \nremoved. From the TreeMap history, passage 1, we see that no attempt to \nremove the object is made before its wake time is changed and it is re-added. \nHence, the queue must have a state != UriWorkQueue.SNOOZED.\n\nEnd of my ramblings for now. I really hope the host-valence problem can be \nsolved soon.\n/ Niklas Vargensten\n\n\n\n\n\n\n\n\n"}}