{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":214587980,"authorName":"Christian Kohlschuetter","from":"Christian Kohlschuetter &lt;ck-heritrix@...&gt;","replyTo":"LIST","senderId":"mOxyXZK2Ymo7JOGAOsLPVvnGe1ajRkpX9eU2UTpSZVi1-Vs65hQWRUAEh5Hn9gKrfYrMGrv1FzNDr6xJ360fdH7yAp0Hv-4jhIoVy7j86bqrF7x2m3HUag","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: TextUtils getMatcher ThreadLocal-ized","postDate":"1117791202","msgId":1906,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDUwNjAzMTEzMy4yMjQwNi5jay1oZXJpdHJpeEBuZXdzY2x1Yi5kZT4=","inReplyToHeader":"PDQyOUY1QTVELjMwODAyMDNAYXJjaGl2ZS5vcmc+","referencesHeader":"PEUxRGRYY1YtMDAwNHNFLTdPQHNjOC1wci1jdnMxLnNvdXJjZWZvcmdlLm5ldD4gPDQyOUY1QTVELjMwODAyMDNAYXJjaGl2ZS5vcmc+"},"prevInTopic":0,"nextInTopic":1917,"prevInTime":1905,"nextInTime":1907,"topicId":1906,"numMessagesInTopic":5,"msgSnippet":"The whole idea of having TextUtils.getMatcher() was to avoid Matcher instantiation, so we are basically talking about cache efficiency and performance. You are","rawEmail":"Return-Path: &lt;ck-heritrix@...&gt;\r\nX-Sender: ck-heritrix@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 21945 invoked from network); 3 Jun 2005 09:55:02 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m22.grp.scd.yahoo.com with QMQP; 3 Jun 2005 09:55:02 -0000\r\nReceived: from unknown (HELO mail.newsclub.de) (130.75.2.42)\n  by mta4.grp.scd.yahoo.com with SMTP; 3 Jun 2005 09:55:01 -0000\r\nReceived: (qmail 26403 invoked by uid 2002); 3 Jun 2005 09:33:39 -0000\r\nReceived: from ck-heritrix@... by nhf3.rrzn.uni-hannover.de by uid 207 with qmail-scanner-1.21 \n (clamscan: 0.67. spamassassin: 2.63.  Clear:RC:0(84.130.101.6):SA:0(-2.1/5.0):. \n Processed in 0.502236 secs); 03 Jun 2005 09:33:39 -0000\r\nX-Spam-Status: No, hits=-2.1 required=5.0\r\nReceived: from p54826506.dip.t-dialin.net (HELO mail.newsclub.de) (webmail@...@84.130.101.6)\n  by nhf3.rrzn.uni-hannover.de with RC4-MD5 encrypted SMTP; 3 Jun 2005 09:33:38 -0000\r\nOrganization: NewsClub\r\nTo: archive-crawler@yahoogroups.com\r\nDate: Fri, 3 Jun 2005 11:33:22 +0200\r\nUser-Agent: KMail/1.8\r\nCc: Gordon Mohr &lt;gojomo@...&gt;,\n Michael Stack &lt;stack-sf@...&gt;\r\nReferences: &lt;E1DdXcV-0004sE-7O@...&gt; &lt;429F5A5D.3080203@...&gt;\r\nIn-Reply-To: &lt;429F5A5D.3080203@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n  charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Disposition: inline\r\nMessage-Id: &lt;200506031133.22406.ck-heritrix@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Christian Kohlschuetter &lt;ck-heritrix@...&gt;\r\nSubject: Re: TextUtils getMatcher ThreadLocal-ized\r\nX-Yahoo-Group-Post: member; u=214587980\r\n\r\nThe whole idea of having TextUtils.getMatcher() was to avoid Matcher \ninsta=\r\nntiation, so we are basically talking about cache efficiency and \nperforman=\r\nce.\n\nYou are right that the getMatcher()/freeMatcher() idiom definitely is =\r\n&quot;safe&quot; \nto use and easy to understand. However, I fear that constantly remo=\r\nving and \nre-adding Matchers from the Map re-introduces an unjustified mana=\r\ngement \noverhead inside the Map implementation, decreasing the efficiency o=\r\nf the \ncache.\n\nIn the current situation, the cache map grows until all Matc=\r\nhers have been \nused once (this should happen after having crawled the firs=\r\nt few documents), \nand then remains read-only, whereas your scenario implic=\r\nates that the Map \ngrows and shrinks steadily.\n\nThe problem basically is th=\r\nat is one cannot guarantee that any outer code does \nnot make use of the sa=\r\nme patterns. In that case, there is a (potential) \nchance that the outer Ma=\r\ntcher would be corrupted, especially if the caller is \nanother class which =\r\nis not under your control (the patterns currently are \ndefined as static St=\r\nring constants, thus being intern()&#39;ed automatically)\n\nWe can solve that di=\r\nlemma if the patterns were not interned, ie. \ndisambiguated. We could simpl=\r\ny append a unique comment string to the pattern \n(like the caller&#39;s class n=\r\name), or wrap the pattern string by another Object \nwhich is inserted into =\r\nthe Map instead of the String).\n\nMy favourite solution is the latter one, a=\r\ns it is already supported by the \nJava API (using the Pattern class). Inste=\r\nad of Strings, we should directly \nassign Patterns to the static fields of =\r\nthe calling class, like:\nprivate final Pattern DIGITS =3D Pattern.compile(&quot;=\r\n[0-9]+&quot;);\ninstead of\nprivate final String DIGITS =3D &quot;[0-9]+&quot;;\nand change T=\r\nextUtils.getMatcher to take Pattern objects directly.\n\nWhile the fields are=\r\n still instantiated at class-loading time, Patterns do not \nshare the probl=\r\nems of Strings, because they are not interned and do not equal \neven if the=\r\n pattern string is the same (the Pattern class does not override \nequals(),=\r\n but shouldn&#39;t we use IdentityHashMap for the Matcher cache anyway?)\n\nAll t=\r\nhe best,\n\nChristian\n\nOn Thursday 02 June 2005 21:13, Gordon Mohr wrote:\n&gt; I=\r\n like this change, but fear subtle bugs if the same thread needs two\n&gt; Matc=\r\nhers of the same pattern. It&#39;d be nice to be able to use the\n&gt; TextUtils.ge=\r\ntMatcher() idiom consistently and fearlessly, without\n&gt; having to know if a=\r\nny other frames above (or in the future below\n&gt; you) want to use the same m=\r\natcher.\n&gt;\n&gt; Thus I&#39;d suggest removing the map entry for the requested match=\r\ner\n&gt; when it is requested, and bringing back freeMatcher() to put it back\n&gt;=\r\n when a user is done.\n&gt;\n&gt; Then, in the rare cases where a second matcher of=\r\n the same pattern\n&gt; is needed, a new one will be created, but there will be=\r\n no risk of\n&gt; cross-corruption.\n&gt;\n&gt; (Forgetting to do a freeMatcher() would=\r\n lose the efficiency of reuse,\n&gt; but otherwise be harmless.)\n&gt;\n&gt; - Gordon\n-=\r\n- \nChristian Kohlsch=FCtter\nmailto: ck -at- NewsClub.de\n\n"}}