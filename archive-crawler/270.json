{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"Efd5BzTbpyg8wYhHEWizLWWB5r5Izvvc7zbvER704isfeC6Ja3xR8FJYRgysacpUyI1XjuNunPV2JFWmqHMdLqhrR3Wn_Yo","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] Heritrix Checkpointing High-Level Design","postDate":"1075166569","msgId":270,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQwMTVCRDY5LjIwNTA2MDlAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDEwNzUxNjQ1MjUuMjEzMjcuMjMuY2FtZWxAYjExNi1keW4tMzcuYXJjaGl2ZS5vcmc+","referencesHeader":"PDQwMERBMjRELjMwMjA0MDNAYXJjaGl2ZS5vcmc+IDw0MDEwODU2OS42MDYwMUBhcmNoaXZlLm9yZz4JIDw0MDExN0IyQi41MDQwMEBhcmNoaXZlLm9yZz4JIDwxMDc0ODkyNDQ4LjQwMTE4ZWEwM2VjZDFAbWFpbC1kZXYuYXJjaGl2ZS5vcmc+CSA8NDAxNTkxODMuNTA1MDAwNkBhcmNoaXZlLm9yZz4JIDwxMDc1MTU2MDM0LjQwMTU5NDQyYzJhMjlAbWFpbC1kZXYuYXJjaGl2ZS5vcmc+CSA8MTA3NTE2MDQyOC4yMTMyNy44LmNhbWVsQGIxMTYtZHluLTM3LmFyY2hpdmUub3JnPgkgPDQwMTVBRjIyLjgwN0BhcmNoaXZlLm9yZz4gPDEwNzUxNjQ1MjUuMjEzMjcuMjMuY2FtZWxAYjExNi1keW4tMzcuYXJjaGl2ZS5vcmc+"},"prevInTopic":269,"nextInTopic":0,"prevInTime":269,"nextInTime":271,"topicId":244,"numMessagesInTopic":13,"msgSnippet":"... An event-based approach as you suggest could work, but since all such top-level modules are already in distinguished roles, prominent in the code, they re","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 92743 invoked from network); 27 Jan 2004 01:23:50 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m15.grp.scd.yahoo.com with QMQP; 27 Jan 2004 01:23:50 -0000\r\nReceived: from unknown (HELO ia00524.archive.org) (209.237.232.202)\n  by mta6.grp.scd.yahoo.com with SMTP; 27 Jan 2004 01:23:50 -0000\r\nReceived: (qmail 6826 invoked by uid 100); 27 Jan 2004 01:20:27 -0000\r\nReceived: from b116-dyn-43.archive.org (HELO archive.org) (gojomo@...@209.237.240.43)\n  by ia14404.archive.org with SMTP; 27 Jan 2004 01:20:27 -0000\r\nMessage-ID: &lt;4015BD69.2050609@...&gt;\r\nDate: Mon, 26 Jan 2004 17:22:49 -0800\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6b) Gecko/20031205 Thunderbird/0.4\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;400DA24D.3020403@...&gt; &lt;40108569.60601@...&gt;\t &lt;40117B2B.50400@...&gt;\t &lt;1074892448.40118ea03ecd1@...&gt;\t &lt;40159183.5050006@...&gt;\t &lt;1075156034.40159442c2a29@...&gt;\t &lt;1075160428.21327.8.camel@...&gt;\t &lt;4015AF22.807@...&gt; &lt;1075164525.21327.23.camel@...&gt;\r\nIn-Reply-To: &lt;1075164525.21327.23.camel@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Spam-DCC: : \r\nX-Spam-Checker-Version: SpamAssassin 2.63 (2004-01-11) on ia00524.archive.org\r\nX-Spam-Level: \r\nX-Spam-Status: No, hits=-4.5 required=6.0 tests=AWL,BAYES_00 autolearn=ham \n\tversion=2.63\r\nX-eGroups-Remote-IP: 209.237.232.202\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\nSubject: Re: [archive-crawler] Heritrix Checkpointing High-Level Design\r\nX-Yahoo-Group-Post: member; u=137285340\r\nX-Yahoo-Profile: gojomo\r\n\r\nJohn Erik Halse wrote:\n&gt; I agree that it would be awkward if every low-level class (eg. queues)\n&gt; should register themselves. I was thinking of the high-level modules. In\n&gt; particular I think that the modules that is set in the order-file should\n&gt; register themselves. If those are using lower-level classes that should\n&gt; take care of checkpointing themselves, then it should be the\n&gt; responsibility of the owner module to make that happen. The advantage\n&gt; with this approach is that you don&#39;t have to handle those processors\n&gt; which implements InstancePerThread in a special way. Otherwise I suppose\n&gt; you have to traverse every thread to find all processors which should be\n&gt; checkpointed.\n\nAn event-based approach as you suggest could work, but since all such\ntop-level modules are already in distinguished roles, prominent in\nthe code, they&#39;re easy to call by name. Requiring them to register\nthemselves, in exactly the order they must checkpoint themselves, seems\nlike an extra error-prone step -- at least for now, since we don&#39;t\nhave a compelling need for a generically-expandable checkpoint process.\n\nRegarding the InstancePerThread case: there are no current users of the\nInstancePerThread facility, and if there were, it is unlikely you&#39;d want\neach instance to checkpoint individually. The interesting state would be\nsome aggregate over all such Processors, and you would want to be able\nto resume into a crawler with a different number of ToeThreads. I think\nthe proper strategy in such a case would be for the original &#39;prototype\nProcessor&#39; to collect the data from its spawns, and checkpoint itself.\n\n- Gordon\n\n"}}