{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":241416423,"authorName":"Andrea Goethals","from":"&quot;Andrea Goethals&quot; &lt;andrea_goethals@...&gt;","replyTo":"LIST","senderId":"eYpgD3qo8OHkRLCIYSHCAZFktKscM37Sed55zhy7J6TCgh89CkHBkmndr3uZn2nFaHLT2wIJAGwMAM4hW27docskKFfQgJ07ssK-tXz7eCGBs7Lx-4M","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: regular expressions in a regexp-list","postDate":"1189632859","msgId":4541,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDVhMWMzNGFhMDcwOTEyMTQzNGwxZjc2Y2JkOHliZDg4MWQ0NmY2MDkxMTkwQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDVhMWMzNGFhMDcwOTExMTQzNnc3ZTM3YjA0NWdjM2ZkNTBjMWRkMDQyODg4QG1haWwuZ21haWwuY29tPg==","referencesHeader":"PDVhMWMzNGFhMDcwOTExMTQzNnc3ZTM3YjA0NWdjM2ZkNTBjMWRkMDQyODg4QG1haWwuZ21haWwuY29tPg=="},"prevInTopic":4539,"nextInTopic":4543,"prevInTime":4540,"nextInTime":4542,"topicId":4539,"numMessagesInTopic":5,"msgSnippet":"I ve figured out some of this. As far as escaping any part of the URI to make it into a Java regular expression, it seems to work if you do or don t escape","rawEmail":"Return-Path: &lt;diglibrary@...&gt;\r\nX-Sender: diglibrary@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 52792 invoked from network); 12 Sep 2007 21:44:41 -0000\r\nReceived: from unknown (66.218.67.35)\n  by m43.grp.scd.yahoo.com with QMQP; 12 Sep 2007 21:44:40 -0000\r\nReceived: from unknown (HELO nz-out-0506.google.com) (64.233.162.235)\n  by mta9.grp.scd.yahoo.com with SMTP; 12 Sep 2007 21:44:40 -0000\r\nReceived: by nz-out-0506.google.com with SMTP id j2so244926nzf\n        for &lt;archive-crawler@yahoogroups.com&gt;; Wed, 12 Sep 2007 14:44:21 -0700 (PDT)\r\nReceived: by 10.114.209.1 with SMTP id h1mr7042wag.1189632859478;\n        Wed, 12 Sep 2007 14:34:19 -0700 (PDT)\r\nReceived: by 10.115.77.13 with HTTP; Wed, 12 Sep 2007 14:34:19 -0700 (PDT)\r\nMessage-ID: &lt;5a1c34aa0709121434l1f76cbd8ybd881d46f6091190@...&gt;\r\nDate: Wed, 12 Sep 2007 17:34:19 -0400\r\nTo: archive-crawler@yahoogroups.com\r\nIn-Reply-To: &lt;5a1c34aa0709111436w7e37b045gc3fd50c1dd042888@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\nContent-Disposition: inline\r\nReferences: &lt;5a1c34aa0709111436w7e37b045gc3fd50c1dd042888@...&gt;\r\nX-Google-Sender-Auth: 4aab3c7345e14746\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: &quot;Andrea Goethals&quot; &lt;andrea_goethals@...&gt;\r\nSubject: Re: regular expressions in a regexp-list\r\nX-Yahoo-Group-Post: member; u=241416423\r\n\r\nI&#39;ve figured out some of this.\nAs far as escaping any part of the URI to make it into a Java regular\nexpression, it seems to work if you do or don&#39;t escape them, at least\nusing heritrix 12.1.\n\nFor example the harvest that results from this excludes all three URI\npatterns regardless of whether or not any escaping is present:\n\n&lt;newObject name=&quot;rejectExcluded&quot;\n   class=&quot;org.archive.crawler.deciderules.MatchesListRegExpDecideRule&quot;&gt;\n      &lt;string name=&quot;decision&quot;&gt;REJECT&lt;/string&gt;\n      &lt;string name=&quot;list-logic&quot;&gt;OR&lt;/string&gt;\n      &lt;stringList name=&quot;regexp-list&quot;&gt;\n            &lt;string&gt;http://www.aandw.net/andrea/writings.*&lt;/string&gt;\n            &lt;string&gt;http://www&#92;.aandw&#92;.net/andrea/JVisualizer.*&lt;/string&gt;\n             &lt;string&gt;http:&#92;/&#92;/www&#92;.aandw&#92;.net&#92;/wesley&#92;/resumes.*&lt;/string&gt;\n     &lt;/stringList&gt;\n&lt;/newObject&gt;\n\nIs this behavior normal - shouldn&#39;t only the third one work if these\nreally are Java regular expressions? Or is it designed to be more\nlenient to allow URIs?\n\nThe second part of my previous email was about escaping for XML, and I\nstill can&#39;t get that part to work. The problem is that if you have an\nampersand in a URI pattern it can&#39;t live in the XML file without being\nescaped as &amp; and then the Java regular expression matching doesn&#39;t\nwork. This makes it impossible to exclude common robot traps like:\n&quot;.*widgetType=BlogArchive&widgetId=.*&action=toggle.*&quot;\n\nIf I put\n&lt;string&gt;&lt;!{CDATA[.*widgetType=BlogArchive&widgetId=.*&action=toggle.*]]&gt;&lt;/string&gt;\nfor this by the time the crawler expands my jar file with the\norder.xml and processes it it ends up looking like:\n&lt;string&gt;.*widgetType=BlogArchive&amp;amp;widgetId=.*&amp;amp;action=toggle.*&lt;/string&gt;\n\nI guess I could do a replace of all &s with something like .{1,} but\nthat&#39;s a little ugly and could end up excluding too many URIs. Is\nanyone else trying to match against URIs that contain ampersands?\n\nthanks,\nAndrea\n\nOn 9/11/07, Andrea Goethals &lt;andrea_goethals@...&gt; wrote:\n&gt; Hi,\n&gt;\n&gt; The last part of my DecidingScope profiles includes a section to\n&gt; exclude any URIs that match any regular expressions in a list of 0 or\n&gt; more URIs like this example:\n&gt;\n&gt; &lt;newObject name=&quot;rejectExcluded&quot;\n&gt;   class=&quot;org.archive.crawler.deciderules.MatchesListRegExpDecideRule&quot;&gt;\n&gt;      &lt;string name=&quot;decision&quot;&gt;REJECT&lt;/string&gt;\n&gt;      &lt;string name=&quot;list-logic&quot;&gt;OR&lt;/string&gt;\n&gt;      &lt;stringList name=&quot;regexp-list&quot;&gt;\n&gt;            &lt;string&gt;http://www&#92;.example&#92;.com&lt;/string&gt;\n&gt;             &lt;/stringList&gt;\n&gt; &lt;/newObject&gt;\n&gt;\n&gt;\n&gt;\n&gt; The URIs to exclude are pulled from a database and added to this\n&gt; section of the order.xml programatically just before a crawl. I&#39;m\n&gt; running into problems getting the correct escaping for the regular\n&gt; expression even after looking at examples in the manual and mailing\n&gt; list. I&#39;m trying to come up with all the characters that need escaping\n&gt; before they can go into this section of the order.xml. It seems like\n&gt; there&#39;s 2 types of escaping needed, one to go from the URI to the Java\n&gt; regular expression, and the other to make it XML-compatible.\n&gt;\n&gt; The special characters for XML are &lt; &gt; & &#39; &quot;\n&gt; I think that only the & can occur in a URI so I tried converting the &\n&gt; in the URIs to &amp; for the XML but then the pattern doesn&#39;t match a\n&gt; URI with just & instead of &amp;\n&gt; I experimented with using\n&gt; &lt;string&gt;&lt;![CDATA[uri-with-nonescaped-special-xml-chars]]&gt;&lt;/string&gt;\n&gt; to get around doing any conversion for the XML. I&#39;m not sure it that\n&gt; worked or not, I need to test it again.\n&gt;\n&gt; The characters in the URI that need to be escaped for the Java regular\n&gt; expression are at least . and ?\n&gt; I&#39;m not sure if the / character needs to be escaped.\n&gt;\n&gt; Is anyone doing something similar or have a better grasp on all the\n&gt; characters that need to be converted when going from URI -&gt; Java\n&gt; Regular expression -&gt; XML?\n&gt;\n&gt; thanks,\n&gt; Andrea\n&gt;\n\n"}}