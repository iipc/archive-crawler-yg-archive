{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":422010605,"authorName":"anas elghafari","from":"anas elghafari &lt;anas.elghafari@...&gt;","replyTo":"LIST","senderId":"OiqqUaOti4g2LauCRkIz_LstLRgDD0HYlS497CVdGeQy6MFm_-h1iju7ksnZlpDRsUXhAfencv81Il5aEzhtbbRT9JEbmJhhigHiiV8JQ9Y","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [archive-crawler] Extending ExtractorHTML to skip  elements","postDate":"1267558537","msgId":6414,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDZhMDI5ZTJkMTAwMzAyMTEzNXcxNjQ2ODg1Y21hMzU4NDNjYzRjMDMwMmEyQG1haWwuZ21haWwuY29tPg==","inReplyToHeader":"PDRCOEFERTdELjcwMzA3MDhAYXJjaGl2ZS5vcmc+","referencesHeader":"PDZhMDI5ZTJkMTAwMjI3MTM0N241NTc0NDhmN2hiNTc2NGQwMTU0ZTAyYzAyQG1haWwuZ21haWwuY29tPgkgPDRCOEFERTdELjcwMzA3MDhAYXJjaGl2ZS5vcmc+"},"prevInTopic":6409,"nextInTopic":0,"prevInTime":6413,"nextInTime":6415,"topicId":6408,"numMessagesInTopic":3,"msgSnippet":"Okay, that is quite helpful. Thanks! Anas","rawEmail":"Return-Path: &lt;anas.elghafari@...&gt;\r\nX-Sender: anas.elghafari@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nX-Received: (qmail 16041 invoked from network); 2 Mar 2010 19:43:13 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m13.grp.re1.yahoo.com with QMQP; 2 Mar 2010 19:43:13 -0000\r\nX-Received: from unknown (HELO mail-bw0-f220.google.com) (209.85.218.220)\n  by mta1.grp.sp2.yahoo.com with SMTP; 2 Mar 2010 19:43:13 -0000\r\nX-Received: by bwz20 with SMTP id 20so573280bwz.11\n        for &lt;archive-crawler@yahoogroups.com&gt;; Tue, 02 Mar 2010 11:42:22 -0800 (PST)\r\nMIME-Version: 1.0\r\nX-Received: by 10.204.24.132 with SMTP id v4mr4873948bkb.31.1267558537883; Tue, \n\t02 Mar 2010 11:35:37 -0800 (PST)\r\nIn-Reply-To: &lt;4B8ADE7D.7030708@...&gt;\r\nReferences: &lt;6a029e2d1002271347n557448f7hb5764d0154e02c02@...&gt;\n\t &lt;4B8ADE7D.7030708@...&gt;\r\nDate: Tue, 2 Mar 2010 20:35:37 +0100\r\nMessage-ID: &lt;6a029e2d1003021135w1646885cma35843cc4c0302a2@...&gt;\r\nTo: archive-crawler@yahoogroups.com\r\nContent-Type: multipart/alternative; boundary=00032555a71a61f3530480d67801\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: anas elghafari &lt;anas.elghafari@...&gt;\r\nSubject: Re: [archive-crawler] Extending ExtractorHTML to skip &lt;img &gt; elements\r\nX-Yahoo-Group-Post: member; u=422010605\r\n\r\n\r\n--00032555a71a61f3530480d67801\r\nContent-Type: text/plain; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOkay, that is quite helpful. Thanks!\n\nAnas\n\nOn Sun, Feb 28, 2010 at 10:22 P=\r\nM, Gordon Mohr &lt;gojomo@...&gt; wrote:\n\n&gt;\n&gt;\n&gt; anas elghafari wrote:\n&gt; &gt;=\r\n\n&gt; &gt;\n&gt; &gt; Hi all,\n&gt; &gt;\n&gt; &gt; I want to save some bandwidth by getting the extra=\r\nctor to not fetch\n&gt; &gt; embedded images (rather than my current MO of fetchin=\r\ng them then\n&gt; &gt; filtering them out by looking at Content-Type). I&#39;ve looked=\r\n at the\n&gt; &gt; source code of ExtractorHTML class and it didn&#39;t seem clear to =\r\nme how\n&gt; &gt; the &lt;img&gt; elements are being captured.\n&gt; &gt;\n&gt; &gt; So my two small q=\r\nuestions: is ExtractorHTML the class to be modified if\n&gt; &gt; one wants embedd=\r\ned images not to be fetched at all? 2) If yes, can you\n&gt; &gt; give me a rough =\r\nidea which part of the regex in that class I need to\n&gt; modify?\n&gt;\n&gt; A more g=\r\neneral approach would be allow ExtractorHTML to find all the\n&gt; outlinks in =\r\nthe page as best it can, but then discard the links that are\n&gt; not of inter=\r\nest as part of your scoping rules, before they are fetched.\n&gt; That avoids c=\r\nomplicating/qualifying ExtractorHTML code.\n&gt;\n&gt; For example, by examining th=\r\ne &#39;linkContext&#39; of discovered outlinks, you\n&gt; can get an idea of whether th=\r\ney were discovered in a &quot;&lt;A HREF=3D&#39;link&#39;&gt;&quot;\n&gt; or &quot;&lt;IMG SRC=3D&#39;link&#39;&gt;&quot; const=\r\nruction. You can look at the\n&gt; HopsPathMatchesDecideRule for a existing rul=\r\ne that makes its\n&gt; ACCEPT/REJECT decision based on the &#39;hopsPath&#39; of a disc=\r\novered outlink.\n&gt; You may wish to make a LinkContextMatchesDecideRule.\n&gt;\n&gt; =\r\nThen, if you add scope rules that REJECT both IMG/@SRC and URIs ending\n&gt; in=\r\n known-image extensions, very few if any image URIs should ever pass\n&gt; scop=\r\ne testing (and thus won&#39;t be frontier-enqueued or fetched).\n&gt;\n&gt; - Gordon @ =\r\nIA\n&gt;\n&gt; &gt; Anas\n&gt; &gt;\n&gt; &gt;\n&gt; &gt;\n&gt;\n&gt;  \n&gt;\n\r\n--00032555a71a61f3530480d67801\r\nContent-Type: text/html; charset=windows-1252\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\nOkay, that is quite helpful. Thanks!&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Anas&lt;/div&gt;&lt;div&gt;&lt;br&gt;=\r\n&lt;div class=3D&quot;gmail_quote&quot;&gt;On Sun, Feb 28, 2010 at 10:22 PM, Gordon Mohr &lt;s=\r\npan dir=3D&quot;ltr&quot;&gt;&lt;&lt;a href=3D&quot;mailto:gojomo@...&quot;&gt;gojomo@...=\r\ng&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;\n&lt;blockquote class=3D&quot;gmail_quote&quot; style=3D&quot;marg=\r\nin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;&quot;&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;=\r\ndiv style=3D&quot;background-color:#fff&quot;&gt;\n&lt;span&gt;=A0&lt;/span&gt;\n\n\n&lt;div&gt;\n  &lt;div&gt;\n\n\n   =\r\n &lt;div&gt;\n      \n      \n      &lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=3D&quot;h5&quot;&gt;anas el=\r\nghafari wrote:&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; &lt;br&gt;\n&gt; Hi all,&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; I wa=\r\nnt to save some bandwidth by getting the extractor to not fetch &lt;br&gt;\n&gt; e=\r\nmbedded images (rather than my current MO of fetching them then &lt;br&gt;\n&gt; f=\r\niltering them out by looking at Content-Type). I&#39;ve looked at the &lt;br&gt;\n=\r\n&gt; source code of ExtractorHTML class and it didn&#39;t seem clear to me =\r\nhow &lt;br&gt;\n&gt; the &lt;img&gt; elements are being captured.&lt;br&gt;\n&gt; &lt;br&gt;\n&g=\r\nt; So my two small questions: is ExtractorHTML the class to be modified if =\r\n&lt;br&gt;\n&gt; one wants embedded images not to be fetched at all? 2) If yes, ca=\r\nn you &lt;br&gt;\n&gt; give me a rough idea which part of the regex in that class =\r\nI need to modify?&lt;br&gt;\n&lt;br&gt;&lt;/div&gt;&lt;/div&gt;\nA more general approach would be all=\r\now ExtractorHTML to find all the &lt;br&gt;\noutlinks in the page as best it can, =\r\nbut then discard the links that are &lt;br&gt;\nnot of interest as part of your sc=\r\noping rules, before they are fetched. &lt;br&gt;\nThat avoids complicating/qualify=\r\ning ExtractorHTML code.&lt;br&gt;\n&lt;br&gt;\nFor example, by examining the &#39;linkCon=\r\ntext&#39; of discovered outlinks, you &lt;br&gt;\ncan get an idea of whether they =\r\nwere discovered in a &quot;&lt;A HREF=3D&#39;link&#39;&gt;&quot; &lt;br&gt;\nor &q=\r\nuot;&lt;IMG SRC=3D&#39;link&#39;&gt;&quot; construction. You can look at th=\r\ne &lt;br&gt;\nHopsPathMatchesDecideRule for a existing rule that makes its &lt;br&gt;\nAC=\r\nCEPT/REJECT decision based on the &#39;hopsPath&#39; of a discovered outlin=\r\nk. &lt;br&gt;\nYou may wish to make a LinkContextMatchesDecideRule.&lt;br&gt;\n&lt;br&gt;\nThen,=\r\n if you add scope rules that REJECT both IMG/@SRC and URIs ending &lt;br&gt;\nin k=\r\nnown-image extensions, very few if any image URIs should ever pass &lt;br&gt;\nsco=\r\npe testing (and thus won&#39;t be frontier-enqueued or fetched).&lt;br&gt;\n&lt;br&gt;\n-=\r\n Gordon @ IA&lt;br&gt;\n&lt;br&gt;\n&gt; Anas&lt;br&gt;\n&gt; &lt;br&gt;\n&gt; &lt;br&gt;\n&gt; &lt;br&gt;\n&lt;p&gt;&lt;/p&gt;\n\n=\r\n    &lt;/div&gt;\n     \n\n    \n    &lt;div style=3D&quot;color:#fff;min-height:0&quot;&gt;&lt;/div&gt;\n\n\n=\r\n&lt;/div&gt;\n\n\n\n  \n\n\n\n\n\n\n&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;\n\r\n--00032555a71a61f3530480d67801--\r\n\n"}}