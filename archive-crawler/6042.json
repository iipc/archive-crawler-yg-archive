{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"6onwvBBECyqjn9-T-A3fiJw37MKNJ0UMFc7-zuY65IvCRhdRKfeMW1HlhWDXEldrkXbnCMbgdwOaSjwSd09Z89cnpWUBY08","spamInfo":{"isSpam":false,"reason":"3"},"subject":"Re: [archive-crawler] ServerCache lookup stuck [1 Attachment]","postDate":"1253156353","msgId":6042,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRBQjFBNjAxLjkwMzAyMDRAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDUzOTUyLjM4Ljk5LjQyLjI0NC4xMjUzMDYyOTc1LnNxdWlycmVsQG1haWwuYXJjaGl2ZS5vcmc+","referencesHeader":"PGg4aXBmcytsaHBwQGVHcm91cHMuY29tPiAgICA8NjE3MDYuOTguMjM0Ljg2LjE2Ny4xMjUyODY4NTU2LnNxdWlycmVsQG1haWwuYXJjaGl2ZS5vcmc+ICAgIDw0QUFFMDg5Qi41MDMwODA0QGFyY2hpdmUub3JnPiAgICA8NjQxMzMuMzguOTkuNDIuMjQ0LjEyNTI5NTE4NjAuc3F1aXJyZWxAbWFpbC5hcmNoaXZlLm9yZz4gICAgPDRBQUY0MkJCLjcwMUBhcmNoaXZlLm9yZz4gPDUzOTUyLjM4Ljk5LjQyLjI0NC4xMjUzMDYyOTc1LnNxdWlycmVsQG1haWwuYXJjaGl2ZS5vcmc+"},"prevInTopic":6036,"nextInTopic":6043,"prevInTime":6041,"nextInTime":6043,"topicId":6026,"numMessagesInTopic":15,"msgSnippet":"... Can you send one deeper sample of this stack (the PoolThread-0 I think) -- I m curious how it got entangled. ... So if I understand properly: other","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nX-Received: (qmail 20992 invoked from network); 17 Sep 2009 02:59:47 -0000\r\nX-Received: from unknown (69.147.108.202)\n  by m8.grp.re1.yahoo.com with QMQP; 17 Sep 2009 02:59:47 -0000\r\nX-Received: from unknown (HELO mail.archive.org) (207.241.231.239)\n  by mta3.grp.re1.yahoo.com with SMTP; 17 Sep 2009 02:59:47 -0000\r\nX-Received: from localhost (localhost [127.0.0.1])\n\tby mail.archive.org (Postfix) with ESMTP id 0DB882B7554\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Wed, 16 Sep 2009 19:59:49 -0700 (PDT)\r\nX-Received: from mail.archive.org ([127.0.0.1])\n\tby localhost (mail.archive.org [127.0.0.1]) (amavisd-new, port 10024)\n\twith LMTP id eoM7mK5PW4vT for &lt;archive-crawler@yahoogroups.com&gt;;\n\tWed, 16 Sep 2009 19:59:47 -0700 (PDT)\r\nX-Received: from [192.168.1.89] (c-67-188-14-54.hsd1.ca.comcast.net [67.188.14.54])\n\tby mail.archive.org (Postfix) with ESMTPSA id C90FD2B7526\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Wed, 16 Sep 2009 19:59:47 -0700 (PDT)\r\nMessage-ID: &lt;4AB1A601.9030204@...&gt;\r\nDate: Wed, 16 Sep 2009 19:59:13 -0700\r\nUser-Agent: Thunderbird 2.0.0.23 (Windows/20090812)\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;h8ipfs+lhpp@...&gt;    &lt;61706.98.234.86.167.1252868556.squirrel@...&gt;    &lt;4AAE089B.5030804@...&gt;    &lt;64133.38.99.42.244.1252951860.squirrel@...&gt;    &lt;4AAF42BB.701@...&gt; &lt;53952.38.99.42.244.1253062975.squirrel@...&gt;\r\nIn-Reply-To: &lt;53952.38.99.42.244.1253062975.squirrel@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Msg-Info: 2:3:4:0:0\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\nSubject: Re: [archive-crawler] ServerCache lookup stuck [1 Attachment]\r\nX-Yahoo-Group-Post: member; u=137285340; y=Tar1Yt_heCDysZHOPDeLQXgFynXNOUz_ylEVh1b0gITd\r\nX-Yahoo-Profile: gojomo\r\n\r\nigor@... wrote:\n&gt;&gt; Still investigating, but thoughts so far:\n&gt;&gt;\n&gt;&gt; A notable thing about the &quot;ToeThread #19&quot; dumps is that they are usually\n&gt;&gt; BLOCKED waiting for the monitor on a specific CachedBdbMap$SoftEntry\n&gt;&gt; instance (&lt;0x97f40ad8&gt;, corresponding to the one server of interest to\n&gt;&gt; the URI-in-progress). That means some other thread holds it. But\n&gt;&gt; occasionally, tt#19 holds that lock.\n&gt; \n&gt; I attached a file with more info.\n&gt; \n&gt;&gt; This alternation suggests the other thread or threads are contributors\n&gt;&gt; to the problem state. You mentioned these might be in the middle of a\n&gt;&gt; JMX URI import; can you share some of those stacks, too? (Indeed, any\n&gt;&gt; stack with a reference to &lt;0x97f40ad8&gt; from the same all-threads-dump.)\n&gt; \n&gt; There are 4 additional threads that are stuck in the same loop: 3 JMX\n&gt; import URIs and one *gui-kill-and-replace-thread* threads.\n\nCan you send one deeper sample of this stack (the &quot;PoolThread-0&quot; I \nthink) -- I&#39;m curious how it got entangled.\n\n&gt; Initially there were only two stuck threads, tt#19 and one JMX import URI\n&gt; thread. The URI import process is sequential, one url at time, across all\n&gt; TLDs. Heritrix instance does not discover URLs itself at all.\n&gt; \n&gt; I end up with two more stuck JMX import URI threads because I restarted\n&gt; the URI import process twice with incorrect filter that drops urls from\n&gt; the *problematic* site/source-server.\n\nSo if I understand properly: other threads are still proceeding OK, it&#39;s \njust this one host that&#39;s not making any progress, because any thread \nthat tries to get an associated CrawlServer (for any reason)\n\n&gt; I also tried to kill tt#9 via GUI but that did not work. Thus, another\n&gt; stuck thread.\n\nTT#9 was showing same symptom, but different URI/host-in-progress?\n\nThe info below is useful too.\n\nCurrent best guess: it appears that the &#39;expunge&#39; (clearing memMap \nentry) of a GC&#39;d item only occurs if the keys identity-match on line \n1474 of CachedBdbMap. I don&#39;t know why they wouldn&#39;t match -- must be \nsome other synchronization problem -- but if they don&#39;t, there seems no \nway that key could ever be removed from the map. The necessary exit \ncondition for all the loops is that the key is removed as expected -- \nexplaining the thread trap.\n\nI think this theory of the loop (if not the original cause) could be \nconfirmed if you could connect to the JVM via JConsole and set the \nlogging level of org.archive.util.CachedBdbMap logger to INFO (at least \nbriefly). There should then be a flurry of output from \nCachedBdbMap.dumpExtraStats(), and the &quot;NotInMap&quot; value reported as \nnonzero (and probably increasing rapidly with each loop). Other numbers \nthere might be interesting too.\n\nCan you try that?\n\nI think manually removing the stuck memMap entry, for example via a \none-time BeanshellProcessor script, may release the threads -- though of \ncourse the problem could recur because we still don&#39;t know how the bad \nstate was initially triggered.\n\nIt&#39;d be a bit of delicate error-prone surgery on the running process, \nbut the rough approach might be:\n\n- pause\n- add a new BeanshellProcessor\n   - give it a script somewhat like (untested)...\n\n===\nrun(curi) {\n   if(curi.getCrawlURIString().equals(\n        &quot;http://example.com/ONE_TIME_FAKE_TRIGGER_URI&quot;)) {\n     setAccessibility(true);\n     controller.serverCache.servers.memMap.remove(\n        &quot;newyork.craigslist.org&quot;);\n   }\n}\n===\n\n- add the trigger URI that will pass scoping\n- unpause\n- hope for the best & check if it worked\n- pause and remove BeanshellProcessor until next time problem repeats\n\nI&#39;ve made an issue to track down the underlying trigger bug, see:\n\n   https://webarchive.jira.com/browse/HER-1677\n\n- Gordon @ IA\n\n&gt;&gt; Also, is the reported CPU usage negligible, pegged-near-100%, or\n&gt;&gt; somewhere in between?\n&gt; \n&gt; The java process uses about 50% of all cores and that is pretty much\n&gt; constant even when the crawler instance is paused. There is a constant JMX\n&gt; import URI activity, but that is single threaded and I cannot image it\n&gt; being CPU intensive.\n&gt; \n&gt;&gt; Is there a chance the JMX threads are adding many URIs from this same\n&gt;&gt; source server, and are making very very slow contended progress? (A\n&gt;&gt; frontier report might show the count of URIs on the corresponding queue\n&gt;&gt; growing, and maybe even &#39;lsof -o&#39; would show any read-position progress\n&gt;&gt; in the source files for the JMX operation, confirming some progress.) It\n&gt;&gt; would be good to know if this is a true endless-hysteresis/loop or just\n&gt;&gt; pathological slowness under a certain kind of contention.\n&gt; \n&gt; No, that is not the case.\n&gt; \n&gt;&gt; What does the heap usage look like? (The behavior of CachedBdbMap is\n&gt;&gt; intentionally GC-sensitive; operation under low-memory conditions, where\n&gt;&gt; something is GC&#39;d as soon as it&#39;s created, could be part of the problem\n&gt;&gt; cycle. But that&#39;s less likely a factor to consider if there&#39;s plenty of\n&gt;&gt; heap free space.)\n&gt; \n&gt; It is using only a half of the max heap value.\n&gt; \n&gt;&gt; Are you hoping to kick this crawl back into working state (which might\n&gt;&gt; be possible with enough trickery once we understand the problem), or\n&gt;&gt; just keeping it around for debugging?\n&gt; \n&gt; I will like to have it in a working state sooner or later either by\n&gt; restart or some other trickery. But for now it is still up and running.\n&gt; \n&gt; Thanks Gordon.\n&gt; i.\n&gt; \n&gt; \n&gt;&gt; - Gordon @ IA\n&gt;&gt;\n&gt;&gt; igor@... wrote:\n&gt;&gt;&gt; Hi Gordon,\n&gt;&gt;&gt;\n&gt;&gt;&gt; Thanks for looking into it. See comments below.\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; The CachedBdbMap somewhat recently (since last official release)\n&gt;&gt;&gt;&gt; underwent some major refactoring to improve concurrency. The test\n&gt;&gt;&gt;&gt; coverage is reasonable and the code has been through some volume tests\n&gt;&gt;&gt;&gt; without showing problems, but this might be a new bug triggered by that\n&gt;&gt;&gt;&gt; code.\n&gt;&gt;&gt;&gt; If you pause the crawl, I presume only that one thread remains active.\n&gt;&gt;&gt;&gt; Is that right?\n&gt;&gt;&gt; Only one toe thread, that is right.\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Is the CPU busy with only that thread active? I&#39;m still considering the\n&gt;&gt;&gt;&gt; other stacks you forwarded in a subsequent message; can you collect\n&gt;&gt;&gt;&gt; even\n&gt;&gt;&gt;&gt; more samples to get a sense of which branches are always being taken in\n&gt;&gt;&gt;&gt; the relevant methods?\n&gt;&gt;&gt; There is more than one thread active given that there is JMX activities\n&gt;&gt;&gt; even when the crawl is paused.\n&gt;&gt;&gt;\n&gt;&gt;&gt; There are at least two more JMX threads (trying to import an URI) that\n&gt;&gt;&gt; are\n&gt;&gt;&gt; stuck in the same loop as the toe thread.\n&gt;&gt;&gt;\n&gt;&gt;&gt; I attached a file with 100 quick thread dumps related to toe thread #19.\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; The CachedBdbMap depends on some some garbage-collection-related\n&gt;&gt;&gt;&gt; trickery that might not be reliable in all JVMs. Can you say what\n&gt;&gt;&gt;&gt; JVM/host OS you&#39;re using?\n&gt;&gt;&gt; Sun&#39;s 1.6 (1.6.0_10-b33) and CentOS (CentOS release 5.3 (Final)).\n&gt;&gt;&gt;\n&gt;&gt;&gt; i.\n&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; igor@... wrote:\n&gt;&gt;&gt;&gt;&gt; I got a stuck thread that is disrupting the crawl.\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; Heritrix verion:\n&gt;&gt;&gt;&gt;&gt; 1.15.4 (checked out on 9/9/2009)\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; Java env:\n&gt;&gt;&gt;&gt;&gt; Linux 2.6.18-128.1.10.el5PAE #1 SMP Thu May 7 11:14:31 EDT 2009 i686\n&gt;&gt;&gt;&gt;&gt; i686\n&gt;&gt;&gt;&gt;&gt; i386 GNU/Linux\n&gt;&gt;&gt;&gt;&gt; java version &quot;1.6.0_10&quot;\n&gt;&gt;&gt;&gt;&gt; Java(TM) SE Runtime Environment (build 1.6.0_10-b33)\n&gt;&gt;&gt;&gt;&gt; Java HotSpot(TM) Server VM (build 11.0-b15, mixed mode)\n&gt;&gt;&gt;&gt;&gt; JAVA_OPTS=-Xmx512m\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; Sleepycat:\n&gt;&gt;&gt;&gt;&gt; je-3.3.82.jar\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; Here is the thread dump:\n&gt;&gt;&gt;&gt;&gt; ToeThread #19: http://newyork.craigslist.org/mnh/tix/1371733715.html\n&gt;&gt;&gt;&gt;&gt;  CrawlURI http://newyork.craigslist.org/mnh/tix/1371733715.html      1\n&gt;&gt;&gt;&gt;&gt; attempts\n&gt;&gt;&gt;&gt;&gt;     in processor: Preprocessor\n&gt;&gt;&gt;&gt;&gt;     ACTIVE for 16h25m22s108ms\n&gt;&gt;&gt;&gt;&gt;     step: ABOUT_TO_BEGIN_PROCESSOR for 16h25m22s108ms\n&gt;&gt;&gt;&gt;&gt;     org.archive.util.CachedBdbMap$SoftEntry.getPhantom(CachedBdbMap.java:1625)\n&gt;&gt;&gt;&gt;&gt;     org.archive.util.CachedBdbMap$SoftEntry.isCleared(CachedBdbMap.java:1632)\n&gt;&gt;&gt;&gt;&gt;     org.archive.util.CachedBdbMap$SoftEntry.startExpunge(CachedBdbMap.java:1693)\n&gt;&gt;&gt;&gt;&gt;     org.archive.util.CachedBdbMap.isExpunged(CachedBdbMap.java:490)\n&gt;&gt;&gt;&gt;&gt;     org.archive.util.CachedBdbMap._getMem(CachedBdbMap.java:698)\n&gt;&gt;&gt;&gt;&gt;     org.archive.util.CachedBdbMap.get(CachedBdbMap.java:627)\n&gt;&gt;&gt;&gt;&gt;     org.archive.crawler.datamodel.ServerCache.getServerFor(ServerCache.java:99)\n&gt;&gt;&gt;&gt;&gt;     org.archive.crawler.datamodel.ServerCache.getServerFor(ServerCache.java:124)\n&gt;&gt;&gt;&gt;&gt;     org.archive.crawler.prefetch.PreconditionEnforcer.considerDnsPreconditions(PreconditionEnforcer.java:227)\n&gt;&gt;&gt;&gt;&gt;     org.archive.crawler.prefetch.PreconditionEnforcer.innerProcess(PreconditionEnforcer.java:111)\n&gt;&gt;&gt;&gt;&gt;     org.archive.crawler.framework.Processor.process(Processor.java:112)\n&gt;&gt;&gt;&gt;&gt;     org.archive.crawler.framework.ToeThread.processCrawlUri(ToeThread.java:302)\n&gt;&gt;&gt;&gt;&gt;     org.archive.crawler.framework.ToeThread.run(ToeThread.java:151)\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; i.\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; ------------------------------------\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt; Yahoo! Groups Links\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; ------------------------------------\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt; Yahoo! Groups Links\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; ------------------------------------\n&gt;&gt;&gt;\n&gt;&gt;&gt; Yahoo! Groups Links\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;\n&gt;&gt; ------------------------------------\n&gt;&gt;\n&gt;&gt; Yahoo! Groups Links\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt;&gt;\n&gt; \n&gt; \n&gt; ------------------------------------\n&gt; \n&gt; Yahoo! Groups Links\n&gt; \n&gt; \n&gt; \n\n"}}