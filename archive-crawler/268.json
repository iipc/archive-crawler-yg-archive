{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"-IAOAHwfFUPjBxS2h8iMDm-xsHIhIkQoQAy5IiLcVSHvz2voPlA3eRQUANeNMhuAqsHX92T5FGFyvF5r7yr423T_TgiK-RE","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] Heritrix Checkpointing High-Level Design","postDate":"1075162914","msgId":268,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQwMTVBRjIyLjgwN0BhcmNoaXZlLm9yZz4=","inReplyToHeader":"PDEwNzUxNjA0MjguMjEzMjcuOC5jYW1lbEBiMTE2LWR5bi0zNy5hcmNoaXZlLm9yZz4=","referencesHeader":"PDQwMERBMjRELjMwMjA0MDNAYXJjaGl2ZS5vcmc+IDw0MDEwODU2OS42MDYwMUBhcmNoaXZlLm9yZz4JIDw0MDExN0IyQi41MDQwMEBhcmNoaXZlLm9yZz4JIDwxMDc0ODkyNDQ4LjQwMTE4ZWEwM2VjZDFAbWFpbC1kZXYuYXJjaGl2ZS5vcmc+CSA8NDAxNTkxODMuNTA1MDAwNkBhcmNoaXZlLm9yZz4JIDwxMDc1MTU2MDM0LjQwMTU5NDQyYzJhMjlAbWFpbC1kZXYuYXJjaGl2ZS5vcmc+IDwxMDc1MTYwNDI4LjIxMzI3LjguY2FtZWxAYjExNi1keW4tMzcuYXJjaGl2ZS5vcmc+"},"prevInTopic":267,"nextInTopic":269,"prevInTime":267,"nextInTime":269,"topicId":244,"numMessagesInTopic":13,"msgSnippet":"... In the model I propose, which I ll call hierarchical delegation , the flow of control is all explicit in the code, with each item, as it is checkpointed,","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 70965 invoked from network); 27 Jan 2004 00:21:55 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m2.grp.scd.yahoo.com with QMQP; 27 Jan 2004 00:21:55 -0000\r\nReceived: from unknown (HELO ia00524.archive.org) (209.237.232.202)\n  by mta5.grp.scd.yahoo.com with SMTP; 27 Jan 2004 00:21:55 -0000\r\nReceived: (qmail 2392 invoked by uid 100); 27 Jan 2004 00:19:31 -0000\r\nReceived: from b116-dyn-43.archive.org (HELO archive.org) (gojomo@...@209.237.240.43)\n  by ia14404.archive.org with SMTP; 27 Jan 2004 00:19:31 -0000\r\nMessage-ID: &lt;4015AF22.807@...&gt;\r\nDate: Mon, 26 Jan 2004 16:21:54 -0800\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6b) Gecko/20031205 Thunderbird/0.4\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;400DA24D.3020403@...&gt; &lt;40108569.60601@...&gt;\t &lt;40117B2B.50400@...&gt;\t &lt;1074892448.40118ea03ecd1@...&gt;\t &lt;40159183.5050006@...&gt;\t &lt;1075156034.40159442c2a29@...&gt; &lt;1075160428.21327.8.camel@...&gt;\r\nIn-Reply-To: &lt;1075160428.21327.8.camel@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Spam-DCC: : \r\nX-Spam-Checker-Version: SpamAssassin 2.63 (2004-01-11) on ia00524.archive.org\r\nX-Spam-Level: \r\nX-Spam-Status: No, hits=-4.5 required=6.0 tests=AWL,BAYES_00 autolearn=ham \n\tversion=2.63\r\nX-eGroups-Remote-IP: 209.237.232.202\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\nSubject: Re: [archive-crawler] Heritrix Checkpointing High-Level Design\r\nX-Yahoo-Group-Post: member; u=137285340\r\nX-Yahoo-Profile: gojomo\r\n\r\nJohn Erik Halse wrote:\n&gt; On Mon, 2004-01-26 at 14:27, kris@... wrote:\n&gt;&gt;Quoting Gordon Mohr &lt;gojomo@...&gt;:\n\n&gt;&gt;&gt; &gt;&gt;The CrawlController (which implements Checkpointable) is sent the\n&gt;&gt;&gt; &gt;&gt;relevant messages. It propagates these to all components it\n&gt;&gt;&gt; &gt;&gt;believes needs checkpointing. Those may further propagate the\n&gt;&gt;&gt; &gt;&gt;messages. Any POJO can implement the interface, but that&#39;s no\n&gt;&gt;&gt; &gt;&gt;guarantee it will be called; there&#39;s got to be a chain of\n&gt;&gt;&gt; &gt;&gt;intentional calls from the CrawlController down.\n&gt;&gt;&gt; &gt;\n&gt;&gt;&gt; &gt; For consistency with existing code this should be done with the Event\n&gt;&gt;&gt;model.\n&gt;&gt;&gt;\n&gt;&gt;&gt;I&#39;m not sure; the checkpoint process will likely need to enforce a\n&gt;&gt;&gt;stronger sense of ordering than is typical when simply registering\n&gt;&gt;&gt;for a notification that an event (&quot;checkpoint begun&quot;, &quot;checkpoint\n&gt;&gt;&gt;ended&quot;) has occurred. A tighter coupling may be inevitable.\n&gt;&gt;\n&gt;&gt;Ok.\n&gt; \n&gt; I can&#39;t see that this couldn&#39;t be achieved with the event model. As far\n&gt; as I can see is the only difference that the modules register themselves\n&gt; for a checkpoint event instead of some mechanism that searches through\n&gt; memory for all objects implementing Checkpointable. In both scenarios a\n&gt; method will be called on the module notifying that it should do the\n&gt; checkpoint. Is there something I have missed here?\n\nIn the model I propose, which I&#39;ll call &#39;hierarchical delegation&#39;, the\nflow of control is all explicit in the code, with each item, as it\nis checkpointed, ensuring that its constituent parts are checkpointed\nin the right order as well.\n\nThere is no registration step, and at checkpoint time each object only\niterates over its own member data objects, rather than any generic set\nof listeners/subscribers. There is no search for things that may optionally\nneed to receive a message; rather, the type-contracts between objects\nensure that anything in a certain role will get the Checkpointable\ncalls, which they are free to ignore.\n\nSo CrawlController.begin(...) looks something like:\n\n     order.begin(...);\n     frontier.begin(...);\n     for {Processor p : processors)\n       processor.begin(...);\n\nMethods commit() and (with the additional complications of possible\ninstantiation) resume() are similar. The pattern recurs when (for example)\nthe Frontier needs its constituent queues checkpointed, or the Order needs\nall parts of the per-settings-tree checkpointed.\n\nWith an event-based approach, you&#39;d have the added step of many components\nregistering themselves with their &quot;container&quot;. (But in some cases, as with\nthe queues inside Frontier, I think you&#39;d still prefer explicit delegation\nbecause the constant registering/unregistering as queues come and go would\nbe very awkward.) The order of checkpoint steps would depend on the order\nin which objects registered themselves, which would be under the control of\nmany spread out code segments, and subject to alteration in data structures\nrather than code.\n\n- Gordon\n\n"}}