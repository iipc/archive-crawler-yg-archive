{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"&quot;Gordon Mohr&quot; &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"DKFVf3fRIE99rex1-OhcClCDPvSYmRRTHbt4mkNyKCdYc1eSapJX7F1wSls4ARp7_bns4O85HQKyRgJZs5jjsXyztK1-Udw50g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Design thoughts: a single worker thread","postDate":"1044904725","msgId":2,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDAwMzIwMWMyZDEzOSQzYmE1ZDUyMCQzYWViZWRkMUBnb2pvdmFpbz4="},"prevInTopic":0,"nextInTopic":0,"prevInTime":1,"nextInTime":3,"topicId":2,"numMessagesInTopic":1,"msgSnippet":"I ve been looking at what crawlers have typically done, and considering what we d like the new crawler to do. The following general outline -- in roughly valid","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (EGP: mail-8_2_3_4); 10 Feb 2003 19:19:37 -0000\r\nReceived: (qmail 57065 invoked from network); 10 Feb 2003 19:19:32 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m10.grp.scd.yahoo.com with QMQP; 10 Feb 2003 19:19:32 -0000\r\nReceived: from unknown (HELO mail.archive.org) (209.237.232.3)\n  by mta2.grp.scd.yahoo.com with SMTP; 10 Feb 2003 19:19:27 -0000\r\nReceived: from gojovaio (dynamic-58.archive.org [209.237.235.58])\n\tby mail.archive.org (8.10.2/8.10.2) with SMTP id h1AIhJd14630\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Mon, 10 Feb 2003 10:43:19 -0800\r\nMessage-ID: &lt;003201c2d139$3ba5d520$3aebedd1@gojovaio&gt;\r\nTo: &lt;archive-crawler@yahoogroups.com&gt;\r\nSubject: Design thoughts: a single worker thread \r\nDate: Mon, 10 Feb 2003 11:18:45 -0800\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: 7bit\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 6.00.2720.3000\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000\r\nFrom: &quot;Gordon Mohr&quot; &lt;gojomo@...&gt;\r\nX-Yahoo-Group-Post: member; u=137285340\r\nX-Yahoo-Profile: gojomo\r\n\r\nI&#39;ve been looking at what crawlers have typically done, and \nconsidering what we&#39;d like the new crawler to do. \n\nThe following general outline -- in roughly valid Java --\nrepresents my current thoughts on the general oepration\nof a single crawler worker thread:\n{\n   setup(); // read parameters, populate submodules, etc.\n\n   while ( shouldProceed() ) {\n\n     candidateURI = frontier.nextUri(this);\n \n     preprocess(candidateURI); // hands to each &quot;Preprocessor&quot;\n                               // module in sequence; each\n                               // may cancel (or defer) further\n                               // processing, or decorate the\n                               // CandidateURI object with\n                               // attributes which affect \n                               // further processing. By convention,\n                               // &quot;preprocessing&quot; only uses &#39;local&#39;\n                               // resources -- eg no internet \n                               // latencies\n\n     if ( candidateURI.shouldProcess() ) {\n   \n       process(candidateURI); // an attempt is made to resolve\n                                 the resource in the URI-appropriate\n                                 fashion. Zero or more &quot;Coprocessor&quot;\n                                 objects may be fed the data as it\n                                 arriving, in parallel. As end result,\n                                 candidateURI is decorated with \n                                 sufficient info for later modules\n                                 to get details/content of fetch\n\n       postprocess(candidateURI); // hands to each &quot;Postprocessor&quot;\n                                  // module (AKA &quot;Analyzer&quot;) in \n                                  // sequence\n     }\n\n     frontier.inform(candidateURI); // let frontier know what happened\n\n     update(); // update internal state, perhaps recognizing\n                  outside stop/checkpoint request\n   } \n\n   shutdown(); // clean up\n}\n\n\nSome notes:\n\n- CandidateURI is a URI *and* an arbitrary amount of other\n  annotation, which may come from the frontier or be added/\n  changed by any module to affect the processing by subsequent\n  modules\n\n- Things like robots.txt or politeness could be handled in a\n  very-smart &#39;frontier&#39; object, or as one or more &#39;preprocessors&#39;\n  which occasionally veto/snooze offered URIs, pushing them\n  back to the frontier for later processing\n\nOpen questions:\n\n- In this outline, the frontier object does a lot: it&#39;s the\n  URI-seen database, the URI-fetched database, the \n  URI-prioritization policy, etc. etc. Could/should it be\n  further decomposed?\n\n- Where do DNS lookups take place, and how much of an audit\n  trail is generated? One possibility is that there is a \n  &quot;DNS frontier&quot; just like the URI frontier. A Preprocessor\n  module only crawls a URI if its domain name has already\n  been (recently) resolved; if not, it starts a DNS lookup,\n  and &quot;snoozes&quot; the URI for enough time that the name will\n  probably have resolved by the time the URI again is considered.\n\nReactions?\n\n- Gordon\n\n\n\n"}}