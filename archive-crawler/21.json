{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":95697582,"authorName":"G.B.Reddy","from":"&quot;G.B.Reddy&quot; &lt;reddy@...&gt;","profile":"gbreddysoft","replyTo":"LIST","senderId":"dtsNXZMnbXQpE11P7o2--E-MQyoy5gIdxSvp65Kt4fVuN51vxKdREFw1lWpRrVckdWPs9uzzWvY_GW59kTYxxBrbpbhIwa6WvzAja_g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] Re: Web crawler work ??","postDate":"1047054680","msgId":21,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDExNjQwMWMyZTRjNiRmY2EyNTVmMCRkNTAwYThjMEB0aWRlbHBhcmsuaXNvZnR0ZWNoaW5kaWEuY29tPg==","referencesHeader":"PDM3ZWQwMWMyZDczNCQ0ZjQ0NjliMCRkNTAwYThjMEBSZWRkeUdCPiA8MDM4MDAxYzJkN2I2JDJjMTIxZjAwJDNhZWJlZGQxQGdvam92YWlvPiA8M2ZlMDAxYzJkOWM3JGU1OGE0YTgwJGQ1MDBhOGMwQFJlZGR5R0I+IDwwMGRjMDFjMmRhMDckNjZlZTEzNjAkM2FlYmVkZDFAZ29qb3ZhaW8+IDwwNzY5MDFjMmRlODEkMTNmY2ZlOTAkZDUwMGE4YzBAdGlkZWxwYXJrLmlzb2Z0dGVjaGluZGlhLmNvbT4gPDAwOGUwMWMyZGY2ZSQzZDQ4NGJlMCQ0ZGViZWRkMUBXT1JLU1RBVElPTjIxPiA8MGVjNjAxYzJlNDA5JDBiYzYwMmMwJGQ1MDBhOGMwQHRpZGVscGFyay5pc29mdHRlY2hpbmRpYS5jb20+"},"prevInTopic":18,"nextInTopic":0,"prevInTime":20,"nextInTime":22,"topicId":12,"numMessagesInTopic":6,"msgSnippet":"More insight on the DNS stages. As stated in the design earlier, DNS Querying Stage , DNS Response Processing Stage and Timeout and Retry Handling Stage","rawEmail":"Return-Path: &lt;reddy@...&gt;\r\nX-Sender: reddy@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (EGP: mail-8_2_6_1); 7 Mar 2003 16:31:45 -0000\r\nReceived: (qmail 30744 invoked from network); 7 Mar 2003 16:31:45 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m13.grp.scd.yahoo.com with QMQP; 7 Mar 2003 16:31:45 -0000\r\nReceived: from unknown (HELO pub.isofttechindia.com) (203.199.202.17)\n  by mta2.grp.scd.yahoo.com with SMTP; 7 Mar 2003 16:31:43 -0000\r\nReceived: from ReddyGB (ReddyGB.isofttechindia.com [192.168.0.213])\n\tby pub.isofttechindia.com (8.11.0/8.11.0) with SMTP id h27GT0i00842;\n\tFri, 7 Mar 2003 21:59:00 +0530\r\nMessage-ID: &lt;116401c2e4c6$fca255f0$d500a8c0@...&gt;\r\nTo: &lt;archive-crawler@yahoogroups.com&gt;\r\nCc: &lt;wcr-team@...&gt;\r\nReferences: &lt;37ed01c2d734$4f4469b0$d500a8c0@ReddyGB&gt; &lt;038001c2d7b6$2c121f00$3aebedd1@gojovaio&gt; &lt;3fe001c2d9c7$e58a4a80$d500a8c0@ReddyGB&gt; &lt;00dc01c2da07$66ee1360$3aebedd1@gojovaio&gt; &lt;076901c2de81$13fcfe90$d500a8c0@...&gt; &lt;008e01c2df6e$3d484be0$4debedd1@WORKSTATION21&gt; &lt;0ec601c2e409$0bc602c0$d500a8c0@...&gt;\r\nSubject: Re: [archive-crawler] Re: Web crawler work ??\r\nDate: Fri, 7 Mar 2003 22:01:20 +0530\r\nOrganization: ISoftTech\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_1161_01C2E4F5.1612B380&quot;\r\nX-Priority: 3\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook Express 5.50.4920.2300\r\nX-MimeOLE: Produced By Microsoft MimeOLE V5.50.4920.2300\r\nX-eGroups-From: &quot;G.B.Reddy&quot; &lt;reddy@...&gt;\r\nFrom: &quot;G.B.Reddy&quot; &lt;reddy@...&gt;\r\nReply-To: &quot;G.B.Reddy&quot; &lt;reddy@...&gt;\r\nX-Yahoo-Group-Post: member; u=95697582\r\nX-Yahoo-Profile: gbreddysoft\r\n\r\n\r\n------=_NextPart_000_1161_01C2E4F5.1612B380\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n\nMore insight on the DNS stages.\n\nAs stated in the design earlier, &quot;DNS Que=\r\nrying Stage&quot;, &quot;DNS Response Processing Stage&quot; and &quot;Timeout and Retry Handli=\r\nng Stage&quot; access/update the shared RequestMap. So, they need to be synchron=\r\nized. We were just thinking whether these need to be three separate stages =\r\nor could it be one stage multiplexing each of those incoming event types. T=\r\nhe pros and cons of them are as below.\n\nSingle stage benefit / Multi Stage =\r\nIssue : \n- If it is single stage, then synchronization is not done across s=\r\ntages. Even though, synchronization anyway would be needed internally in ca=\r\nse of single stage, conceptually it looks neater not to synchronize across =\r\nstages.\n\nSingle stage issue / Multi Stage benefit :\n- In case of single sta=\r\nge, the event queue would be one and this fact pulls our legs when we want =\r\nto handle overload conditions. Since there is no clear count of the distinc=\r\nt elements in the queue, it becomes difficult to analyse and condition the =\r\nsystem accordingly. Whereas, in multi stage, each one having its own queue,=\r\n conditioning/prioritizating becomes easy.\n\nI think we would end up going i=\r\nn for multi stage, unless SEDA could take care of it by itself.\n\nAnd in cas=\r\ne of parallel stages, like the ones in post processing, I think most often,=\r\n synchronization across them may be unavoidable.\n\nThanks,\nReddy\n\n\n  ----- O=\r\nriginal Message ----- \n  From: G.B.Reddy \n  To: archive-crawler@yahoogroups=\r\n.com \n  Cc: wcr-team@... \n  Sent: Thursday, March 06, 2003 1=\r\n1:21 PM\n  Subject: Re: [archive-crawler] Re: Web crawler work ??\n\n\n  Gordon=\r\n and Raymie,\n\n  Below are the various stages and their design with the issu=\r\nes involved in the DNS Resolver and HTTP Client implementation.\n\n  DNS Hist=\r\nory/Cache Handling Stage : \n\n  Overview:\n  - Maintains successful lookups i=\r\nn cache.\n  - Does negative caching.\n  - Times itself to clean the expired e=\r\nntries based on TTL. (Would use the ssTimer SEDA APIs to schedule itself pe=\r\nriodically)\n  - This stage would be dummy or could be skipped as of now sin=\r\nce we want to do caching later.\n\n  Events:\n  - Two types of events : DNSCac=\r\nheLookupEvent, DNSCacheUpdateEvent.\n  - DNSCacheLookupEvent : If entry is f=\r\nound in cache, the ipaddress is set in the CrawlURI object and is enqueued =\r\ninto the &quot;Page Requesting Stage&quot;. Else, it is enqueued into the &quot;DNS Queryi=\r\nng Stage&quot;. \n  - DNSCacheUpdateEvent : This event is published by the &quot;DNS R=\r\nesponse Processing Stage&quot; every after successful/failed lookup inorder to u=\r\npdate the cache.\n\n  Other notes:\n  - This stage could be single threaded el=\r\nse lot of synchronization might be needed.\n  - Resubmitting events on queue=\r\n full exceptions while enqueuing into this stage&#39;s queue should be handled =\r\nby the caller by scheduling it in future.\n\n\n  DNS Querying Stage : \n\n  Over=\r\nview:\n  - Sends the actual DNS ARecord query packets to the DNS Server. (Th=\r\ne response packets are processed in a later stage)\n  - Maintains a pool of =\r\nDatagramSocket objects. \n\n  Events:\n  - SendDNSQueryEvent : This is publish=\r\ned by the &quot;DNS History/Cache Handling Stage&quot; when cache miss happens. The D=\r\nNS query is formed and sent out. The response handling sink is set as the &quot;=\r\nDNS Response Processing Stage&quot;.\n\n  Implementation:\n  - A pool of DatagramSo=\r\nckets of a configurable maximum size is maintained. It will be filled incre=\r\nmentally. All these datagram sockets will be registered to the selector mai=\r\nntained by the SEDA internals. It would be ideal if this pool gets shrunk o=\r\nr expanded based on the requirement. If it is not shrunk back, then it is a=\r\nn unnecessary overhead on the selector. The reason behind having a pool is =\r\nto restrict the number of ports the selector has to listen upon and also no=\r\nt to create individual DatagramSocket objects for every query. Can this log=\r\nic of bounded pool, be implemented as a Controller in the SEDA framework (j=\r\nust like the ThreadPoolController) is an open question.\n  - When an event c=\r\nomes in, a free datagram socket in the pool will be utilized for sending th=\r\ne message. If all sockets are engaged, the incoming event should be postpon=\r\ned to reenter again after a period of time.\n  - This stage additionally has=\r\n also to maintain the list of messages sent out, their IDs and the request =\r\ntimestamps. Let us call this &quot;RequestMap&quot; for future reference. The ID is t=\r\nhe integer, described in the RFC DNS message format, used to map the reques=\r\nt-responses. The request timestamp will be made use of in query timeout han=\r\ndling (discussed later). \n\n  Parameters to this stage : \n  - The DNS server=\r\n hostname/ipaddress. If this is not given, then the /etc/resolve.conf will =\r\nbe parsed to get the name server (only the primary would be taken as of now=\r\n.). As a next step we will have to build a round-robin way of querying the =\r\nvarious name servers in resolve.conf, inorder to be polite with them.\n  - I=\r\nf resolve.conf is not present, the local host will be assumed as the name s=\r\nerver.\n\n\n  DNS Response Processing Stage :\n\n  Overview:\n  - Processes DNS r=\r\nesponses.\n\n  Implementation:\n  - When the DNS datagram packets are received=\r\n, the ID field in the header should be used to match the corresponding requ=\r\nest packet. \n  - Check for timeouts, and discard it if it had timed out; el=\r\nse, set the ipaddress/canonical name in the CrawlURI object and enqueue it =\r\nto the &quot;Page Requesting Stage&quot;. In addition, enqueue an event into the &quot;DNS=\r\n Cache Handling Stage&quot; for it to update its cache. Do the same, even on DNS=\r\n Errors like &quot;Name not found authoritative error&quot;. \n  - The request entry i=\r\nn the RequestMap (maintained for timeout handling) should be removed. This =\r\nmap, being shared across stages, should be synchronized.\n\n\n  HTTP Page Requ=\r\nesting Stage :\n\n  Overview:\n  - Connects to host and sends GET requests for=\r\n pages.\n\n  Events:\n  - Handles two types of events - StartFetchEvent and Co=\r\nnnectionCompleteEvent. \n  - The StartFetchEvent will make a TCP connect req=\r\nuest to the host. While doing so, we will register the current stage itself=\r\n to receive back the ConnectionComplete events. Once we receive this Connec=\r\ntionCompleteEvent, we should send a HTTP GET request to the page. The respo=\r\nnse handling sink is set as the &quot;HTTP Response Processing Stage&quot;. Write fai=\r\nlures should be handled.\n\n\n  HTTP Response Processing Stage :\n\n  Overview:\n=\r\n  - Processes downloaded pages.\n\n  Implementation:\n  - Check for timeouts, =\r\nand discard it if it had timed out; else, read the packets. \n  - Once the r=\r\nesponse is completely read, the request entry in the RequestMap (maintained=\r\n for timeout handling) should be removed. \n  - One issue here is when we ar=\r\ne reading lengthy HTML pages, we might receive half of the page and it migh=\r\nt stop after that. So, essentially the timeout should be applied between ch=\r\nunks of reception.\n  - Where should the errors like &quot;404 Not Found&quot;, etc be=\r\n propogated ???\n\n\n  Timeout and Retry Handling Stage :\n\n  Overview:\n  This =\r\nis a single threaded stage which enumerates through the RequestMap and chec=\r\nks for timeouts. The timed out CrawlURIs will be retried until retry count =\r\nexhausts. This stage will be self-timed periodically using the SEDA ssTimer=\r\n APIs.\n\n  Other Notes:\n  This timeout handling is a common stuff between th=\r\ne DNS requests and the HTTP requests.\n\n  Parameters to this stage:\n  - DNS =\r\ntimeout value.\n  - HTTP timeout value.\n  - DNS retry count.\n  - HTTP retry =\r\ncount. ( This would be 1 ).\n\n\n  One other thing that could be done is that,=\r\n the events by themselves will contain information as to which next stage t=\r\nhe output has to traverse. This will be flexible and no hardcoding is neede=\r\nd. Especially, in making this non-blocking DNS library an open-source, it w=\r\nould come handy. Moreover, many users might not want it to be over SEDA. So=\r\n, we will have to give other interfaces as well.\n\n  I am presently using th=\r\ne library classes given by dnsjava-1.3.2. ( http://sourceforge.net/projects=\r\n/dnsjava/ ). This is an LGPL java based synchronous implementation of DNS R=\r\nesolver. I only make use of the classes which encapsulate the formation of =\r\nrequest packets, parses response packets and the various ResourceRecord cla=\r\nsses. This library is being used by Java Apache Mail Enterprise Server ( ht=\r\ntp://james.apache.org/ ). So, it should be pretty reliable and tested. More=\r\nover it has support for IPv6, compression and security which we can make us=\r\ne of later.\n\n  Thanks,\n  Reddy\n\n\n\n    ----- Original Message ----- \n    Fro=\r\nm: Gordon Mohr \n    To: archive-crawler@yahoogroups.com \n    Cc: Raymie Sta=\r\nta ; wcr-team@... \n    Sent: Saturday, March 01, 2003 2:43 A=\r\nM\n    Subject: Re: [archive-crawler] Re: Web crawler work ??\n\n\n    Sounds l=\r\nike a reasonable plan.\n\n    By &quot;local name server&quot; do you mean something *v=\r\nery* local -- for example,\n    a standard nameserver we run on the same mac=\r\nhine?\n\n    That would seem to offer other benefits -- such as minimizing th=\r\ne modes\n    of DNS lookup we have to do and offloading caching to another p=\r\niece of\n    software (at least at first).\n\n    - Gordon\n\n    ----- Original=\r\n Message -----\n    From: G.B.Reddy\n    To: archive-crawler@yahoogroups.com\n=\r\n    Cc: Raymie Stata ; wcr-team@...\n    Sent: Thursday, Febr=\r\nuary 27, 2003 8:55 AM\n    Subject: Re: [archive-crawler] Re: Web crawler wo=\r\nrk ??\n\n\n    Gordon and Raymie,\n\n    Here goes the proposal for the asynchro=\r\nnous DNS lookup API implementation.\n\n    We shall implement a minimal resol=\r\nver which is capable of sending DNS request packets and processing response=\r\n packets in an\n    asynchrounous nio fashion. This resolver class will cont=\r\nact a local name server and rely on it to do the actual lookup. The local\n =\r\n   name server will be configured to support recursion and better would be =\r\nto use a name server which does lookup asynchronously. (\n    SQUID has asyn=\r\nchronous DNS lookup facilities ).  Even if the local name server is not asy=\r\nnchrounous, our java resolver being\n    asynchronous will be good enough si=\r\nnce our primary goal is that we do not want any blocking code in our crawle=\r\nr implementation. This\n    idea even sounds good considering the fact we wo=\r\nuld only reinvent the same wheel if we opt to implement a complete full-fle=\r\ndged\n    resolver implementation which complies with the RFC 1035 and 1034.=\r\n We can definitely implement this full-fledged resolver but the\n    real co=\r\nncern is that this would require a lot of testing and the efforts to make i=\r\nt rock solid in terms of robustness would be huge.\n\n    So, the various job=\r\ns that we would have to do to build our Simple Asynchronous DNS lookup API =\r\nwould be\n        -- Request packet formation and reply packet parsing in th=\r\ne exact RFC format.\n        -- Use non-blocking IO APIs and do UDP. (We mig=\r\nht not need TCP since the name server is only in the local network.)\n      =\r\n  -- Do canonical name queries and A record queries.\n        -- Implement t=\r\nimeouts.\n        -- Implement caching based on TTL. ( This may have to be d=\r\neferred as pointed by Raymie earlier. )\n        -- Integrate with SEDA.\n\n  =\r\n  Thanks,\n    Reddy\n\n    ----- Original Message -----\n    From: Gordon Mohr=\r\n\n    To: G.B.Reddy\n    Cc: Raymie Stata ; wcr-team@... ; arc=\r\nhive-crawler@yahoogroups.com\n    Sent: Saturday, February 22, 2003 5:37 AM\n=\r\n    Subject: [archive-crawler] Re: Web crawler work ??\n\n\n    [CC&#39;ing to arc=\r\nhive-crawler@yahoogroups.com]\n\n    Reddy writes:\n\n    &gt; On the first cut do=\r\n we need to look at implementing an asynchronous DNS\n    &gt; lookup mechanism=\r\n. If we are not, then it is going to be two stages, viz.\n    &gt; DNSCacheHand=\r\nlingStage and ResolvingStage, that can be employed using the\n    &gt; blocking=\r\n DNS lookup calls in Java. The first stage, DNSCacheHandlingStage,\n    &gt; wo=\r\nuld check if the entry is available in the cache. If available, he would\n  =\r\n  &gt; set the resolved address in the CrawlURI object and enqueue it to the\n =\r\n   &gt; appropriate next stage. If the cache doesn&#39;t contain the entry, then h=\r\ne\n    &gt; would pass the request to the Resolving stage which would call the\n=\r\n    &gt; InetAddress.getByName blocking method to resolve it. The getByName re=\r\nsult\n    &gt; would be set in the CrawlURI object as before and enqueued into =\r\nthe\n    &gt; appropriate next stage. In addition to this, the Resolving stage =\r\nwill\n    &gt; enqueue another event into the DNSCacheHandlingStage to enable h=\r\nim update\n    &gt; his cache. So, the DNSCacheHandlingStage would be handling =\r\ntwo types of\n    &gt; events, one is the lookup events and the other is the up=\r\ndate cache events.\n    &gt;\n    &gt; One problem here is that the InetAddress cla=\r\nss does not expose its cache\n    &gt; variables to its users. Even we cannot c=\r\nheck if the cache has an entry\n    &gt; before calling the getByName method. S=\r\no, we should be disabling the java\n    &gt; cache ( using the policy file ) an=\r\nd implementing our own caching mechanism.\n    &gt; ( The DNSCacheHandlingStage=\r\n would have to additionally do the job of\n    &gt; throwing away the expired e=\r\nntries in the cache also.)\n    &gt;\n    &gt; Let me know your comments on this.\n\n=\r\n    This looks like a good first cut. I&#39;m still working to improve my\n    u=\r\nnderstanding of the best way to use the staged style, mostly by\n    looking=\r\n at their HTTP and HTTP Server (Haboob) code.\n\n    It seems that they&#39;ve te=\r\nnded to use a single Stage object to do\n    many different steps/aspects of=\r\n one process, by switching on the\n    type of QueueElement received.\n\n    S=\r\no for example their seda.sandStorm.seda.apps.Haboob.http.HttpRecv\n    accep=\r\nts events of types....\n\n      - httpConnection\n      - httpRequest\n      - =\r\nSinkClosedEvent\n      - timerEvent\n\n    And their seda.sandStorm.lib.http.h=\r\nttpServer accepts events of\n    types...\n\n      - ATcpInPacket\n      - ATcp=\r\nConnection\n      - aSocketErrorEvent\n      - SinkDrainedEvent\n      - SinkC=\r\nloggedEvent\n      - SinkClosedEvent\n      - ATcpListenSuccessEvent\n\n    The=\r\ny also use Sinks that are not associated with stages; rather,\n    they inte=\r\nrface to unstaged components which nonetheless result in\n    an eventual ev=\r\nent to some supplied answer Sink. See for example\n    seda.sandStorm.lib.ht=\r\ntp.httpConnection.\n\n    So perhaps as a matter of grouping related tasks, t=\r\nhe same Stage object\n    should be re-entered over the course of a lookup, =\r\nwith different triggering\n    events. For example, you might want to reente=\r\nr a single DNSResolvingStage\n    over the course of cache lookup, lookup-in=\r\nitiation, result-receiving (or\n    timeout), etc. I&#39;m not sure; use your ju=\r\ndgement as to how many stages are\n    really needed.\n\n    &gt; P.S : We found =\r\nsome openly available async dns client APIs in C language.\n\n    That could =\r\nbe useful as a model. (I doubt we&#39;d want to call out to C\n    for this simp=\r\nle step, though -- and if we nailed down a truly async Java\n    DNS facilit=\r\ny, a lot of open source projects would probably be quite happy.)\n\n    Also:=\r\n I heard back from Patrick Eaton about SEDA-style async HTTP client\n    cod=\r\ne... he has a rough implementation for simple usage, and he knows of\n    an=\r\nother one at Berkeley which goes deeper into HTTP/1.1 conformance and\n    o=\r\nptimal performance. I&#39;ve asked him to forward whatever additional code\n    =\r\nor details he can.\n\n    - Gordon\n\n\n\n\n    To unsubscribe from this group, se=\r\nnd an email to:\n    archive-crawler-unsubscribe@yahoogroups.com\n\n\n\n    Your=\r\n use of Yahoo! Groups is subject to the Yahoo! Terms of Service.\n\n\n    Yaho=\r\no! Groups Sponsor\n    ADVERTISEMENT\n\n\n\n\n    To unsubscribe from this group,=\r\n send an email to:\n    archive-crawler-unsubscribe@yahoogroups.com\n\n\n\n    Y=\r\nour use of Yahoo! Groups is subject to the Yahoo! Terms of Service.\n\n\n     =\r\n     Yahoo! Groups Sponsor \n                ADVERTISEMENT\n               \n =\r\n        \n         \n\n    To unsubscribe from this group, send an email to:\n =\r\n   archive-crawler-unsubscribe@yahoogroups.com\n\n\n\n    Your use of Yahoo! Gr=\r\noups is subject to the Yahoo! Terms of Service. \n\n\r\n------=_NextPart_000_1161_01C2E4F5.1612B380\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n\n&lt;META http-equiv=3DContent-Type content=3D&quot;text/html; charset=3Diso-8859-1=\r\n&quot;&gt;\n&lt;META content=3D&quot;MSHTML 5.50.4134.600&quot; name=3DGENERATOR&gt;\n&lt;STYLE&gt;&lt;/STYLE&gt;=\r\n\n&lt;/HEAD&gt;\n&lt;BODY bgColor=3D#ffffff&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&=\r\nnbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;More insight on the DNS stages=\r\n.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;F=\r\nONT face=3DArial size=3D2&gt;As stated in the design earlier, &quot;DNS Querying \nS=\r\ntage&quot;, &quot;DNS Response Processing Stage&quot; and &quot;Timeout and Retry Handling Stag=\r\ne&quot; \naccess/update the shared RequestMap. So, they need to be synchronized. =\r\n\n&lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;We were just thinking whether these nee=\r\nd to be \nthree separate stages or could it be one stage multiplexing each o=\r\nf those \nincoming event types. The pros and cons of them are as below.&lt;/FON=\r\nT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT fa=\r\nce=3DArial size=3D2&gt;Single stage benefit / Multi Stage Issue&nbsp;: \n&lt;/FONT=\r\n&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;- If it is single \nstage,&nbsp;the=\r\nn&nbsp;synchronization is not done across stages. Even though, \nsynchroniza=\r\ntion anyway would be needed internally in case of single stage, \nconceptual=\r\nly it looks neater not to synchronize across stages.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FON=\r\nT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D=\r\n2&gt;Single stage issue / Multi Stage benefit \n:&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;- In case of single stage, the event queue would be \none =\r\nand this fact pulls our legs when we want to handle overload conditions. \nS=\r\nince there is no clear count of the&nbsp;distinct elements in the queue, it=\r\n \nbecomes difficult to analyse and condition the system accordingly. Wherea=\r\ns, in \nmulti stage, each one having its own queue, conditioning/prioritizat=\r\ning becomes \neasy.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nb=\r\nsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;I&nbsp;think we would end up goi=\r\nng in for multi \nstage,&nbsp;unless SEDA could take care of it by itself.&lt;/=\r\nFONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT=\r\n face=3DArial size=3D2&gt;And in case of parallel stages, like the ones in \npo=\r\nst processing, I think most often, synchronization across them&nbsp;may be =\r\n\nunavoidable.&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/=\r\nDIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Thanks,&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;Reddy&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FON=\r\nT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;BLOCKQ=\r\nUOTE dir=3Dltr \nstyle=3D&quot;PADDING-RIGHT: 0px; PADDING-LEFT: 5px; MARGIN-LEFT=\r\n: 5px; BORDER-LEFT: #000000 2px solid; MARGIN-RIGHT: 0px&quot;&gt;\n  &lt;DIV style=3D&quot;=\r\nFONT: 10pt arial&quot;&gt;----- Original Message ----- &lt;/DIV&gt;\n  &lt;DIV \n  style=3D&quot;BA=\r\nCKGROUND: #e4e4e4; FONT: 10pt arial; font-color: black&quot;&gt;&lt;B&gt;From:&lt;/B&gt; \n  &lt;A =\r\ntitle=3Dreddy@... href=3D&quot;mailto:reddy@...&quot;&gt;G.B.Reddy&lt;/=\r\nA&gt; \n  &lt;/DIV&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;To:&lt;/B&gt; &lt;A \n  title=3Darc=\r\nhive-crawler@yahoogroups.com \n  href=3D&quot;mailto:archive-crawler@yahoogroups.=\r\ncom&quot;&gt;archive-crawler@yahoogroups.com&lt;/A&gt; \n  &lt;/DIV&gt;\n  &lt;DIV style=3D&quot;FONT: 10=\r\npt arial&quot;&gt;&lt;B&gt;Cc:&lt;/B&gt; &lt;A title=3Dwcr-team@... \n  href=3D&quot;mail=\r\nto:wcr-team@...&quot;&gt;wcr-team@...&lt;/A&gt; \n  &lt;/DIV&gt;\n =\r\n &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Sent:&lt;/B&gt; Thursday, March 06, 2003 11:2=\r\n1 \n  PM&lt;/DIV&gt;\n  &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Subject:&lt;/B&gt; Re: [archiv=\r\ne-crawler] Re: Web \n  crawler work ??&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=\r\n=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT \n  face=3DArial size=\r\n=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;BR&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;Gordon and Raymie,&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial=\r\n size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Below are =\r\nthe various stages and their \n  design&nbsp;with the&nbsp;issues involved i=\r\nn the DNS Resolver and HTTP \n  Client&nbsp;implementation.&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;=\r\nDIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DAri=\r\nal size=3D2&gt;&lt;STRONG&gt;DNS History/Cache Handling Stage : \n  &lt;/STRONG&gt;&lt;/FONT&gt;&lt;=\r\n/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV dir=3Dl=\r\ntr style=3D&quot;MARGIN-RIGHT: 0px&quot;&gt;&lt;FONT face=3DArial \n  size=3D2&gt;Overview:&lt;BR&gt;=\r\n-&nbsp;Maintains successful lookups in cache.&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV dir=3Dltr=\r\n style=3D&quot;MARGIN-RIGHT: 0px&quot;&gt;&lt;FONT face=3DArial size=3D2&gt;- Does negative \n =\r\n caching.&lt;BR&gt;-&nbsp;Times itself to clean the expired entries based on TTL.=\r\n \n  (Would use the ssTimer SEDA APIs to schedule itself periodically)&lt;/FONT=\r\n&gt;&lt;/DIV&gt;\n  &lt;DIV dir=3Dltr style=3D&quot;MARGIN-RIGHT: 0px&quot;&gt;&lt;FONT face=3DArial siz=\r\ne=3D2&gt;- This stage \n  would be dummy or could be skipped as of now since we=\r\n want to do caching \n  later.&lt;/FONT&gt;&lt;BR&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial si=\r\nze=3D2&gt;Events:&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;- Two types =\r\nof events : DNSCacheLookupEvent, \n  DNSCacheUpdateEvent.&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DI=\r\nV&gt;&lt;FONT face=3DArial size=3D2&gt;- DNSCacheLookupEvent : If entry is found in =\r\n\n  cache, the ipaddress is set in the CrawlURI object and is enqueued into =\r\nthe \n  &quot;Page Requesting Stage&quot;. &lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;Else, it=\r\n is enqueued \n  into the &quot;DNS Querying Stage&quot;. &lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT f=\r\nace=3DArial size=3D2&gt;- DNSCacheUpdateEvent : This event is published \n  by =\r\nthe &quot;DNS Response Processing Stage&quot; every after successful/failed \n  lookup=\r\n&nbsp;inorder to&nbsp;update the cache.&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DAr=\r\nial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;Other n=\r\notes:&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;- This stage could be=\r\n single threaded else lot of \n  synchronization might be needed.&lt;/FONT&gt;&lt;/DI=\r\nV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;-&nbsp;&lt;FONT face=3DArial \n  size=3D2=\r\n&gt;&lt;/FONT&gt;Resubmitting events on&nbsp;queue full exceptions while \n  enqueuin=\r\ng into this stage&#8217;s queue should be handled by the caller by \n  sched=\r\nuling it in future.&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;=\r\n&nbsp;&lt;/DIV&gt;&lt;FONT face=3DArial size=3D2&gt;\n  &lt;DIV&gt;&lt;BR&gt;&lt;STRONG&gt;DNS Querying St=\r\nage : &lt;/STRONG&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;Overview:=\r\n&lt;BR&gt;-&nbsp;Sends the actual DNS ARecord query packets to the DNS \n  Server.=\r\n (The response packets are processed in a later stage)&lt;/DIV&gt;\n  &lt;DIV&gt;- Maint=\r\nains a pool of DatagramSocket objects. &lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;Ev=\r\nents:&lt;/DIV&gt;\n  &lt;DIV&gt;- SendDNSQueryEvent : This is published by the &quot;DNS Hist=\r\nory/Cache \n  Handling Stage&quot; when cache miss happens. The DNS query is form=\r\ned and sent out. \n  The response handling sink is set as the &quot;DNS Response =\r\nProcessing \nStage&quot;.&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;Implementation:&lt;/DIV&gt;\n=\r\n  &lt;DIV&gt;- A pool of&nbsp;DatagramSockets of a configurable maximum size is \n=\r\n  maintained. It will be filled incrementally. All these datagram sockets w=\r\nill \n  be registered to the selector maintained by the SEDA internals. It w=\r\nould be \n  ideal if this pool gets shrunk or expanded based on the requirem=\r\nent. If it is \n  not shrunk back, then it is an unnecessary overhead on the=\r\n selector. The \n  reason behind having a pool is to restrict the number of =\r\nports the selector \n  has to listen upon and also not to create individual =\r\nDatagramSocket objects \n  for every query. Can this logic of bounded pool, =\r\nbe implemented as a \n  Controller in the SEDA framework (just like the Thre=\r\nadPoolController) is an \n  open question.&lt;BR&gt;- When an event comes in, a fr=\r\nee datagram socket in the pool \n  will be utilized for sending the message.=\r\n If all sockets are engaged, the \n  incoming event should be postponed to r=\r\neenter again after a period of \n  time.&lt;/DIV&gt;\n  &lt;DIV&gt;- This stage additiona=\r\nlly has also to&nbsp;maintain&nbsp;the list of \n  messages sent out, their =\r\nIDs and the request timestamps. Let us call this \n  &quot;RequestMap&quot; for future=\r\n reference. The ID is the integer, described in the RFC \n  DNS message form=\r\nat, used to map the request-responses. The request timestamp \n  will be mad=\r\ne use of in query timeout handling (discussed later). &lt;BR&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;Par=\r\nameters to this stage : &lt;/DIV&gt;\n  &lt;DIV&gt;- The DNS server hostname/ipaddress. =\r\nIf this is not given, then the \n  /etc/resolve.conf will be parsed to get t=\r\nhe name server (only the primary \n  would be taken as of now.). As a next s=\r\ntep we will have to build a round-robin \n  way of querying the various name=\r\n servers in resolve.conf, inorder to be polite \n  with them.&lt;/DIV&gt;\n  &lt;DIV&gt;-=\r\n If resolve.conf is not present, the local host will be assumed as the \n  n=\r\name server.&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR&gt;&lt;STRONG&gt;DNS Response Proce=\r\nssing Stage :&lt;/STRONG&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;Ov=\r\nerview:&lt;/DIV&gt;\n  &lt;DIV&gt;- Processes DNS responses.&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n =\r\n &lt;DIV&gt;Implementation:&lt;/DIV&gt;\n  &lt;DIV&gt;-&nbsp;When the DNS datagram packets are=\r\n received, the ID field in the \n  header should be used to match the corres=\r\nponding request packet. &lt;/DIV&gt;\n  &lt;DIV&gt;- Check for timeouts, and discard it =\r\nif it had timed out; else, set the \n  ipaddress/canonical name&nbsp;in the =\r\nCrawlURI object and enqueue it to the \n  &quot;Page Requesting Stage&quot;. In additi=\r\non, enqueue an event into the &quot;DNS Cache \n  Handling Stage&quot; for it to updat=\r\ne its cache. Do the same, even on DNS Errors \n  like &#8220;Name not found =\r\nauthoritative error&#8221;. &lt;/DIV&gt;\n  &lt;DIV&gt;- The request entry in the&nbsp;R=\r\nequestMap (maintained for timeout \n  handling) should be removed. This map,=\r\n being shared across stages, should be \n  synchronized.&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;=\r\n&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;STRONG&gt;HTTP&nbsp;Page R=\r\nequesting Stage :&lt;/STRONG&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;Overvie=\r\nw:&lt;/DIV&gt;\n  &lt;DIV&gt;- Connects to host and sends GET requests for pages.&lt;/DIV&gt;\n=\r\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;Events:&lt;/DIV&gt;\n  &lt;DIV&gt;- Handles two types of even=\r\nts - StartFetchEvent and \n  ConnectionCompleteEvent. &lt;/DIV&gt;\n  &lt;DIV&gt;- The St=\r\nartFetchEvent will make a TCP connect request to the host. While \n  doing s=\r\no, we will register the current stage itself to receive back the \n  Connect=\r\nionComplete events. Once we receive this ConnectionCompleteEvent, we \n  sho=\r\nuld send a HTTP GET request to the page. The response handling sink is set =\r\n\n  as the &quot;HTTP Response Processing Stage&quot;. Write failures&nbsp;should be \n=\r\n  handled.&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR&gt;&lt;STRONG&gt;HTTP Response=\r\n Processing Stage :&lt;/STRONG&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&nbsp;&lt;/DIV&gt;\n  &lt;=\r\nDIV&gt;\n  &lt;DIV&gt;Overview:&lt;/DIV&gt;\n  &lt;DIV&gt;- Processes downloaded pages.&lt;/DIV&gt;\n  &lt;D=\r\nIV&gt;&nbsp;&lt;/DIV&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;Implementation:&lt;/DIV&gt;\n  &lt;DIV&gt;- Check for timeo=\r\nuts, and discard it if it had timed out; else, read the \n  packets. &lt;/DIV&gt;\n=\r\n  &lt;DIV&gt;- Once the response is completely read, the request entry in \n  the&=\r\nnbsp;RequestMap (maintained for timeout handling) should be removed. \n&lt;/DIV=\r\n&gt;\n  &lt;DIV&gt;- One issue here is when we are reading lengthy HTML pages, we mig=\r\nht \n  receive half of the page and it might stop after that. So, essentiall=\r\ny the \n  timeout should be applied between chunks of reception.&lt;/DIV&gt;\n  &lt;DI=\r\nV&gt;- Where should the errors like &quot;404 Not Found&quot;, etc be propogated \n  ???&lt;=\r\n/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;BR&gt;&lt;STRONG&gt;Timeout and Retry Handling Sta=\r\nge :&lt;/STRONG&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;Overview:&lt;/DIV&gt;\n  &lt;DIV&gt;This =\r\nis a single threaded stage which enumerates through the RequestMap \n  and c=\r\nhecks for timeouts. The timed out CrawlURIs will be retried until retry \n  =\r\ncount exhausts. This stage will be self-timed periodically using the SEDA \n=\r\n  ssTimer APIs.&lt;/DIV&gt;\n  &lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;Other Notes:&lt;/DIV&gt;\n  &lt;DIV&gt;=\r\nThis timeout handling is a common stuff between the DNS requests and the \n =\r\n HTTP requests.&lt;BR&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;Parameters to this stage:&lt;/DIV&gt;\n  &lt;DIV&gt;- D=\r\nNS timeout value.&lt;/DIV&gt;\n  &lt;DIV&gt;- HTTP timeout value.&lt;/DIV&gt;\n  &lt;DIV&gt;- DNS ret=\r\nry count.&lt;/DIV&gt;\n  &lt;DIV&gt;- HTTP retry count. ( This would be 1 ).&lt;/DIV&gt;\n  &lt;DI=\r\nV&gt;&nbsp;&lt;/DIV&gt;&lt;/FONT&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV=\r\n&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;One other thing that could be done is =\r\n\n  that,&nbsp;the events by themselves will contain information as to which=\r\n next \n  stage the output has to traverse. This will be flexible&nbsp;and&n=\r\nbsp;no \n  hardcoding is needed. Especially, i&lt;/FONT&gt;&lt;FONT face=3DArial size=\r\n=3D2&gt;n making \n  this non-blocking DNS library an open-source, it would com=\r\ne handy. Moreover, \n  many &lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;users might n=\r\not want it to be over SEDA. \n  So, we will have to give other interfaces as=\r\n well.&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n=\r\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;I am presently using the library classes=\r\n given by \n  dnsjava-1.3.2. ( &lt;A \n  href=3D&quot;http://sourceforge.net/projects=\r\n/dnsjava/&quot;&gt;http://sourceforge.net/projects/dnsjava/&lt;/A&gt;&nbsp;).&nbsp;This \n=\r\n  is an LGPL java based synchronous implementation of DNS Resolver. I only =\r\nmake \n  use of the classes which encapsulate the formation of request \n  pa=\r\nckets,&nbsp;parses response packets and the&nbsp;various ResourceRecord \n  =\r\nclasses. This library is being used by Java Apache Mail Enterprise Server (=\r\n &lt;A \n  href=3D&quot;http://james.apache.org/&quot;&gt;http://james.apache.org/&lt;/A&gt;&nbsp;=\r\n). \n  So,&nbsp;it should be pretty reliable and tested. Moreover it has sup=\r\nport for \n  IPv6, compression and security which we can make use of later.&lt;=\r\n/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;=\r\n&lt;FONT face=3DArial size=3D2&gt;Thanks,&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial =\r\nsize=3D2&gt;Reddy&lt;/FONT&gt;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp=\r\n;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n  &lt;DIV&gt;&lt;FONT=\r\n face=3DArial size=3D2&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n  &lt;BLOCKQUOTE \n  style=3D&quot;PADDIN=\r\nG-RIGHT: 0px; PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: #000000 2px=\r\n solid; MARGIN-RIGHT: 0px&quot;&gt;\n    &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;----- Origi=\r\nnal Message ----- &lt;/DIV&gt;\n    &lt;DIV \n    style=3D&quot;BACKGROUND: #e4e4e4; FONT: =\r\n10pt arial; font-color: black&quot;&gt;&lt;B&gt;From:&lt;/B&gt; \n    &lt;A title=3Dgojomo@archive.=\r\norg href=3D&quot;mailto:gojomo@...&quot;&gt;Gordon Mohr&lt;/A&gt; \n    &lt;/DIV&gt;\n    &lt;DIV=\r\n style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;To:&lt;/B&gt; &lt;A \n    title=3Darchive-crawler@yaho=\r\nogroups.com \n    href=3D&quot;mailto:archive-crawler@yahoogroups.com&quot;&gt;archive-cr=\r\nawler@yahoogroups.com&lt;/A&gt; \n    &lt;/DIV&gt;\n    &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;=\r\nB&gt;Cc:&lt;/B&gt; &lt;A title=3Draymie@... \n    href=3D&quot;mailto:raymie@archive.=\r\norg&quot;&gt;Raymie Stata&lt;/A&gt; ; &lt;A \n    title=3Dwcr-team@... \n    hr=\r\nef=3D&quot;mailto:wcr-team@...&quot;&gt;wcr-team@...&lt;/A&gt; \n=\r\n    &lt;/DIV&gt;\n    &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Sent:&lt;/B&gt; Saturday, March=\r\n 01, 2003 2:43 \n    AM&lt;/DIV&gt;\n    &lt;DIV style=3D&quot;FONT: 10pt arial&quot;&gt;&lt;B&gt;Subject=\r\n:&lt;/B&gt; Re: [archive-crawler] Re: Web \n    crawler work ??&lt;/DIV&gt;\n    &lt;DIV&gt;&lt;FO=\r\nNT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT \n =\r\n   face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT fa=\r\nce=3DArial \n    size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT fa=\r\nce=3DArial \n    size=3D2&gt;&lt;/FONT&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;/FONT&gt;&lt;FONT fa=\r\nce=3DArial \n    size=3D2&gt;&lt;/FONT&gt;&lt;BR&gt;&lt;/DIV&gt;&lt;TT&gt;Sounds like a reasonable plan=\r\n.&lt;BR&gt;&lt;BR&gt;By &quot;local \n    name server&quot; do you mean something *very* local -- =\r\nfor example,&lt;BR&gt;a \n    standard nameserver we run on the same machine?&lt;BR&gt;&lt;=\r\nBR&gt;That would seem to \n    offer other benefits -- such as minimizing the m=\r\nodes&lt;BR&gt;of DNS lookup we \n    have to do and offloading caching to another =\r\npiece of&lt;BR&gt;software (at least \n    at first).&lt;BR&gt;&lt;BR&gt;- Gordon&lt;BR&gt;&lt;BR&gt;-----=\r\n Original Message -----&lt;BR&gt;From: \n    G.B.Reddy&lt;BR&gt;To: &lt;A \n    href=3D&quot;mail=\r\nto:archive-crawler@yahoogroups.com&quot;&gt;archive-crawler@yahoogroups.com&lt;/A&gt;&lt;BR&gt;=\r\nCc: \n    Raymie Stata ; &lt;A \n    href=3D&quot;mailto:wcr-team@...&quot;=\r\n&gt;wcr-team@...&lt;/A&gt;&lt;BR&gt;Sent: \n    Thursday, February 27, 2003 =\r\n8:55 AM&lt;BR&gt;Subject: Re: [archive-crawler] Re: \n    Web crawler work ??&lt;BR&gt;&lt;=\r\nBR&gt;&lt;BR&gt;Gordon and Raymie,&lt;BR&gt;&lt;BR&gt;Here goes the \n    proposal for the asynch=\r\nronous DNS lookup API implementation.&lt;BR&gt;&lt;BR&gt;We shall \n    implement a mini=\r\nmal resolver which is capable of sending DNS request packets \n    and proce=\r\nssing response packets in an&lt;BR&gt;asynchrounous nio fashion. This \n    resolv=\r\ner class will contact a local name server and rely on it to do the \n    act=\r\nual lookup. The local&lt;BR&gt;name server will be configured to support \n    rec=\r\nursion and better would be to use a name server which does lookup \n    asyn=\r\nchronously. (&lt;BR&gt;SQUID has asynchronous DNS lookup facilities ).&nbsp; \n   =\r\n Even if the local name server is not asynchrounous, our java resolver \n   =\r\n being&lt;BR&gt;asynchronous will be good enough since our primary goal is that w=\r\ne \n    do not want any blocking code in our crawler implementation. This&lt;BR=\r\n&gt;idea \n    even sounds good considering the fact we would only reinvent the=\r\n same wheel \n    if we opt to implement a complete full-fledged&lt;BR&gt;resolver=\r\n implementation \n    which complies with the RFC 1035 and 1034. We can defi=\r\nnitely implement this \n    full-fledged resolver but the&lt;BR&gt;real concern is=\r\n that this would require a \n    lot of testing and the efforts to make it r=\r\nock solid in terms of robustness \n    would be huge.&lt;BR&gt;&lt;BR&gt;So, the various=\r\n jobs that we would have to do to build \n    our Simple Asynchronous DNS lo=\r\nokup API would be&lt;BR&gt;&nbsp;&nbsp;&nbsp; -- \n    Request packet formation an=\r\nd reply packet parsing in the exact RFC \n    format.&lt;BR&gt;&nbsp;&nbsp;&nbsp; =\r\n-- Use non-blocking IO APIs and do UDP. (We \n    might not need TCP since t=\r\nhe name server is only in the local \n    network.)&lt;BR&gt;&nbsp;&nbsp;&nbsp; --=\r\n Do canonical name queries and A record \n    queries.&lt;BR&gt;&nbsp;&nbsp;&nbsp;=\r\n -- Implement timeouts.&lt;BR&gt;&nbsp;&nbsp;&nbsp; \n    -- Implement caching bas=\r\ned on TTL. ( This may have to be deferred as pointed \n    by Raymie earlier=\r\n. )&lt;BR&gt;&nbsp;&nbsp;&nbsp; -- Integrate with \n    SEDA.&lt;BR&gt;&lt;BR&gt;Thanks,&lt;BR&gt;Re=\r\nddy&lt;BR&gt;&lt;BR&gt;----- Original Message -----&lt;BR&gt;From: \n    Gordon Mohr&lt;BR&gt;To: G.=\r\nB.Reddy&lt;BR&gt;Cc: Raymie Stata ; \n    wcr-team@... ; archive-cr=\r\nawler@yahoogroups.com&lt;BR&gt;Sent: \n    Saturday, February 22, 2003 5:37 AM&lt;BR&gt;=\r\nSubject: [archive-crawler] Re: Web \n    crawler work ??&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;[CC&#39;ing =\r\nto \n    archive-crawler@yahoogroups.com]&lt;BR&gt;&lt;BR&gt;Reddy writes:&lt;BR&gt;&lt;BR&gt;&gt; O=\r\nn the \n    first cut do we need to look at implementing an asynchronous DNS=\r\n&lt;BR&gt;&gt; \n    lookup mechanism. If we are not, then it is going to be two s=\r\ntages, \n    viz.&lt;BR&gt;&gt; DNSCacheHandlingStage and ResolvingStage, that can=\r\n be employed \n    using the&lt;BR&gt;&gt; blocking DNS lookup calls in Java. The =\r\nfirst stage, \n    DNSCacheHandlingStage,&lt;BR&gt;&gt; would check if the entry i=\r\ns available in the \n    cache. If available, he would&lt;BR&gt;&gt; set the resol=\r\nved address in the \n    CrawlURI object and enqueue it to the&lt;BR&gt;&gt; appro=\r\npriate next stage. If the \n    cache doesn&#39;t contain the entry, then he&lt;BR&gt;=\r\n&gt; would pass the request to \n    the Resolving stage which would call th=\r\ne&lt;BR&gt;&gt; InetAddress.getByName \n    blocking method to resolve it. The get=\r\nByName result&lt;BR&gt;&gt; would be set in \n    the CrawlURI object as before an=\r\nd enqueued into the&lt;BR&gt;&gt; appropriate next \n    stage. In addition to thi=\r\ns, the Resolving stage will&lt;BR&gt;&gt; enqueue another \n    event into the DNS=\r\nCacheHandlingStage to enable him update&lt;BR&gt;&gt; his cache. \n    So, the DNS=\r\nCacheHandlingStage would be handling two types of&lt;BR&gt;&gt; events, \n    one =\r\nis the lookup events and the other is the update cache \n    events.&lt;BR&gt;&gt;=\r\n&lt;BR&gt;&gt; One problem here is that the InetAddress class does \n    not expos=\r\ne its cache&lt;BR&gt;&gt; variables to its users. Even we cannot check if \n    th=\r\ne cache has an entry&lt;BR&gt;&gt; before calling the getByName method. So, we \n =\r\n   should be disabling the java&lt;BR&gt;&gt; cache ( using the policy file ) and=\r\n \n    implementing our own caching mechanism.&lt;BR&gt;&gt; ( The DNSCacheHandlin=\r\ngStage \n    would have to additionally do the job of&lt;BR&gt;&gt; throwing away =\r\nthe expired \n    entries in the cache also.)&lt;BR&gt;&gt;&lt;BR&gt;&gt; Let me know yo=\r\nur comments on \n    this.&lt;BR&gt;&lt;BR&gt;This looks like a good first cut. I&#39;m stil=\r\nl working to improve \n    my&lt;BR&gt;understanding of the best way to use the st=\r\naged style, mostly \n    by&lt;BR&gt;looking at their HTTP and HTTP Server (Haboob=\r\n) code.&lt;BR&gt;&lt;BR&gt;It seems \n    that they&#39;ve tended to use a single Stage obje=\r\nct to do&lt;BR&gt;many different \n    steps/aspects of one process, by switching =\r\non the&lt;BR&gt;type of QueueElement \n    received.&lt;BR&gt;&lt;BR&gt;So for example their \n=\r\n    seda.sandStorm.seda.apps.Haboob.http.HttpRecv&lt;BR&gt;accepts events of \n   =\r\n types....&lt;BR&gt;&lt;BR&gt;&nbsp; - httpConnection&lt;BR&gt;&nbsp; - httpRequest&lt;BR&gt;&nbsp;=\r\n - \n    SinkClosedEvent&lt;BR&gt;&nbsp; - timerEvent&lt;BR&gt;&lt;BR&gt;And their \n    seda.s=\r\nandStorm.lib.http.httpServer accepts events \n    of&lt;BR&gt;types...&lt;BR&gt;&lt;BR&gt;&nbs=\r\np; - ATcpInPacket&lt;BR&gt;&nbsp; - \n    ATcpConnection&lt;BR&gt;&nbsp; - aSocketErrorE=\r\nvent&lt;BR&gt;&nbsp; - \n    SinkDrainedEvent&lt;BR&gt;&nbsp; - SinkCloggedEvent&lt;BR&gt;&nbs=\r\np; - \n    SinkClosedEvent&lt;BR&gt;&nbsp; - ATcpListenSuccessEvent&lt;BR&gt;&lt;BR&gt;They al=\r\nso use \n    Sinks that are not associated with stages; rather,&lt;BR&gt;they inte=\r\nrface to \n    unstaged components which nonetheless result in&lt;BR&gt;an eventua=\r\nl event to some \n    supplied answer Sink. See for \n    example&lt;BR&gt;seda.san=\r\ndStorm.lib.http.httpConnection.&lt;BR&gt;&lt;BR&gt;So perhaps as a \n    matter of group=\r\ning related tasks, the same Stage object&lt;BR&gt;should be \n    re-entered over =\r\nthe course of a lookup, with different triggering&lt;BR&gt;events. \n    For examp=\r\nle, you might want to reenter a single DNSResolvingStage&lt;BR&gt;over \n    the c=\r\nourse of cache lookup, lookup-initiation, result-receiving \n    (or&lt;BR&gt;time=\r\nout), etc. I&#39;m not sure; use your judgement as to how many stages \n    are&lt;=\r\nBR&gt;really needed.&lt;BR&gt;&lt;BR&gt;&gt; P.S : We found some openly available async \n =\r\n   dns client APIs in C language.&lt;BR&gt;&lt;BR&gt;That could be useful as a model. (=\r\nI \n    doubt we&#39;d want to call out to C&lt;BR&gt;for this simple step, though -- =\r\nand if \n    we nailed down a truly async Java&lt;BR&gt;DNS facility, a lot of ope=\r\nn source \n    projects would probably be quite happy.)&lt;BR&gt;&lt;BR&gt;Also: I heard=\r\n back from \n    Patrick Eaton about SEDA-style async HTTP client&lt;BR&gt;code...=\r\n he has a rough \n    implementation for simple usage, and he knows of&lt;BR&gt;an=\r\nother one at Berkeley \n    which goes deeper into HTTP/1.1 conformance and&lt;=\r\nBR&gt;optimal performance. I&#39;ve \n    asked him to forward whatever additional =\r\ncode&lt;BR&gt;or details he can.&lt;BR&gt;&lt;BR&gt;- \n    Gordon&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;To unsub=\r\nscribe from this group, send an email \n    to:&lt;BR&gt;archive-crawler-unsubscri=\r\nbe@yahoogroups.com&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Your use \n    of Yahoo! Groups is subject=\r\n to the Yahoo! Terms of \n    Service.&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Yahoo! Groups \n    Sponsor=\r\n&lt;BR&gt;ADVERTISEMENT&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;To unsubscribe from this group, \n    s=\r\nend an email \n    to:&lt;BR&gt;archive-crawler-unsubscribe@yahoogroups.com&lt;BR&gt;&lt;BR=\r\n&gt;&lt;BR&gt;&lt;BR&gt;Your use \n    of Yahoo! Groups is subject to the Yahoo! Terms of S=\r\nervice.&lt;BR&gt;&lt;BR&gt;&lt;/TT&gt;&lt;BR&gt;&lt;BR&gt;&lt;TT&gt;To \n    unsubscribe from this group, send a=\r\nn email \n    to:&lt;BR&gt;archive-crawler-unsubscribe@yahoogroups.com&lt;BR&gt;&lt;BR&gt;&lt;/TT=\r\n&gt;&lt;BR&gt;&lt;BR&gt;&lt;TT&gt;Your \n    use of Yahoo! Groups is subject to the &lt;A \n    href=\r\n=3D&quot;http://docs.yahoo.com/info/terms/&quot;&gt;Yahoo! Terms of Service&lt;/A&gt;.&lt;/TT&gt; \n =\r\n   &lt;BR&gt;&lt;/BLOCKQUOTE&gt;&lt;/BLOCKQUOTE&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n\r\n------=_NextPart_000_1161_01C2E4F5.1612B380--\r\n\n"}}