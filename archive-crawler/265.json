{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":163406187,"authorName":"kris@archive.org","from":"kris@...","profile":"kristsi25","replyTo":"LIST","senderId":"zA-u2OGFuZk2_75UwN1l3C7hX-emf4jOyGc9FiQ-fpVBkAHgO_q0hvubzgJ1xATJ7OFzOY1T6g","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] Heritrix Checkpointing High-Level Design","postDate":"1075156034","msgId":265,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDEwNzUxNTYwMzQuNDAxNTk0NDJjMmEyOUBtYWlsLWRldi5hcmNoaXZlLm9yZz4=","inReplyToHeader":"PDQwMTU5MTgzLjUwNTAwMDZAYXJjaGl2ZS5vcmc+","referencesHeader":"PDQwMERBMjRELjMwMjA0MDNAYXJjaGl2ZS5vcmc+IDw0MDEwODU2OS42MDYwMUBhcmNoaXZlLm9yZz4gPDQwMTE3QjJCLjUwNDAwQGFyY2hpdmUub3JnPiA8MTA3NDg5MjQ0OC40MDExOGVhMDNlY2QxQG1haWwtZGV2LmFyY2hpdmUub3JnPiA8NDAxNTkxODMuNTA1MDAwNkBhcmNoaXZlLm9yZz4="},"prevInTopic":264,"nextInTopic":266,"prevInTime":264,"nextInTime":266,"topicId":244,"numMessagesInTopic":13,"msgSnippet":"... Perhaps, and if there was no other job running, it would immediately run. But I was thinking that we might want to offer the option to suspend a job and","rawEmail":"Return-Path: &lt;kris@...&gt;\r\nX-Sender: kris@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 56667 invoked from network); 26 Jan 2004 22:29:47 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m6.grp.scd.yahoo.com with QMQP; 26 Jan 2004 22:29:47 -0000\r\nReceived: from unknown (HELO ia00524.archive.org) (209.237.232.202)\n  by mta2.grp.scd.yahoo.com with SMTP; 26 Jan 2004 22:29:47 -0000\r\nReceived: (qmail 26810 invoked by uid 48); 26 Jan 2004 22:27:14 -0000\r\nReceived: from b116-dyn-55.archive.org (b116-dyn-55.archive.org [209.237.240.55]) \n\tby mail-dev.archive.org (IMP) with HTTP \n\tfor &lt;kris@...@localhost&gt;; Mon, 26 Jan 2004 14:27:14 -0800\r\nMessage-ID: &lt;1075156034.40159442c2a29@...&gt;\r\nDate: Mon, 26 Jan 2004 14:27:14 -0800\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;400DA24D.3020403@...&gt; &lt;40108569.60601@...&gt; &lt;40117B2B.50400@...&gt; &lt;1074892448.40118ea03ecd1@...&gt; &lt;40159183.5050006@...&gt;\r\nIn-Reply-To: &lt;40159183.5050006@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 8bit\r\nUser-Agent: Internet Messaging Program (IMP) 3.2.1\r\nX-Spam-DCC: : \r\nX-Spam-Checker-Version: SpamAssassin 2.63 (2004-01-11) on ia00524.archive.org\r\nX-Spam-Level: \r\nX-Spam-Status: No, hits=0.3 required=6.0 tests=NO_REAL_NAME autolearn=no \n\tversion=2.63\r\nX-eGroups-Remote-IP: 209.237.232.202\r\nFrom: kris@...\r\nSubject: Re: [archive-crawler] Heritrix Checkpointing High-Level Design\r\nX-Yahoo-Group-Post: member; u=163406187\r\nX-Yahoo-Profile: kristsi25\r\n\r\nQuoting Gordon Mohr &lt;gojomo@...&gt;:\n\n&gt; \n&gt; kris@... wrote:\n&gt;  &gt; Another option here is that when we resume from a checkpoint it is handled\n&gt; like\n&gt;  &gt; any other job. Thus if the crawler was already running, it would simply be\n&gt;  &gt; prepared and put into the pending queue.\n&gt;  &gt;\n&gt;  &gt; Thus the process would be something like:\n&gt;  &gt; Load checkpoint, edit settings (optional), submit to CrawlJobHandler, job\n&gt;  &gt; resumes when it is it&#39;s turn (if no job is running, that would be at\n&gt; once).\n&gt; \n&gt; This would be very nice, although I don&#39;t know how often in practice\n&gt; an operator would want a resume-from-checkpoint that&#39;s waiting some\n&gt; (potentially indeterminate) amount of time before beginning. I expect\n&gt; resume-from-checkpoint scenarios will usually have some urgency.\n\nPerhaps, and if there was no other job running, it would immediately run. \nBut I was thinking that we might want to offer the option to suspend a job \nand let another (higher priority) run instead. In that case, we would checkpoint \nthe current job and terminate it. The higher priority job would run and we could\nimmediately &#39;load&#39; the checkpoint into the pending queue. This is not a high\npriority feature, but unless there is some compelling reason to always load \ncheckpoints directly to &#39;run&#39; status we should handle them like jobs and get a \nlot of versitility almost for free.\n \n&gt;  &gt;&gt;The CrawlController (which implements Checkpointable) is sent the\n&gt;  &gt;&gt;relevant messages. It propagates these to all components it\n&gt;  &gt;&gt;believes needs checkpointing. Those may further propagate the\n&gt;  &gt;&gt;messages. Any POJO can implement the interface, but that&#39;s no\n&gt;  &gt;&gt;guarantee it will be called; there&#39;s got to be a chain of\n&gt;  &gt;&gt;intentional calls from the CrawlController down.\n&gt;  &gt;\n&gt;  &gt; For consistency with existing code this should be done with the Event\n&gt; model.\n&gt; \n&gt; I&#39;m not sure; the checkpoint process will likely need to enforce a\n&gt; stronger sense of ordering than is typical when simply registering\n&gt; for a notification that an event (&quot;checkpoint begun&quot;, &quot;checkpoint\n&gt; ended&quot;) has occurred. A tighter coupling may be inevitable.\n\nOk.\n\n&gt;  &gt;&gt; &gt; (Is there a facilty for pausing a crawl or stopping a crawl?  If so,\n&gt; how\n&gt;  &gt;&gt; &gt; is that done?)\n&gt;  &gt;&gt;\n&gt;  &gt;&gt;The existing pause/terminate facility will be touched up as necessary;\n&gt;  &gt;&gt;I believe it currently sets a flag indicating that a pause or termination\n&gt;  &gt;&gt;has been requested, and lets the CrawlController control thread react.\n&gt;  &gt;\n&gt;  &gt; That is correct. The CrawlController basically stops new URIs from being\n&gt;  &gt; processed and eventually halt&#39;s the crawl. Currently if there is a thread\n&gt; that\n&gt;  &gt; &#39;hangs&#39; it will hang the entire pausing, making resumes impossible.\n&gt; \n&gt; The same progressively more-disruptive steps that a checkpoint would\n&gt; use to try to recover from an unresponsive thread should also be used\n&gt; for an operator-requested pause.\n\nAgreed. The posibility that at thread might hang indefinately was not considered\nwhen the current pause functionality was added.\n\n&gt; The last of these steps would not be &quot;killing&quot; a thread (an\n&gt; unsupported operation which could aggravate inconsistency problems).\n&gt; Rather, the problem URI and thread would be noted and logged, and a\n&gt; flag set which, if the thread ever emerges into an aware state, would\n&gt; indicate to abort normal wrapup procedures, minimizing its subsequent\n&gt; damage.\n\nMaybe if a thread hangs for a certain amount of time we &#39;write it off&#39;. That is\nremove it (it&#39;s reference that is) from the toe pool and launch a new thread to\nreplace it? If it ever does finish we could terminate fully it at that point.\n\n&gt; If a long-running JVM process suffered such last-ditch recovery\n&gt; procedures many times, a large number of zombie threads might\n&gt; stick around; a fresh restart and resume from checkpoint would\n&gt; be the recommended remedy.\n\nAh, the Microsoft way...\n\n&gt; \n&gt;  &gt;&gt; &gt; Is it completely up to the Checkpointable implementer how they\n&gt; checkpoint?\n&gt;  &gt;&gt;\n&gt;  &gt;&gt;Yes, though by convention, they should ensure all their state goes\n&gt;  &gt;&gt;into the designated checkpoint directory.\n&gt;  &gt;\n&gt;  &gt; I suggest that by default the checkpointing directory be a subdirectory of\n&gt; the\n&gt;  &gt; job directory. Thus it would be easy to see what job any checkpoint\n&gt; belongs to.\n&gt;  &gt; This should then be configurable in the crawl order.\n&gt; \n&gt; Yes, makes sense.\n&gt; \n&gt; - Gordon\n\n- Kris\n\n"}}