{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":4480673,"authorName":"Dave Skinner","from":"Dave Skinner &lt;dave@...&gt;","profile":"frodobay","replyTo":"LIST","senderId":"OFo6FSV5HUR1AUO70QWthbbAINlk4GsJGHMRVYd7F6Fy76-NY1U7u94I6rt6TtObqDEnCYlr6YPkP1rVsHD8oJJWyVY","spamInfo":{"isSpam":false,"reason":"0"},"subject":"a filter proposal","postDate":"1107808798","msgId":1522,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDYuMS4yLjAuMC4yMDA1MDIwNzExNDAwNy4wNDM0MjE0OEAyMDYuMTYzLjEwMy40Pg==","inReplyToHeader":"PDA2NzhEQjE5NjhFQUM3NDA5Q0MzRDBBQjdBMTFCODRBMDZFQzU3QHNrYXJmdXIuYm9rLmxvY2FsPg==","referencesHeader":"PDQyMDc5QTY0LjIwNjAyMDlAYXJjaGl2ZS5vcmc+IDwwNjc4REIxOTY4RUFDNzQwOUNDM0QwQUI3QTExQjg0QTA2RUM1N0Bza2FyZnVyLmJvay5sb2NhbD4="},"prevInTopic":1521,"nextInTopic":1523,"prevInTime":1521,"nextInTime":1523,"topicId":1452,"numMessagesInTopic":24,"msgSnippet":"I normally do broad crawls and use lots of special filters to limit the scope so that heritrix does not just run out of memory and crash.... However the","rawEmail":"Return-Path: &lt;dave@...&gt;\r\nX-Sender: dave@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 43102 invoked from network); 7 Feb 2005 20:40:03 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m22.grp.scd.yahoo.com with QMQP; 7 Feb 2005 20:40:03 -0000\r\nReceived: from unknown (HELO solid.net) (206.163.103.1)\n  by mta4.grp.scd.yahoo.com with SMTP; 7 Feb 2005 20:40:03 -0000\r\nReceived: from t_laptop.solid.net (or-65-40-222-124.dyn.sprint-hsd.net [65.40.222.124])\n\tby solid.net (8.12.8/8.12.8) with ESMTP id j17Ke1pi030209\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Mon, 7 Feb 2005 12:40:02 -0800\r\nMessage-Id: &lt;6.1.2.0.0.20050207114007.04342148@206.163.103.4&gt;\r\nX-Sender: dave@206.163.103.4 (Unverified)\r\nX-Mailer: QUALCOMM Windows Eudora Version 6.1.2.0\r\nDate: Mon, 07 Feb 2005 12:39:58 -0800\r\nTo: archive-crawler@yahoogroups.com\r\nIn-Reply-To: &lt;0678DB1968EAC7409CC3D0AB7A11B84A06EC57@...&gt;\r\nReferences: &lt;42079A64.2060209@...&gt;\n &lt;0678DB1968EAC7409CC3D0AB7A11B84A06EC57@...&gt;\r\nMime-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;us-ascii&quot;; format=flowed\r\nX-eGroups-Remote-IP: 206.163.103.1\r\nFrom: Dave Skinner &lt;dave@...&gt;\r\nSubject: a filter proposal\r\nX-Yahoo-Group-Post: member; u=4480673\r\nX-Yahoo-Profile: frodobay\r\n\r\nI normally do broad crawls and use lots of special filters to limit the \nscope so that heritrix does not just run out of memory and crash....\n\nHowever the internal issue that sometimes a filter normally returns true \nand sometime false is a problem for me and looking at the code and reading \nthings like the user and developer manual makes me think that I&#39;m not the \nonly person it has bothered.\n\nin a recent private email to me someone said\n\n&gt;Filters are not our proudest moment.  ..... was to have replaced the way \n&gt;they work by now.  Here is a writeup that was done on an alternative:\n&gt;http://crawler.archive.org/cgi-bin/wiki.pl?NewScopingModel.  We just \n&gt;haven&#39;t gotten around to it.\n\nThe proposal would be a great thing to have implemented, but it looks to me \nthat it has about as much work in it as some master thesis projects and its \ngoing to be hard to get someone to do it.\n\nI&#39;d like to propose something that would simplify things in the short term \nand hopefully make any future changes/testing easier.\n\nLet&#39;s change the definition of the result of filter to simply be\n\n*true* means to continue *normal processing*.\n\n(this compliments the result of the pre-fetch filters)\n\nI think everyone likely to read this knows what normal processing means but \njust to clarify what I think it means, let&#39;s say that normal processing is \nthat a URI progresses step by step thru the chain illustrated in the user \nmanual in section 6.1.3.\n\nAs an extension of this I&#39;d like say that a filter that has *enabled* set \nto false or is incompletely configured (for example a regexp filter with no \nfilter string) should normally return true.  (As an example of a current \nproblem related to this, just set enabled in the pathdepth filter \nconfigured in the default profile to false.)\n\nI was going to suggest this last week and post some sample code but had a \nmachine run out of disk storage while doing a crawl and linux instead of \njust crashing the job reused the disk space that was being occupied by \nrecently referenced files.  As a result of that problem I had to recover my \nsource and retest everything.\n\nAs part of that I downloaded the current head and implemented this (so now \nI have real code).  Right now it is working but I need to review the following.\n\nMost filters can use the &quot;return true&quot; if not enabled or configured idea \nexcept some filters used in scopes.  They may have a special problem which \nI&#39;m going to look at later today.\n\nThe following formula is in the user manual\n   ( ( focusFilter.accepts(u)\n         || transitiveFilter.accepts(u) )\n       && exclusionFilter.accepts(u) == false )\n\nThe accurate version of it is in the developer manual\n\nprotected final boolean innerAccepts(Object o) {\n     return ((isSeed(o) || focusAccepts(o)) || additionalFocusAccepts(o) ||\n             transitiveAccepts(o)) && !excludeAccepts(o);\n\nthe potential problem is in the focusAccepts and additionalFocusAccepts calls\n\nbtw, in my code I&#39;ve changed this equation to be\n\n   return (((isSeed(o) || focusAccepts(o)) || additionalFocusAccepts(o) ||\n             transitiveAccepts(o)) && excludeAccepts(o);\n\nI&#39;m not too worried if the focusAccepts have to remain special cases \nbecause end users are not too likely to be changing them.\n\nthe need for the &quot;OR&quot; filter has vanished.\n\nhere is the diff between the current profile in head and the proposed new one\n\n7,43c29,38\n&lt;       &lt;newObject name=&quot;exclude-filter&quot; \nclass=&quot;org.archive.crawler.filter.OrFilter&quot;&gt;\n&lt;         &lt;boolean name=&quot;enabled&quot;&gt;true&lt;/boolean&gt;\n&lt;         &lt;boolean name=&quot;if-matches-return&quot;&gt;true&lt;/boolean&gt;\n&lt;         &lt;map name=&quot;filters&quot;&gt;\n&lt;             &lt;newObject name=&quot;pathdepth&quot;\n&lt;                     class=&quot;org.archive.crawler.filter.PathDepthFilter&quot;&gt;\n&lt;                 &lt;boolean name=&quot;enabled&quot;&gt;true&lt;/boolean&gt;\n&lt;                 &lt;integer name=&quot;max-path-depth&quot;&gt;20&lt;/integer&gt;\n&lt;                 &lt;boolean name=&quot;path-less-or-equal-return&quot;&gt;false&lt;/boolean&gt;\n&lt;             &lt;/newObject&gt;\n&lt;             &lt;newObject name=&quot;pathologicalpath&quot;\n&lt; \nclass=&quot;org.archive.crawler.filter.PathologicalPathFilter&quot;&gt;\n&lt;                 &lt;boolean name=&quot;enabled&quot;&gt;true&lt;/boolean&gt;\n&lt;                 &lt;integer name=&quot;repetitions&quot;&gt;3&lt;/integer&gt;\n&lt;             &lt;/newObject&gt;\n&lt;         &lt;/map&gt;\n&lt;       &lt;/newObject&gt;\n---\n &gt;       &lt;map name=&quot;exclude-filters&quot;&gt;\n &gt;         &lt;newObject name=&quot;pathdepth&quot; \nclass=&quot;org.archive.crawler.filter.PathDepthFilter&quot;&gt;\n &gt;           &lt;boolean name=&quot;enabled&quot;&gt;true&lt;/boolean&gt;\n &gt;           &lt;integer name=&quot;max-path-depth&quot;&gt;20&lt;/integer&gt;\n &gt;         &lt;/newObject&gt;\n &gt;         &lt;newObject name=&quot;pathological&quot; \nclass=&quot;org.archive.crawler.filter.PathologicalPathFilter&quot;&gt;\n &gt;           &lt;boolean name=&quot;enabled&quot;&gt;true&lt;/boolean&gt;\n &gt;           &lt;integer name=&quot;repetitions&quot;&gt;3&lt;/integer&gt;\n &gt;         &lt;/newObject&gt;\n &gt;       &lt;/map&gt;\n\nI&#39;d post code or diff&#39;s but there is just too much to post all of it and \nuntil there is some discussion about it I would not know what to use for \nexamples...  and right now some of it looks hacked (I did not delete the \nprevious code, I usually just commented it out and its full of print \nstatements), I need to clean it up.\n\nI&#39;m serious enough about this that if someone is using special filters and \ndoes not have a programmer available to change or test them, I&#39;ll do it for \nthem.\n\n\nDave Skinner   dave at solid dot net\n    High Performance Programming---assembly (lots of them), C, java, perl\n    Database and Non-trivial web site implementations\n    Real-time and embedded systems are my specialty\n\n\n\n"}}