{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":137285340,"authorName":"Gordon Mohr","from":"Gordon Mohr &lt;gojomo@...&gt;","profile":"gojomo","replyTo":"LIST","senderId":"XdaKPxOJEjMEHbO2kMinjFsd29ielko4-hbvUf69sbfGIuA9s4L7koqUxg72U15clVNd4qnunEM2yPmUQFNiySls_Nsf2zU","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] bug in AbstractLongFPSet","postDate":"1074721705","msgId":254,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQwMEVGM0E5LjMwNTAxMDhAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDQwMEU5MkE2LjQwMjAzMDFAamFtZXNjLm5ldD4=","referencesHeader":"PDQwMEU5MkE2LjQwMjAzMDFAamFtZXNjLm5ldD4="},"prevInTopic":250,"nextInTopic":255,"prevInTime":253,"nextInTime":255,"topicId":250,"numMessagesInTopic":3,"msgSnippet":"Great bug find! My preferred fix is: (1) Avoid incrementing count until the value is actually added (after the makeSpace() call) (2) Use count+1 as the","rawEmail":"Return-Path: &lt;gojomo@...&gt;\r\nX-Sender: gojomo@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 45381 invoked from network); 21 Jan 2004 21:48:28 -0000\r\nReceived: from unknown (66.218.66.218)\n  by m4.grp.scd.yahoo.com with QMQP; 21 Jan 2004 21:48:28 -0000\r\nReceived: from unknown (HELO ia00524.archive.org) (209.237.232.202)\n  by mta3.grp.scd.yahoo.com with SMTP; 21 Jan 2004 21:48:28 -0000\r\nReceived: (qmail 22051 invoked by uid 100); 21 Jan 2004 21:46:15 -0000\r\nReceived: from b116-dyn-43.archive.org (HELO archive.org) (gojomo@...@209.237.240.43)\n  by mail-dev.archive.org with SMTP; 21 Jan 2004 21:46:15 -0000\r\nMessage-ID: &lt;400EF3A9.3050108@...&gt;\r\nDate: Wed, 21 Jan 2004 13:48:25 -0800\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.6b) Gecko/20031205 Thunderbird/0.4\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;400E92A6.4020301@...&gt;\r\nIn-Reply-To: &lt;400E92A6.4020301@...&gt;\r\nContent-Type: text/plain; charset=us-ascii; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-Spam-DCC: : \r\nX-Spam-Checker-Version: SpamAssassin 2.63 (2004-01-11) on ia00524.archive.org\r\nX-Spam-Level: \r\nX-Spam-Status: No, hits=-3.7 required=6.0 tests=AWL,BAYES_00 autolearn=ham \n\tversion=2.63\r\nX-eGroups-Remote-IP: 209.237.232.202\r\nFrom: Gordon Mohr &lt;gojomo@...&gt;\r\nSubject: Re: [archive-crawler] bug in AbstractLongFPSet\r\nX-Yahoo-Group-Post: member; u=137285340\r\nX-Yahoo-Profile: gojomo\r\n\r\nGreat bug find!\n\nMy preferred fix is:\n\n  (1) Avoid incrementing &#39;count&#39; until the value is\n      actually added (after the makeSpace() call)\n  (2) Use &#39;count+1&#39; as the test value for whether the\n      underlying storage array needs space made.\n\nI&#39;ve committed the fix, and bumped up the NUM of\nadds/removes to test in MemLongFPSetTest to exercise\nthe old problem and new fix.\n\nThe new add() method is appended below.\n\nYour hierarchy of tests is laid out very well to\ncover the class hierarchy. Thanks!\n\n- Gordon\n\n=== as changed ===\n\n     /** Add the given value to this set\n      *\n      * @see org.archive.util.LongFPSet#add(long)\n      */\n     public boolean add(long val) {\n         logger.finest(&quot;Adding &quot; + val);\n         long i = indexFor(val);\n         if (slotHasData(i)) {\n             // positive index indicates already in set\n             return false;\n         }\n         // we have a possible slot now, which is encoded as a negative number\n\n         // check for space, and grow if needed\n         if ((count + 1) &gt; (loadFactor * (1 &lt;&lt; capacityPowerOfTwo))) {\n             makeSpace();\n             // find new i\n             i = indexFor(val);\n             assert i &lt; 0 : &quot;slot should be empty&quot;;\n         }\n\n         i = asDataSlot(i); // convert to positive index\n         setAt(i, val);\n         count++;\n         noteAccess(i);\n         return true;\n     }\n\n"}}