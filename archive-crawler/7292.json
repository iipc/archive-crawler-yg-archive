{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":325624130,"authorName":"Noah Levitt","from":"Noah Levitt &lt;nlevitt@...&gt;","profile":"nlevitt","replyTo":"LIST","senderId":"ALLxRMzjDbLLhq1x8TbQ7OjJKEoPLrLf6xau3MNWrxEThO67acUugsYlMMVvIH-kjTSIca1NS7sW_JAxzcBMhbjJejWPtkQc","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [archive-crawler] Problems with a custom module","postDate":"1314065378","msgId":7292,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDRFNTMwQkUyLjkwMDAyMDVAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDRFNTA3QUQyLjUwMzA0MDFAZ21haWwuY29tPg==","referencesHeader":"PDRFNTA3QUQyLjUwMzA0MDFAZ21haWwuY29tPg=="},"prevInTopic":7289,"nextInTopic":7293,"prevInTime":7291,"nextInTime":7293,"topicId":7289,"numMessagesInTopic":3,"msgSnippet":"Hello Pedro, From this information it s hard to know what the problem might be. If I were you I would try to pinpoint the problem, either by stepping through ","rawEmail":"Return-Path: &lt;nlevitt@...&gt;\r\nX-Sender: nlevitt@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nX-Received: (qmail 89271 invoked from network); 23 Aug 2011 02:09:39 -0000\r\nX-Received: from unknown (98.137.34.44)\n  by m2.grp.sp2.yahoo.com with QMQP; 23 Aug 2011 02:09:39 -0000\r\nX-Received: from unknown (HELO mail.archive.org) (207.241.224.6)\n  by mta1.grp.sp2.yahoo.com with SMTP; 23 Aug 2011 02:09:39 -0000\r\nX-Received: from localhost (localhost [127.0.0.1])\n\tby mail.archive.org (Postfix) with ESMTP id BB3A16841041;\n\tMon, 22 Aug 2011 19:09:37 -0700 (PDT)\r\nX-Received: from mail.archive.org ([127.0.0.1])\n\tby localhost (mail.archive.org [127.0.0.1]) (amavisd-new, port 10024)\n\twith LMTP id PkmjcQhZ5T7s; Mon, 22 Aug 2011 19:09:36 -0700 (PDT)\r\nX-Received: from [208.70.27.155] (desktop-nlevitt.sf.archive.org [208.70.27.155])\n\tby mail.archive.org (Postfix) with ESMTPSA id 0ECCC68410AD;\n\tMon, 22 Aug 2011 19:09:36 -0700 (PDT)\r\nMessage-ID: &lt;4E530BE2.9000205@...&gt;\r\nDate: Mon, 22 Aug 2011 19:09:38 -0700\r\nUser-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.18) Gecko/20110617 Thunderbird/3.1.11\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nCc: Pedro Pinheiro &lt;prppedro@...&gt;\r\nReferences: &lt;4E507AD2.5030401@...&gt;\r\nIn-Reply-To: &lt;4E507AD2.5030401@...&gt;\r\nContent-Type: multipart/alternative;\n boundary=&quot;------------050608030304010401030500&quot;\r\nX-eGroups-Msg-Info: 1:12:0:0:0\r\nFrom: Noah Levitt &lt;nlevitt@...&gt;\r\nSubject: Re: [archive-crawler] Problems with a custom module\r\nX-Yahoo-Group-Post: member; u=325624130; y=Dn0YPSUrOD81LDYvrn-_BexD9yNMLKNDw3-uLyDrHrYBrg\r\nX-Yahoo-Profile: nlevitt\r\n\r\n\r\n--------------050608030304010401030500\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\n\r\nHello Pedro,\n\n From this information it&#39;s hard to know what the problem might be. If I \nwere you I would try to pinpoint the problem, either by stepping through \nin a debugger or by adding logging statements. First thing is to confirm \nthat your processor is being invoked in the first place.\n\nThis shouldn&#39;t be related to the problem you&#39;ve described, but you might \nwant to use a database connection pool. Opening a new connection each \ntime is probably not optimal.\n\nNoah\n\nOn 08/20/2011 08:26 PM, Pedro Pinheiro wrote:\n&gt;\n&gt;\n&gt; Hi, all...\n&gt;\n&gt; I&#39;ve made a custom writer processor that uses JDBC Writer. Well... In \n&gt; reality my code is 90% pasted from another JDBC writes, because I&#39;m \n&gt; studying Java and wanted to change some variable names in order to \n&gt; make the code more familiar to me.\n&gt;\n&gt; Finally, I used Maven-1.0.2 to compile all the thing. It took 19 \n&gt; minutes, with no errors, at least in MySQLWriterProcessor. The source \n&gt; was from version 1.14.4 of Heritrix.\n&gt;\n&gt; After this, in order to get the crawler working with less effort, I \n&gt; simple copied the jar to the actual Heritrix folder, as well as the \n&gt; JDBC lib to the lib folder, without &quot;messing up with binaries&quot;, how \n&gt; stated by the developer manual.\n&gt;\n&gt; Everything went okay, and the crawler started with no Execptions. I&#39;ve \n&gt; created the job, selected MySQLWriterProcessor, adjusted settings and \n&gt; started the job. Well, everything works, except the writer. The table \n&gt; &#39;heritrix&#39;, expected to receive all the data remain empty, and the job \n&gt; returns no error, despise the fact that the code are prepared to catch \n&gt; some kinds of exception, including SQL ones.\n&gt;\n&gt; Well, here is the code:\n&gt;\n&gt; package org.archive.crawler.writer;\n&gt;\n&gt; import java.io.IOException;\n&gt; import java.io.InputStream;\n&gt; import java.io.ByteArrayOutputStream;\n&gt; import java.util.concurrent.atomic.AtomicInteger;\n&gt; import java.util.logging.Level;\n&gt; import java.util.logging.Logger;\n&gt; import java.sql.Connection;\n&gt; import java.sql.DriverManager;\n&gt; import java.sql.PreparedStatement;\n&gt; import java.sql.ResultSet;\n&gt; import java.sql.SQLException;\n&gt; import java.sql.Statement;\n&gt;\n&gt; import org.apache.commons.io.IOUtils;\n&gt; import org.archive.crawler.datamodel.CoreAttributeConstants;\n&gt; import org.archive.crawler.datamodel.CrawlURI;\n&gt; import org.archive.crawler.datamodel.FetchStatusCodes;\n&gt; import org.archive.crawler.framework.Processor;\n&gt; import org.archive.crawler.settings.SimpleType;\n&gt; import org.archive.crawler.event.CrawlStatusListener;\n&gt; import org.archive.crawler.framework.WriterPoolProcessor;\n&gt; import org.archive.io.ReplayInputStream;\n&gt; import org.archive.io.RecordingInputStream;\n&gt; import org.archive.io.WriterPoolMember;\n&gt; import org.archive.io.WriterPoolSettings;\n&gt; import org.archive.net.UURI;\n&gt;\n&gt; /**\n&gt;  * Processor module that writes the results of successful fetches to\n&gt;  * Database via JDBC.\n&gt;  *\n&gt;  * @author zhousp( zhousp@...)\n&gt;  */\n&gt;\n&gt; public class MySQLWriterProcessor extends Processor\n&gt;     implements CoreAttributeConstants {\n&gt;\n&gt;     private static Logger logger =\n&gt;         Logger.getLogger(MySQLWriterProcessor.class.getName());\n&gt;\n&gt;     public static final String ATTR_MYSQL_DATABASE = &quot;Database&quot;;\n&gt;     public static final String ATTR_MYSQL_USERNAME = &quot;User&quot;;\n&gt;     public static final String ATTR_MYSQL_PASSWORD = &quot;Password&quot;;\n&gt;     public static final String ATTR_MYSQL_HOSTNAME = &quot;Hostname:Port&quot;;\n&gt;\n&gt;     public MySQLWriterProcessor(String nome){\n&gt;         super(nome,&quot;MySQL Writer Processor:&quot; + &quot; An index generator. &quot;);\n&gt;         addElementToDefinition(new SimpleType(ATTR_MYSQL_DATABASE,\n&gt;             &quot;MySQL Database&quot;, &quot;mungo&quot;));\n&gt;         addElementToDefinition(new SimpleType(ATTR_MYSQL_USERNAME,\n&gt;             &quot;MySQL Username&quot;, &quot;root&quot;));\n&gt;         addElementToDefinition(new SimpleType(ATTR_MYSQL_PASSWORD,\n&gt;             &quot;MySQL Password&quot;, &quot;pass&quot;));\n&gt;         addElementToDefinition(new SimpleType(ATTR_MYSQL_HOSTNAME,\n&gt;             &quot;MySQL Hostname:Port&quot;, &quot;localhost:3306&quot;));\n&gt;     }\n&gt;\n&gt;     protected void innerProccess(CrawlURI cury) {\n&gt;         if (!cury.isSuccess()) {\n&gt;             return;\n&gt;         }\n&gt;         UURI curyProtocol = cury.getUURI();\n&gt;\n&gt;         String uriTemplate = curyProtocol.getScheme();\n&gt;\n&gt;         if (!&quot;http&quot;.equalsIgnoreCase(uriTemplate) &&\n&gt;             !&quot;https&quot;.equalsIgnoreCase(uriTemplate)) {\n&gt;             return;\n&gt;         }\n&gt;\n&gt;         String contentType = cury.getContentType();\n&gt;\n&gt;         if (!&quot;text/html&quot;.equalsIgnoreCase(contentType) &&\n&gt;             !&quot;rss&quot;.equalsIgnoreCase(contentType) &&\n&gt;             !&quot;atom&quot;.equalsIgnoreCase(contentType) || contentType == \n&gt; null) {\n&gt;                 return;\n&gt;         }\n&gt;\n&gt;         RecordingInputStream recis = \n&gt; cury.getHttpRecorder().getRecordedInput();\n&gt;         long length = recis.getResponseContentLength();\n&gt;         if (1 &gt; length) {\n&gt;             return;\n&gt;         }\n&gt;\n&gt;         try {\n&gt;             toDatabase(cury);\n&gt;         } catch (IOException problem) {\n&gt;             logger.warning(problem.getLocalizedMessage());\n&gt;         }\n&gt;     }\n&gt;\n&gt;     /* Code core */\n&gt;\n&gt;     private void toDatabase(CrawlURI curyDatabase) throws IOException {\n&gt;         ReplayInputStream playis =\n&gt;         \n&gt; curyDatabase.getHttpRecorder().getRecordedInput().getContentReplayInputStream(); \n&gt;\n&gt;         ByteArrayOutputStream sContent = new ByteArrayOutputStream();\n&gt;\n&gt;         try {\n&gt;             playis.readContentTo(sContent);\n&gt;         } finally {\n&gt;             playis.close();\n&gt;         }\n&gt;\n&gt;        Connection conn = null;\n&gt;         PreparedStatement stat = null;\n&gt;\n&gt;         try {\n&gt;             Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\n&gt;             conn = DriverManager.getConnection(&quot;jdbc:mysql://&quot; +\n&gt;                 ATTR_MYSQL_HOSTNAME + &quot;/&quot; + ATTR_MYSQL_DATABASE + &quot;?&quot; +\n&gt;                 &quot;user=&quot; + ATTR_MYSQL_USERNAME + &quot;password=&quot; +\n&gt;                 ATTR_MYSQL_PASSWORD);\n&gt;\n&gt;             stat = conn.prepareStatement(&quot;INSERT into \n&gt; heritrix(server,url,puro,cache)&quot; +\n&gt;                 &quot;  VALUES ?,?,?,?,?&quot;);\n&gt;             //stmt = conn.prepareStatement(&quot;insert into news \n&gt; (site,url,content) values(?,?,?)&quot;);\n&gt;\n&gt;             stat.setString(1, curyDatabase.getUURI().getHost());\n&gt;             stat.setString(2, curyDatabase.getUURI().getURI());\n&gt;             stat.setString(4, removeHtmlTag(sContent.toString()));\n&gt;             stat.setString(5, sContent.toString());\n&gt;\n&gt;             stat.executeUpdate();\n&gt;\n&gt;             stat.close();\n&gt;             conn.close();\n&gt;         } catch (SQLException sqlerror) {\n&gt;             logger.warning(sqlerror.getLocalizedMessage());\n&gt;         } catch (ClassNotFoundException e) {\n&gt;             logger.warning(e.getLocalizedMessage());\n&gt;         } finally {\n&gt;             if (conn != null) {\n&gt;                 try {\n&gt;                     conn.close();\n&gt;                 } catch (SQLException sqlerror) {\n&gt;                     logger.warning(sqlerror.getLocalizedMessage());\n&gt;                 }\n&gt;             }\n&gt;             if (stat != null) {\n&gt;                 try {\n&gt;                     stat.close();\n&gt;                 } catch (SQLException sqlerror) {\n&gt;                     logger.warning(sqlerror.getLocalizedMessage());\n&gt;                 }\n&gt;             }\n&gt;         }\n&gt;     }\n&gt;\n&gt;         /**\n&gt;      * remove html tag\n&gt;      *\n&gt;      * @param src source\n&gt;      * @return plain text\n&gt;      */\n&gt;     private String removeHtmlTag(String src) {\n&gt;         boolean tagbegin = false;\n&gt;         StringBuffer sb = new StringBuffer();\n&gt;         for (int i = 0; i &lt; src.length(); i++) {\n&gt;             if (src.substring(i, i + 1).equals(&quot;&lt;&quot;)) {\n&gt;                 tagbegin = true;\n&gt;             } else if (src.substring(i, i + 1).equals(&quot;&gt;&quot;)) {\n&gt;                 tagbegin = false;\n&gt;             } else {\n&gt;                 if (!tagbegin) {\n&gt;                     sb.append(src.substring(i, i + 1));\n&gt;                 }\n&gt;             }\n&gt;         }\n&gt;         return sb.toString();\n&gt;     }\n&gt; }\n&gt;\n&gt; P.S.: Sorry for my bad English, actually, I still learning this language.\n&gt;\n&gt; Att.,\n&gt; Pedro Pinheiro\n&gt; -- \n&gt; &quot;Seja sensato com um imbec�l, e ele te chamar� de imbec�l. &quot; -- Eur�pedes\n&gt;\n&gt; http://prppedro.blogspot.com\n&gt;\n&gt;\n&gt; \n\n\r\n--------------050608030304010401030500\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 7bit\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta content=&quot;text/html; charset=ISO-8859-1&quot;\n      http-equiv=&quot;Content-Type&quot;&gt;\n    &lt;title&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body bgcolor=&quot;#ffffff&quot; text=&quot;#000000&quot;&gt;\n    Hello Pedro,&lt;br&gt;\n    &lt;br&gt;\n    From this information it&#39;s hard to know what the problem might be.\n    If I were you I would try to pinpoint the problem, either by\n    stepping through in a debugger or by adding logging statements.\n    First thing is to confirm that your processor is being invoked in\n    the first place.&lt;br&gt;\n    &lt;br&gt;\n    This shouldn&#39;t be related to the problem you&#39;ve described, but you\n    might want to use a database connection pool. Opening a new\n    connection each time is probably not optimal.&lt;br&gt;\n    &lt;br&gt;\n    Noah&lt;br&gt;\n    &lt;br&gt;\n    On 08/20/2011 08:26 PM, Pedro Pinheiro wrote:\n    &lt;blockquote cite=&quot;mid:4E507AD2.5030401@...&quot; type=&quot;cite&quot;&gt;\n      &lt;style type=&quot;text/css&quot;&gt;\n&lt;!--\n\n/* start of attachment style */\n       .ygrp-photo-title{\n         clear: both;\n         font-size: smaller;\n         height: 15px;\n         overflow: hidden;\n         text-align: center;\n         width: 75px;\n       }\n       div.ygrp-photo{\n         background-position: center;\n         background-repeat: no-repeat;\n         background-color: white;\n         border: 1px solid black;\n         height: 62px;\n         width: 62px;\n       }\n\n       div.photo-title \n         a,\n         div.photo-title a:active,\n         div.photo-title a:hover,\n         div.photo-title a:visited {\n           text-decoration: none; \n       }\n\n       div.attach-table div.attach-row {\n         clear: both;\n       }\n\n       div.attach-table div.attach-row div {\n         float: left;\n         /* margin: 2px;*/\n       }\n\n       p {\n         clear: both;\n         padding: 15px 0 3px 0;\n\t overflow: hidden;\n       }\n\n       div.ygrp-file {\n         width: 30px;\n         valign: middle;\n       }\n       div.attach-table div.attach-row div div a {\n         text-decoration: none;\n       }\n\n       div.attach-table div.attach-row div div span {\n         font-weight: normal;\n       }\n\n       div.ygrp-file-title {\n         font-weight: bold;\n       }\n /* end of attachment style */\n        --&gt;\n        &lt;/style&gt;\n      &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;\n        charset=ISO-8859-1&quot;&gt;\n       Hi, all... &lt;br&gt;\n      &lt;br&gt;\n      I&#39;ve made a custom writer processor that uses JDBC Writer. Well...\n      In reality my code is 90% pasted from another JDBC writes, because\n      I&#39;m studying Java and wanted to change some variable names in\n      order to make the code more familiar to me. &lt;br&gt;\n      &lt;br&gt;\n      Finally, I used Maven-1.0.2 to compile all the thing. It took 19\n      minutes, with no errors, at least in MySQLWriterProcessor. The\n      source was from version 1.14.4 of Heritrix. &lt;br&gt;\n      &lt;br&gt;\n      After this, in order to get the crawler working with less effort,\n      I simple copied the jar to the actual Heritrix folder, as well as\n      the JDBC lib to the lib folder, without &quot;messing up with\n      binaries&quot;, how stated by the developer manual. &lt;br&gt;\n      &lt;br&gt;\n      Everything went okay, and the crawler started with no Execptions.\n      I&#39;ve created the job, selected MySQLWriterProcessor, adjusted\n      settings and started the job. Well, everything works, except the\n      writer. The table &#39;heritrix&#39;, expected to receive all the data\n      remain empty, and the job returns no error, despise the fact that\n      the code are prepared to catch some kinds of exception, including\n      SQL ones. &lt;br&gt;\n      &lt;br&gt;\n      Well, here is the code: &lt;br&gt;\n      &lt;font face=&quot;Courier New, Courier, monospace&quot;&gt;&lt;br&gt;\n        package org.archive.crawler.writer; &lt;br&gt;\n        &lt;br&gt;\n        import java.io.IOException;&lt;br&gt;\n        import java.io.InputStream;&lt;br&gt;\n        import java.io.ByteArrayOutputStream;&lt;br&gt;\n        import java.util.concurrent.atomic.AtomicInteger;&lt;br&gt;\n        import java.util.logging.Level;&lt;br&gt;\n        import java.util.logging.Logger;&lt;br&gt;\n        import java.sql.Connection;&lt;br&gt;\n        import java.sql.DriverManager;&lt;br&gt;\n        import java.sql.PreparedStatement;&lt;br&gt;\n        import java.sql.ResultSet;&lt;br&gt;\n        import java.sql.SQLException;&lt;br&gt;\n        import java.sql.Statement;&lt;br&gt;\n        &lt;br&gt;\n        import org.apache.commons.io.IOUtils;&lt;br&gt;\n        import org.archive.crawler.datamodel.CoreAttributeConstants;&lt;br&gt;\n        import org.archive.crawler.datamodel.CrawlURI;&lt;br&gt;\n        import org.archive.crawler.datamodel.FetchStatusCodes;&lt;br&gt;\n        import org.archive.crawler.framework.Processor;&lt;br&gt;\n        import org.archive.crawler.settings.SimpleType;&lt;br&gt;\n        import org.archive.crawler.event.CrawlStatusListener;&lt;br&gt;\n        import org.archive.crawler.framework.WriterPoolProcessor;&lt;br&gt;\n        import org.archive.io.ReplayInputStream;&lt;br&gt;\n        import org.archive.io.RecordingInputStream;&lt;br&gt;\n        import org.archive.io.WriterPoolMember;&lt;br&gt;\n        import org.archive.io.WriterPoolSettings; &lt;br&gt;\n        import org.archive.net.UURI;&lt;br&gt;\n        &lt;br&gt;\n        /**&lt;br&gt;\n        &nbsp;* Processor module that writes the results of successful\n        fetches to&lt;br&gt;\n        &nbsp;* Database via JDBC.&lt;br&gt;\n        &nbsp;*&lt;br&gt;\n        &nbsp;* @author zhousp( &lt;a moz-do-not-send=&quot;true&quot;\n          class=&quot;moz-txt-link-abbreviated&quot;\n          href=&quot;mailto:zhousp@...&quot;&gt;zhousp@...&lt;/a&gt;)&lt;br&gt;\n        &nbsp;*/&lt;br&gt;\n        &nbsp;&lt;br&gt;\n        public class MySQLWriterProcessor extends Processor &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; implements CoreAttributeConstants {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; private static Logger logger = &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Logger.getLogger(MySQLWriterProcessor.class.getName());\n        &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; public static final String ATTR_MYSQL_DATABASE = &quot;Database&quot;;&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; public static final String ATTR_MYSQL_USERNAME = &quot;User&quot;;&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; public static final String ATTR_MYSQL_PASSWORD = &quot;Password&quot;;\n        &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; public static final String ATTR_MYSQL_HOSTNAME =\n        &quot;Hostname:Port&quot;; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; public MySQLWriterProcessor(String nome){&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super(nome,&quot;MySQL Writer Processor:&quot; + &quot; An index\n        generator. &quot;); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addElementToDefinition(new\n        SimpleType(ATTR_MYSQL_DATABASE,&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MySQL Database&quot;, &quot;mungo&quot;)); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addElementToDefinition(new\n        SimpleType(ATTR_MYSQL_USERNAME,&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MySQL Username&quot;, &quot;root&quot;)); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addElementToDefinition(new\n        SimpleType(ATTR_MYSQL_PASSWORD,&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MySQL Password&quot;, &quot;pass&quot;)); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addElementToDefinition(new\n        SimpleType(ATTR_MYSQL_HOSTNAME,&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;MySQL Hostname:Port&quot;, &quot;localhost:3306&quot;)); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; protected void innerProccess(CrawlURI cury) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (!cury.isSuccess()) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UURI curyProtocol = cury.getUURI(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String uriTemplate = curyProtocol.getScheme(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!&quot;http&quot;.equalsIgnoreCase(uriTemplate) &amp;&amp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !&quot;https&quot;.equalsIgnoreCase(uriTemplate)) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String contentType = cury.getContentType(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!&quot;text/html&quot;.equalsIgnoreCase(contentType)\n        &amp;&amp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !&quot;rss&quot;.equalsIgnoreCase(contentType) &amp;&amp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !&quot;atom&quot;.equalsIgnoreCase(contentType) || contentType\n        == null) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RecordingInputStream recis =\n        cury.getHttpRecorder().getRecordedInput(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long length = recis.getResponseContentLength(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (1 &gt; length) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toDatabase(cury); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } catch (IOException problem) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; logger.warning(problem.getLocalizedMessage()); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; /* Code core */&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; private void toDatabase(CrawlURI curyDatabase) throws\n        IOException {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReplayInputStream playis = &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        curyDatabase.getHttpRecorder().getRecordedInput().getContentReplayInputStream();\n\n\n        &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByteArrayOutputStream sContent = new\n        ByteArrayOutputStream();&lt;br&gt;\n        &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; playis.readContentTo(sContent);&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } finally {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; playis.close();&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Connection conn = null;&nbsp;&nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; PreparedStatement stat = null; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Class.forName(&quot;com.mysql.jdbc.Driver&quot;); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; conn = DriverManager.getConnection(&quot;jdbc:mysql://&quot; +\n        &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ATTR_MYSQL_HOSTNAME + &quot;/&quot; + ATTR_MYSQL_DATABASE\n        + &quot;?&quot; + &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;user=&quot; + ATTR_MYSQL_USERNAME + &quot;password=&quot; + &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ATTR_MYSQL_PASSWORD); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stat = conn.prepareStatement(&quot;INSERT into\n        heritrix(server,url,puro,cache)&quot; +&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &quot;&nbsp; VALUES ?,?,?,?,?&quot;); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //stmt = conn.prepareStatement(&quot;insert into news\n        (site,url,content) values(?,?,?)&quot;); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stat.setString(1, curyDatabase.getUURI().getHost());\n        &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stat.setString(2, curyDatabase.getUURI().getURI());\n        &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stat.setString(4,\n        removeHtmlTag(sContent.toString())); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stat.setString(5, sContent.toString()); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stat.executeUpdate(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stat.close(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; conn.close(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } catch (SQLException sqlerror) {&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; logger.warning(sqlerror.getLocalizedMessage()); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } catch (ClassNotFoundException e) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; logger.warning(e.getLocalizedMessage());&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } finally { &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (conn != null) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; conn.close(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } catch (SQLException sqlerror) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;\n        logger.warning(sqlerror.getLocalizedMessage()); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (stat != null) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stat.close(); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } catch (SQLException sqlerror) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;\n        logger.warning(sqlerror.getLocalizedMessage()); &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; &lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /**&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp; * remove html tag&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp; *&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp; * @param src source&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp; * @return plain text&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp; */&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; private String removeHtmlTag(String src) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; boolean tagbegin = false;&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringBuffer sb = new StringBuffer();&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; src.length(); i++) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (src.substring(i, i + 1).equals(&quot;&lt;&quot;)) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tagbegin = true;&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if (src.substring(i, i + 1).equals(&quot;&gt;&quot;)) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tagbegin = false;&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!tagbegin) {&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sb.append(src.substring(i, i + 1));&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sb.toString();&lt;br&gt;\n        &nbsp;&nbsp;&nbsp; }&lt;br&gt;\n        }&lt;/font&gt;&lt;br&gt;\n      &lt;br&gt;\n      P.S.: Sorry for my bad English, actually, I still learning this\n      language. &lt;br&gt;\n      &lt;br&gt;\n      Att., &lt;br&gt;\n      Pedro Pinheiro&lt;br&gt;\n      &lt;pre class=&quot;moz-signature&quot; cols=&quot;72&quot;&gt;-- \n&quot;Seja sensato com um imbec&iacute;l, e ele te chamar&aacute; de imbec&iacute;l. &quot; -- Eur&iacute;pedes\n\n&lt;a moz-do-not-send=&quot;true&quot; class=&quot;moz-txt-link-freetext&quot; href=&quot;http://prppedro.blogspot.com&quot;&gt;http://prppedro.blogspot.com&lt;/a&gt;&lt;/pre&gt;\n      \n      &lt;div width=&quot;1&quot; style=&quot;color: white; clear: both;&quot;&gt;&lt;/div&gt;\n    &lt;/blockquote&gt;\n    &lt;br&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\r\n--------------050608030304010401030500--\r\n\n"}}