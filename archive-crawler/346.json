{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":172190008,"authorName":"Andrew Boyko","from":"&quot;Andrew Boyko&quot; &lt;aboy@...&gt;","profile":"andyboyko","replyTo":"LIST","senderId":"P3xCMnByHeu8OlW-A1NOHAaQpxH2uJBNAwol5-zBjgmbSnjV9akzVUhhWGW5IFc7epcWN0ssW0CdEEUigHQkRrTFqAM","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] FYI/ plan for post-1.0 scope definition\treworking","postDate":"1082993371","msgId":346,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PHMwOGNmMzNiLjAwM0Bsb2MuZ292Pg=="},"prevInTopic":345,"nextInTopic":0,"prevInTime":345,"nextInTime":347,"topicId":337,"numMessagesInTopic":3,"msgSnippet":"This proposal sounds very good. For better or worse, folks here are inclined to think in fairly intricate filtering terms, and making the filtering more","rawEmail":"Return-Path: &lt;aboy@...&gt;\r\nX-Sender: aboy@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 54346 invoked from network); 26 Apr 2004 15:27:32 -0000\r\nReceived: from unknown (66.218.66.172)\n  by m22.grp.scd.yahoo.com with QMQP; 26 Apr 2004 15:27:32 -0000\r\nReceived: from unknown (HELO loc.gov) (140.147.137.18)\n  by mta4.grp.scd.yahoo.com with SMTP; 26 Apr 2004 15:27:31 -0000\r\nReceived: from LCHub-MTA by loc.gov\n\twith Novell_GroupWise; Mon, 26 Apr 2004 11:32:11 -0400\r\nMessage-Id: &lt;s08cf33b.003@...&gt;\r\nX-Mailer: Novell GroupWise Internet Agent 6.5.1 \r\nDate: Mon, 26 Apr 2004 11:29:31 -0400\r\nTo: &lt;archive-crawler@yahoogroups.com&gt;\r\nMime-Version: 1.0\r\nContent-Type: multipart/alternative; boundary=&quot;=__Part446584CB.0__=&quot;\r\nX-eGroups-Remote-IP: 140.147.137.18\r\nFrom: &quot;Andrew Boyko&quot; &lt;aboy@...&gt;\r\nSubject: Re: [archive-crawler] FYI/ plan for post-1.0 scope definition\n\treworking\r\nX-Yahoo-Group-Post: member; u=172190008\r\nX-Yahoo-Profile: andyboyko\r\n\r\n\r\n--=__Part446584CB.0__=\r\nContent-Type: text/plain; charset=US-ASCII\r\nContent-Transfer-Encoding: 7bit\r\n\r\nThis proposal sounds very good. For better or worse, folks here\nare inclined to think in fairly intricate filtering terms, and making\nthe \nfiltering more expressive will help a lot. As Kaisa mentioned, some \nkind of boolean grouping of rules would be helpful (e.g. &quot;exclude if\nthis \nAND that&quot;). I also think the option to short-circuit after a rule \n(refinement #1) adds expressiveness. I&#39;m particularly interested in \nthe idea of adding scripting for extensibility, which I think could be\n\na way of generally addressing the ideas for adding structure and \nabstraction to the rule sets that you mention in refinements #2 and\n#3.\n \nAndy Boyko   aboy@...\n\n&gt;&gt;&gt; gojomo@... 4/23/2004 5:27:35 PM &gt;&gt;&gt;\nWe are planning a change in the way in which a crawl&#39;s scope --\nits definition of what URIs are included and excluded -- is\nmodelled and specified after the 1.0 Heritrix release. (That is\nto say, sometime in May or after.) The hope is to make alternate\nscope choices more understandable and flexible.\n\nThe new approach is somewhat like (and inspired by) HTTrack&#39;s\n&#39;scan rules&#39;/filters, Alexa&#39;s mask/ignore/void syntax for\nadjusting recurring crawls, or the Nutch &#39;regex-urlfilter&#39;\nfacility, but is a little more general than any of those.\n\nPRIOR APPROACH\n\nUp until now, our predefined Scope classes -- PathScope, HostScope,\nDomainScope, BroadScope -- all could be thought of as fitting a\nspecific pattern: A CandidateURI u is included if and only if:\n\n( ( focusFilter.accepts(u)\n| transitiveFilter.accepts(u) )\n&& ! exclusionFilter.accepts(u) )\n\nMore generally, the &#39;focus&#39; filter was meant to rule things in by\nprima facia/regexp-pattern analysis; the &#39;transitive&#39; filter\nrule extra items in by dynamic path analysis (for example, offsite\nembedded images); and the &#39;exclusion&#39; filter rule things out\nby any number of chained exclusion rules.\n\nSo in a typical crawl, the &#39;focus&#39; filter drew from one of these\ncategories:\n\nbroad: accept all\ndomain: accept if on same &#39;domain&#39; (for some definition) as seeds\nhost: accept if on exact host as seeds\npath: accept if on same host and a sahred path-prefix as seeds\n\nThe &#39;transitive&#39; filter was configured based on the various link-hops\nand embed-hops thresholds set by the operator.\n\nThe &#39;exclusion&#39; filter was in fact a compound chain of filters,\nOR&#39;ed together, such that any one of them could knock a URI out of\nconsideration.\n\nHowever, a number of aspects of this arrangement have caused problems:\n\n* To truly understand what happens to an URI, you must\nunderstand the above nested boolean-construct.\n* Adding mixed focuses -- such as all of this one host, all of\nthis other domain, and then just these paths on this other host --\nis not supported, nor easy to mix-in to the &#39;focus&#39; filter.\n* Constructing and configuring the multiple filters required\nmany setup steps across several web UI pages.\n* The reverse sense of the &#39;exclusion&#39; filters -- if URIs are\naccepted by the filter, they are excluded from teh crawl -- proved\nconfusing, exacerbated by the fact that &#39;filter&#39; itself can\ncommonly mean either &#39;filter in&#39; or &#39;filter out&#39;.\n\nNEW APPROACH\n\nWe are planning a new standard Scope model that should be easier to\nunderstand when used for simple, common crawls, as well as better\naccomodate certain &#39;mixed&#39; focus requirements. This model retains the\nidea that at the highest level, the &#39;Scope&#39; is a swappable,\nself-contained component that is consulted for a yes/no judgement on\nwhether or not a particular candidate URI is &#39;in scope&#39; for a crawl.\n\nIn the common case, though, we will think of the Scope is thought of\nas a series of ScopeRules. Each ScopeRule contains a Matcher and a\nScopeAction. A Matcher can be thought of as a Filter ranamed for\nclarity: it returns true if its conditions are matched. A\nScopeAction is (for now) either INCLUDE or EXCLUDE.\n\nTo define a Scope, the operator configures an ordered series of\nScopeRules. A URI under consideration begins with the assumed\nstatus EXCLUDED, but then each rule is applied in turn to the\ncandidate URI. If the rule&#39;s Matcher matches, then the supplied\naction is applied to the URI&#39;s current include/exclude status,\npossibly changing that status. After all rules have been applied,\nif the URI&#39;s status is INCLUDED it is &quot;in scope&quot; and scheduled\nfor crawling; if its status is EXCLUDED it is discarded.\n\nThere are no branches, but much of what nested conditionals\ncan achieve is possible, in a form that should be be easier to\nfollow than arbitrary expressions.\n\nThe list of available Matchers would include things like:\n\nsameDomainAsAnySeed()\nsameDomainAsAnyUriInFile(&quot;filename&quot;)\npathExtensionOf(&quot;http://www.berkeley.edu/research/&quot;)\nembeddedResourceWithinHops(3)\nregexpMatch(&quot;.*cgi-bin.*&quot;)\npathSlashesGreaterThan(10)\n\n...covering everything our existing focus- and filter-\nbased classes do. By ordering exclude and include actions,\ncombinations that were awkward before -- or even impossible\ngiven the current interface -- become straightforward.\n\nFor example, a previous request that was hard for us to\naccomodate was the idea: &quot;crawl exactly these X hosts,\nand get offsite images if only on the same domains.&quot; That is,\ndon&#39;t wander off the exact hosts to follow links, or even\nget offsite images -- except when the offsite image shares\nthe same domain.\n\nOur relevant function-of-seeds tests -- host-based and\ndomain-based -- were exclusive of each other (at the &#39;focus&#39;\nlevel) and difficult to mix-in with path-based criteria\n(at the &#39;transitive&#39; level).\n\nAs a series of ScopeRules, this can be achieved as:\n\nincludeIf(sameHostAsAnySeed())\nincludeIf(embeddedResourceWithinHops(1))\nexcludeIf(not(sameDomainAsAnySeed())\n\nFurther refinements to this basic model are possible:\n\n(1) Allow rules to offer more actions than include/exclude,\nsuch as an early exit from the rule chain. Then meeting\na certain test might mean &#39;exclude regardless of subsequent\nrules&#39; or &#39;include regardless of subsequent rules&#39;.\n(More speculative: let rules mark-up URIs in ways that\naffect their future scoping, processing, or the handling\nof other URIs discovered off them.) This sort of\nrefinement could allieviate the otherwise inefficient\ncalculation of ultimately irrelevant rules.\n\n(2) Segment the ScopeRules into 2 distinct chains: one\nchain that is &quot;core&quot; or perhaps &quot;static&quot; rules, defining\nthe main focus of the crawl, and another chain which approves\nrelated URIs dynamically. This would somewhat replicate\nthe intent of the &#39;focus&#39; vs. &#39;transitive&#39; split in the 1.0\nscope model, and make possible a Scope which says, &quot;get\nall this &#39;core&#39;, and then anything else within N link-hops\nof any &#39;core&#39; items.&quot; (Current link-hop limits apply from\nseeds, not from site boundaries.)\n\n(3) Allow a seedlist-annotation syntax to help create\nmixed scopes. For example, each URI listed in a seed\nfile might be followed with a label -- &#39;group1&#39;,\n&#39;group2&#39;, etc. This could then be used to refer back to\na URI set in Scope Rules -- sameHostAsSeeds(&quot;group1&quot;),\nsamePathAsSeeds(&quot;group2&quot;), etc.\n\n(4) As is suggested by the syntax for listing ScopeRules\nabove, they could be scripting code supplied by the\ncrawl operator, in Python, Javascript, or other scripting\nlangauges that we might embed in our Java app. Then\nother optimizations and tests of arbitrary complexity\ncould be added as needed, as either one ScopeRule among\nmany or as the entire scope. Further, such scripts\ncould reuse and combine predefined Matcher functions.\n\nOur first steps to validate this approach can likely reuse\nthe existing multi-admin-page system for setting up filters\nto set up rules; as we acquire confidence in how it would\nbe used, we could integrate it all into the main settings\npage, or its own scope definition page. We could also offer\na &#39;testing page&#39; where you could feed URIs (plus specified\nother attributes) to the system and see what each rule does,\nand the final answer given.\n\nComments wanted! Remember this new plan won&#39;t be acted upon\nuntil some time in May at the earliest, so the 1.0 crawler\nwill continue to use the old approach.\n\n- Gordon\n\n\n\n\nYahoo! Groups Links\n\n\n\n\n\n\n\n\r\n--=__Part446584CB.0__=\r\nContent-Type: text/html; charset=ISO-8859-1\r\nContent-Transfer-Encoding: 8bit\r\nContent-Description: HTML\r\n\r\n&lt;HTML&gt;&lt;HEAD&gt;\n&lt;META http-equiv=Content-Type content=&quot;text/html; charset=iso-8859-1&quot;&gt;\n&lt;META content=&quot;MSHTML 6.00.2800.1400&quot; name=GENERATOR&gt;&lt;/HEAD&gt;\n&lt;BODY style=&quot;MARGIN: 4px 4px 1px; FONT: 10pt Microsoft Sans Serif&quot;&gt;\n&lt;DIV&gt;This proposal sounds very good. For better or worse, folks here&lt;BR&gt;are inclined to think in fairly intricate filtering terms, and making the &lt;BR&gt;filtering more expressive will help a lot. As Kaisa mentioned, some &lt;BR&gt;kind of boolean grouping of rules would be helpful (e.g. &quot;exclude if this &lt;BR&gt;AND that&quot;). I also think the option to short-circuit after a rule &lt;BR&gt;(refinement #1) adds expressiveness. I&#39;m particularly interested in &lt;BR&gt;the idea of adding scripting for extensibility, which I think could be &lt;BR&gt;a way of generally addressing the ideas for adding structure and &lt;BR&gt;abstraction to the rule sets that you mention in refinements #2 and #3.&lt;/DIV&gt;\n&lt;DIV&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;Andy Boyko&nbsp;&nbsp; &lt;A href=&quot;mailto:aboy@...&quot;&gt;aboy@...&lt;/A&gt;&lt;BR&gt;&lt;BR&gt;&gt;&gt;&gt; &lt;U&gt;&lt;A href=&quot;mailto:gojomo@...&quot;&gt;gojomo@...&lt;/A&gt;&lt;/U&gt; 4/23/2004 5:27:35 PM &gt;&gt;&gt;&lt;BR&gt;We are planning a change in the way in which a crawl&#39;s scope --&lt;BR&gt;its definition of what URIs are included and excluded -- is&lt;BR&gt;modelled and specified after the 1.0 Heritrix release. (That is&lt;BR&gt;to say, sometime in May or after.) The hope is to make alternate&lt;BR&gt;scope choices more understandable and flexible.&lt;BR&gt;&lt;BR&gt;The new approach is somewhat like (and inspired by) HTTrack&#39;s&lt;BR&gt;&#39;scan rules&#39;/filters, Alexa&#39;s mask/ignore/void syntax for&lt;BR&gt;adjusting recurring crawls, or the Nutch &#39;regex-urlfilter&#39;&lt;BR&gt;facility, but is a little more general than any of those.&lt;BR&gt;&lt;BR&gt;PRIOR APPROACH&lt;BR&gt;&lt;BR&gt;Up until now, our predefined Scope classes -- PathScope, HostScope,&lt;BR&gt;DomainScope, BroadScope -- all could be thought of as fitting a&lt;BR&gt;specific pattern: A CandidateURI u is included if and only if:&lt;BR&gt;&lt;BR&gt;( ( focusFilter.accepts(u)&lt;BR&gt;| transitiveFilter.accepts(u) )&lt;BR&gt;&amp;&amp; ! exclusionFilter.accepts(u) )&lt;BR&gt;&lt;BR&gt;More generally, the &#39;focus&#39; filter was meant to rule things in by&lt;BR&gt;prima facia/regexp-pattern analysis; the &#39;transitive&#39; filter&lt;BR&gt;rule extra items in by dynamic path analysis (for example, offsite&lt;BR&gt;embedded images); and the &#39;exclusion&#39; filter rule things out&lt;BR&gt;by any number of chained exclusion rules.&lt;BR&gt;&lt;BR&gt;So in a typical crawl, the &#39;focus&#39; filter drew from one of these&lt;BR&gt;categories:&lt;BR&gt;&lt;BR&gt;broad: accept all&lt;BR&gt;domain: accept if on same &#39;domain&#39; (for some definition) as seeds&lt;BR&gt;host: accept if on exact host as seeds&lt;BR&gt;path: accept if on same host and a sahred path-prefix as seeds&lt;BR&gt;&lt;BR&gt;The &#39;transitive&#39; filter was configured based on the various link-hops&lt;BR&gt;and embed-hops thresholds set by the operator.&lt;BR&gt;&lt;BR&gt;The &#39;exclusion&#39; filter was in fact a compound chain of filters,&lt;BR&gt;OR&#39;ed together, such that any one of them could knock a URI out of&lt;BR&gt;consideration.&lt;BR&gt;&lt;BR&gt;However, a number of aspects of this arrangement have caused problems:&lt;BR&gt;&lt;BR&gt;* To truly understand what happens to an URI, you must&lt;BR&gt;understand the above nested boolean-construct.&lt;BR&gt;* Adding mixed focuses -- such as all of this one host, all of&lt;BR&gt;this other domain, and then just these paths on this other host --&lt;BR&gt;is not supported, nor easy to mix-in to the &#39;focus&#39; filter.&lt;BR&gt;* Constructing and configuring the multiple filters required&lt;BR&gt;many setup steps across several web UI pages.&lt;BR&gt;* The reverse sense of the &#39;exclusion&#39; filters -- if URIs are&lt;BR&gt;accepted by the filter, they are excluded from teh crawl -- proved&lt;BR&gt;confusing, exacerbated by the fact that &#39;filter&#39; itself can&lt;BR&gt;commonly mean either &#39;filter in&#39; or &#39;filter out&#39;.&lt;BR&gt;&lt;BR&gt;NEW APPROACH&lt;BR&gt;&lt;BR&gt;We are planning a new standard Scope model that should be easier to&lt;BR&gt;understand when used for simple, common crawls, as well as better&lt;BR&gt;accomodate certain &#39;mixed&#39; focus requirements. This model retains the&lt;BR&gt;idea that at the highest level, the &#39;Scope&#39; is a swappable,&lt;BR&gt;self-contained component that is consulted for a yes/no judgement on&lt;BR&gt;whether or not a particular candidate URI is &#39;in scope&#39; for a crawl.&lt;BR&gt;&lt;BR&gt;In the common case, though, we will think of the Scope is thought of&lt;BR&gt;as a series of ScopeRules. Each ScopeRule contains a Matcher and a&lt;BR&gt;ScopeAction. A Matcher can be thought of as a Filter ranamed for&lt;BR&gt;clarity: it returns true if its conditions are matched. A&lt;BR&gt;ScopeAction is (for now) either INCLUDE or EXCLUDE.&lt;BR&gt;&lt;BR&gt;To define a Scope, the operator configures an ordered series of&lt;BR&gt;ScopeRules. A URI under consideration begins with the assumed&lt;BR&gt;status EXCLUDED, but then each rule is applied in turn to the&lt;BR&gt;candidate URI. If the rule&#39;s Matcher matches, then the supplied&lt;BR&gt;action is applied to the URI&#39;s current include/exclude status,&lt;BR&gt;possibly changing that status. After all rules have been applied,&lt;BR&gt;if the URI&#39;s status is INCLUDED it is &quot;in scope&quot; and scheduled&lt;BR&gt;for crawling; if its status is EXCLUDED it is discarded.&lt;BR&gt;&lt;BR&gt;There are no branches, but much of what nested conditionals&lt;BR&gt;can achieve is possible, in a form that should be be easier to&lt;BR&gt;follow than arbitrary expressions.&lt;BR&gt;&lt;BR&gt;The list of available Matchers would include things like:&lt;BR&gt;&lt;BR&gt;sameDomainAsAnySeed()&lt;BR&gt;sameDomainAsAnyUriInFile(&quot;filename&quot;)&lt;BR&gt;pathExtensionOf(&quot;http://www.berkeley.edu/research/&quot;)&lt;BR&gt;embeddedResourceWithinHops(3)&lt;BR&gt;regexpMatch(&quot;.*cgi-bin.*&quot;)&lt;BR&gt;pathSlashesGreaterThan(10)&lt;BR&gt;&lt;BR&gt;...covering everything our existing focus- and filter-&lt;BR&gt;based classes do. By ordering exclude and include actions,&lt;BR&gt;combinations that were awkward before -- or even impossible&lt;BR&gt;given the current interface -- become straightforward.&lt;BR&gt;&lt;BR&gt;For example, a previous request that was hard for us to&lt;BR&gt;accomodate was the idea: &quot;crawl exactly these X hosts,&lt;BR&gt;and get offsite images if only on the same domains.&quot; That is,&lt;BR&gt;don&#39;t wander off the exact hosts to follow links, or even&lt;BR&gt;get offsite images -- except when the offsite image shares&lt;BR&gt;the same domain.&lt;BR&gt;&lt;BR&gt;Our relevant function-of-seeds tests -- host-based and&lt;BR&gt;domain-based -- were exclusive of each other (at the &#39;focus&#39;&lt;BR&gt;level) and difficult to mix-in with path-based criteria&lt;BR&gt;(at the &#39;transitive&#39; level).&lt;BR&gt;&lt;BR&gt;As a series of ScopeRules, this can be achieved as:&lt;BR&gt;&lt;BR&gt;includeIf(sameHostAsAnySeed())&lt;BR&gt;includeIf(embeddedResourceWithinHops(1))&lt;BR&gt;excludeIf(not(sameDomainAsAnySeed())&lt;BR&gt;&lt;BR&gt;Further refinements to this basic model are possible:&lt;BR&gt;&lt;BR&gt;(1) Allow rules to offer more actions than include/exclude,&lt;BR&gt;such as an early exit from the rule chain. Then meeting&lt;BR&gt;a certain test might mean &#39;exclude regardless of subsequent&lt;BR&gt;rules&#39; or &#39;include regardless of subsequent rules&#39;.&lt;BR&gt;(More speculative: let rules mark-up URIs in ways that&lt;BR&gt;affect their future scoping, processing, or the handling&lt;BR&gt;of other URIs discovered off them.) This sort of&lt;BR&gt;refinement could allieviate the otherwise inefficient&lt;BR&gt;calculation of ultimately irrelevant rules.&lt;BR&gt;&lt;BR&gt;(2) Segment the ScopeRules into 2 distinct chains: one&lt;BR&gt;chain that is &quot;core&quot; or perhaps &quot;static&quot; rules, defining&lt;BR&gt;the main focus of the crawl, and another chain which approves&lt;BR&gt;related URIs dynamically. This would somewhat replicate&lt;BR&gt;the intent of the &#39;focus&#39; vs. &#39;transitive&#39; split in the 1.0&lt;BR&gt;scope model, and make possible a Scope which says, &quot;get&lt;BR&gt;all this &#39;core&#39;, and then anything else within N link-hops&lt;BR&gt;of any &#39;core&#39; items.&quot; (Current link-hop limits apply from&lt;BR&gt;seeds, not from site boundaries.)&lt;BR&gt;&lt;BR&gt;(3) Allow a seedlist-annotation syntax to help create&lt;BR&gt;mixed scopes. For example, each URI listed in a seed&lt;BR&gt;file might be followed with a label -- &#39;group1&#39;,&lt;BR&gt;&#39;group2&#39;, etc. This could then be used to refer back to&lt;BR&gt;a URI set in Scope Rules -- sameHostAsSeeds(&quot;group1&quot;),&lt;BR&gt;samePathAsSeeds(&quot;group2&quot;), etc.&lt;BR&gt;&lt;BR&gt;(4) As is suggested by the syntax for listing ScopeRules&lt;BR&gt;above, they could be scripting code supplied by the&lt;BR&gt;crawl operator, in Python, Javascript, or other scripting&lt;BR&gt;langauges that we might embed in our Java app. Then&lt;BR&gt;other optimizations and tests of arbitrary complexity&lt;BR&gt;could be added as needed, as either one ScopeRule among&lt;BR&gt;many or as the entire scope. Further, such scripts&lt;BR&gt;could reuse and combine predefined Matcher functions.&lt;BR&gt;&lt;BR&gt;Our first steps to validate this approach can likely reuse&lt;BR&gt;the existing multi-admin-page system for setting up filters&lt;BR&gt;to set up rules; as we acquire confidence in how it would&lt;BR&gt;be used, we could integrate it all into the main settings&lt;BR&gt;page, or its own scope definition page. We could also offer&lt;BR&gt;a &#39;testing page&#39; where you could feed URIs (plus specified&lt;BR&gt;other attributes) to the system and see what each rule does,&lt;BR&gt;and the final answer given.&lt;BR&gt;&lt;BR&gt;Comments wanted! Remember this new plan won&#39;t be acted upon&lt;BR&gt;until some time in May at the earliest, so the 1.0 crawler&lt;BR&gt;will continue to use the old approach.&lt;BR&gt;&lt;BR&gt;- Gordon&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;Yahoo! Groups Links&lt;BR&gt;&lt;BR&gt;&lt;*&gt; To visit your group on the web, go to:&lt;BR&gt;&lt;U&gt;&lt;A href=&quot;http://groups.yahoo.com/group/archive-crawler/&quot;&gt;http://groups.yahoo.com/group/archive-crawler/&lt;/A&gt;&lt;/U&gt; &lt;BR&gt;&lt;BR&gt;&lt;*&gt; To unsubscribe from this group, send an email to:&lt;BR&gt;&lt;U&gt;&lt;A href=&quot;mailto:archive-crawler-unsubscribe@yahoogroups.com&quot;&gt;archive-crawler-unsubscribe@yahoogroups.com&lt;/A&gt;&lt;/U&gt; &lt;BR&gt;&lt;BR&gt;&lt;*&gt; Your use of Yahoo! Groups is subject to:&lt;BR&gt;&lt;U&gt;&lt;A href=&quot;http://docs.yahoo.com/info/terms/&quot;&gt;http://docs.yahoo.com/info/terms/&lt;/A&gt;&lt;/U&gt; &lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;\r\n--=__Part446584CB.0__=--\r\n\n"}}