{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":168599281,"authorName":"stack","from":"stack &lt;stack@...&gt;","replyTo":"LIST","senderId":"0cZ7IsR6RkBDc6xYKLrf7wt2C0WQqKwnrxMrFKuNJqtPZI6i1QV3_nHQq9Kv7_ieKksQ9Yo4L4nordg3n-K-OA","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: [archive-crawler] add some method on\torg.archive.io.arc.ARCReader","postDate":"1089822635","msgId":637,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDQwRjU1RkFCLjUwNjA5MDZAYXJjaGl2ZS5vcmc+","inReplyToHeader":"PDEwODk3OTA4MTEuMTkzMy4yMS5jYW1lbEBwYzc3MC5zYi5zdGF0c2JpYmxpb3Rla2V0LmRrPg==","referencesHeader":"PDIwMDQwNzE0MDQwMi5pNkU0MmhaMjA3NjVAcG9sbHV4LnN0YXRzYmlibGlvdGVrZXQuZGs+IDwxMDg5NzkwODExLjE5MzMuMjEuY2FtZWxAcGM3NzAuc2Iuc3RhdHNiaWJsaW90ZWtldC5kaz4="},"prevInTopic":629,"nextInTopic":639,"prevInTime":636,"nextInTime":638,"topicId":629,"numMessagesInTopic":20,"msgSnippet":"... Yeah, the java.util.zip.GZIPInputStream implementation is a little broke.  Or rather, it seems java.util.zip.Inflater is broke, the zlib deflater wrapper","rawEmail":"Return-Path: &lt;stack@...&gt;\r\nX-Sender: stack@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 67557 invoked from network); 14 Jul 2004 16:30:21 -0000\r\nReceived: from unknown (66.218.66.167)\n  by m17.grp.scd.yahoo.com with QMQP; 14 Jul 2004 16:30:20 -0000\r\nReceived: from unknown (HELO dns.duboce.net) (63.203.238.114)\n  by mta6.grp.scd.yahoo.com with SMTP; 14 Jul 2004 16:30:20 -0000\r\nReceived: from archive.org ([192.168.1.105])\n\t(authenticated)\n\tby dns-eth1.duboce.net (8.10.2/8.10.2) with ESMTP id i6EFprq22828\n\tfor &lt;archive-crawler@yahoogroups.com&gt;; Wed, 14 Jul 2004 08:51:53 -0700\r\nMessage-ID: &lt;40F55FAB.5060906@...&gt;\r\nDate: Wed, 14 Jul 2004 09:30:35 -0700\r\nUser-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.7b) Gecko/20040421\r\nX-Accept-Language: en-us, en\r\nMIME-Version: 1.0\r\nTo: archive-crawler@yahoogroups.com\r\nReferences: &lt;200407140402.i6E42hZ20765@...&gt; &lt;1089790811.1933.21.camel@...&gt;\r\nIn-Reply-To: &lt;1089790811.1933.21.camel@...&gt;\r\nContent-Type: text/plain; charset=ISO-8859-1; format=flowed\r\nContent-Transfer-Encoding: 7bit\r\nX-eGroups-Remote-IP: 63.203.238.114\r\nFrom: stack &lt;stack@...&gt;\r\nSubject: Re: [archive-crawler] add some method on\torg.archive.io.arc.ARCReader\r\nX-Yahoo-Group-Post: member; u=168599281\r\n\r\nLars Clausen wrote:\n\n&gt; ...\n&gt;\n&gt;Since there&#39;s no way to get the size of the compressed entry (AFAICS), a\n&gt;Java-based scanning of compressed ARC files would entail reimplementing\n&gt;the gzip reader.\n&gt;\n&gt;  \n&gt;\nYeah, the java.util.zip.GZIPInputStream implementation is a little \nbroke.  Or rather, it seems java.util.zip.Inflater is broke, the zlib \ndeflater wrapper around the native zlib library used by GZIPInputStream. \n\nFirst its reading in blocks to pass over the JNI divide so it&#39;ll usually \novershoots any next gzip member sitting in the stream (Probably little \nto be done here).  Second, while Inflater will tell you how much its of \nthe underlying buffer it has yet to decompress, its reporting gets fuzzy \nwhere end-of-buffer matches or near-matches the end-of-gzip member.  The \nbyte math doesn&#39;t exactly add up.   The Inflater.finished() flag seems \nunreliable.\n\nThe original ARCReader implementation used GZIPInputStream directly.  \nThe stream it fed GZIPInputStream looked for gzip headers and whenever \nit found one, it faked out GZIPInputStream returning an end-of-stream.   \nARCReader had access to the underlying stream and would check to see if \nany more gzip members.  If there were, it&#39;d make a new GZIPInputStream \ninstance to read the next member (Had to make a new instance rather than \ntry and reuse because useful gzip header reading methods were private \nand the header was read in the constructor).  Embarrassingly ugly but \ngenerally worked.\n\nUntil we came across a case of a gzip member that contained gzipped \ncontent.  Here the underlying stream was reporting a  found gzip header \nbut the Inflater was saying it needed more content.\n\nCurrent ARCReader uses an alternative to GZIPInputStream called \norg.archive.io.GzippedInputStream.  This implementation asks the \nInflater what it thinks the state of the stream is feeding the Inflater \nuntil it says it wants no more with provisions for the messyness around \nend-of-gzip-member.  It manages the overshoots by backing up the stream \n(Passed streams need to support seek).  Still ugly but works better than \nprevious.\n\nStudy of the native gzip code, how its working around \nend-of-gzip-member, and trying to figure exactly how Inflater works, or \ndoesn&#39;t, are next up on the agenda.\n\nSt.Ack\n\n&gt;\n&gt;\n&gt;\n&gt; \n&gt;Yahoo! Groups Links\n&gt;\n&gt;\n&gt;\n&gt; \n&gt;\n&gt;  \n&gt;\n\n\n"}}