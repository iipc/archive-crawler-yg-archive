{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":163406187,"authorName":"Kristinn Sigurdsson","from":"&quot;Kristinn Sigurdsson&quot; &lt;kris@...&gt;","profile":"kristsi25","replyTo":"LIST","senderId":"3NhIh0Qx711-t0ttgw0Y7mS5OlW3NoUaq4AWvdlh89H2pY5jeiQnpLEzRgvEptJnfPBqFBhkUec0Rg6BkICHgcRwqH2qI2s9ppW57TObSg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"RE: [archive-crawler] continuous crawling proposal","postDate":"1107332653","msgId":1479,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDA2NzhEQjE5NjhFQUM3NDA5Q0MzRDBBQjdBMTFCODRBMDZFQzQ5QHNrYXJmdXIuYm9rLmxvY2FsPg==","inReplyToHeader":"PFBpbmUuTE5YLjQuNTYuMDUwMjAxMTk0NTQ0MC4xODA1MUBwaWtlc3BlYWsubWV0YWNhcnRhLmNvbT4="},"prevInTopic":1473,"nextInTopic":1483,"prevInTime":1478,"nextInTime":1480,"topicId":1452,"numMessagesInTopic":24,"msgSnippet":"... To a point, yes, but a repeating Frontier may be interested in rediscovered URIs. I.e. if a new or changed page embedds another document, we may want to ","rawEmail":"Return-Path: &lt;kris@...&gt;\r\nX-Sender: kris@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 55654 invoked from network); 2 Feb 2005 08:24:32 -0000\r\nReceived: from unknown (66.218.66.166)\n  by m24.grp.scd.yahoo.com with QMQP; 2 Feb 2005 08:24:32 -0000\r\nReceived: from unknown (HELO ia00524.archive.org) (207.241.224.172)\n  by mta5.grp.scd.yahoo.com with SMTP; 2 Feb 2005 08:24:32 -0000\r\nReceived: (qmail 29941 invoked by uid 100); 2 Feb 2005 08:08:29 -0000\r\nReceived: from forritun-4.bok.hi.is (HELO forritun4) (kris@...@130.208.152.83)\n  by mail-dev.archive.org with SMTP; 2 Feb 2005 08:08:29 -0000\r\nTo: &lt;archive-crawler@yahoogroups.com&gt;\r\nDate: Wed, 2 Feb 2005 08:24:13 -0000\r\nMessage-ID: &lt;0678DB1968EAC7409CC3D0AB7A11B84A06EC49@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: multipart/alternative;\n\tboundary=&quot;----=_NextPart_000_000B_01C50900.951CA6A0&quot;\r\nX-Priority: 3 (Normal)\r\nX-MSMail-Priority: Normal\r\nX-Mailer: Microsoft Outlook, Build 10.0.4510\r\nImportance: Normal\r\nIn-Reply-To: &lt;Pine.LNX.4.56.0502011945440.18051@...&gt;\r\nX-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1441\r\nX-Spam-DCC: : \r\nX-Spam-Checker-Version: SpamAssassin 2.63 (2004-01-11) on ia00524.archive.org\r\nX-Spam-Level: \r\nX-Spam-Status: No, hits=0.8 required=6.5 tests=AWL,HTML_30_40,\n\tHTML_FONTCOLOR_BLUE,HTML_MESSAGE autolearn=no version=2.63\r\nX-eGroups-Remote-IP: 207.241.224.172\r\nFrom: &quot;Kristinn Sigurdsson&quot; &lt;kris@...&gt;\r\nSubject: RE: [archive-crawler] continuous crawling proposal\r\nX-Yahoo-Group-Post: member; u=163406187\r\nX-Yahoo-Profile: kristsi25\r\n\r\n\r\n------=_NextPart_000_000B_01C50900.951CA6A0\r\nContent-Type: text/plain;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&gt;Hi Kris,\n&gt;\n&gt;Help me get up to speed with what your thinking here.  I&#39;m obv=\r\niously\n&gt;totally new here, so take my questions as interest not argument. \n&gt;=\r\n\n&gt;&gt; The BdbFrontier uses an &#39;already seen&#39; map to reject duplicates. Clearl=\r\ny\n&gt;&gt; this is unacceptable.  The ARFrontier uses the actual queues to weed o=\r\nut\n&gt;&gt; duplicates.\n&gt;\n&gt;A duplicate is a duplicate in both systems, right?  An=\r\ny efficient way of\n&gt;deleting duplicates is functional, even if some are mor=\r\ne elegant than\n&gt;others, right?  What am I missing? \n \nTo a point, yes, but =\r\na repeating Frontier may be interested in rediscovered\nURIs. I.e. if a new =\r\nor changed page embedds another document, we may want to\nupgrade it&#39;s fetch=\r\n time to &#39;now&#39; to get a consistent snapshot.\n \n&gt;\n&gt;\n&gt;&gt; The ARFrontier implem=\r\nents a significantly different HostQueue structure,\n&gt;&gt; tailored for repeate=\r\nd crawling of the same URIs. These maintain a\n&gt;&gt; priority queue of their UR=\r\nIs, when it is safe to issue them and so\n&gt;&gt; forth. The ARFrontier does NOT =\r\ndiscard the AList contents (only parts of\n&gt;&gt; it) when a CURI is completed, =\r\nbut rather stores it for next time.\n&gt;&gt; Currently the BdbFrontier completely=\r\n discards the CURI and all its data\n&gt;&gt; on successful completion of processi=\r\nng.\n&gt;\n&gt;Right, this would clearly have to change in BDB Frontier to make it =\r\nuseful\n&gt;for repeating crawls.  That&#39;s part of what I was hoping Stack would=\r\n help\n&gt;us do in BDBFrontier :) \n \nA point of clarity here, of course you CO=\r\nULD modify the BdbFrontier to be\nflexible enough to handle both strategies.=\r\n In fact the ARFrontier will\nmanage ok in a broad crawl if you just set the=\r\n &#39;time of next fetch&#39; well\ninto the future each time. But it is not going t=\r\no be optimized for that. And\nthe reverse is true of the BdbFrontier, even i=\r\nf it implemented everything\nneeded for a repeating policy, it would never b=\r\ne optimized for that.\n \nStack chimed in here in another post with some good=\r\n comments. As he noted,\nany such adaption of the BdbFrontier would call for=\r\n a subclass at the\nminimum (otherwise you risk the robust nature of the cur=\r\nrent BdbFrontier).\n \nIt&#39;s really a question of &#39;jack of all trades and mast=\r\ner of none&#39; issue. If\nwe try to make one frontier do everything.\n \n&gt;\n&gt;\n&gt;&gt; B=\r\noth frontiers use BDB to serialize data.\n&gt;\n&gt;True, and they reimplement the =\r\nlayer between the queue and BDB.  If\n&gt;there&#39;s a common set of services that=\r\n could be offered by a &quot;store URI&quot;\n&gt;capability, then multiple queuing strat=\r\negies can use the *same* BDB for\n&gt;all URIs. \n \nThere really is no layer bet=\r\nween the queue and BDB, the queue uses the BDB.\nThey do implement different=\r\n queueing strategies, each trying to achive\ndifferent goals. I.e. the BdbFr=\r\nontier is in many way concerned with\nthroughput and being able to handle a =\r\nvery large number of both URIs AND\nhosts. The repeating frontier does not c=\r\noncern itself as much with the\nnumber of hosts and take care to never loose=\r\n a URI and maintains an ordered\nlist of them and makes sure that they are n=\r\not issued prematurely.\n \nAgain, nothing you couldn&#39;t modify the BDBFrontier=\r\n to do, it just doesn&#39;t\nmake sense to try and make it do everything. For a =\r\ntypical snapshot crawl,\ncovering tens of thousands of domains and tens if n=\r\not hundred of millions of\nURIs, it just doesn&#39;t make any sense to encumber =\r\nit with managing time of\nnext fetch etc. when FIFO does the job perfectly w=\r\nell. \n \n&gt;\n&gt;Such modularity allows us to change crawling strategies more eas=\r\nily.\n&gt;Modularity here comes at the cost of agreeing on a common CURI design=\r\n and\n&gt;keying/querying structure for the CURI database.  Are there other cos=\r\nts\n&gt;besides this? \n&gt;\n&gt;\n&gt;&gt; With the addition of an AbstractFrontier it may b=\r\ne possible to have the\n&gt;&gt; ARFrontier utilize that and thus limit duplicatio=\r\nn of code.\n&gt;\n&gt;More than limiting code duplication, it keeps human resources=\r\n focused on a\n&gt;smaller body of code.  Am I correct in thinking that Stack&#39;s=\r\n BDBFrontier\n&gt;will be a &quot;default&quot; Frontier that gets much more use than any=\r\nthing not\n&gt;actively/directly supported by archive.org developers?  I might =\r\nhave\n&gt;misread that... did I? \n \nThe BdbFrontier will probably get more use =\r\nby virtue of the fact that a\nlarger segment of the user community is intere=\r\nsted in snapshot crawling.\n \nI expect that the ARFrontier&#39;s functionality w=\r\nill however be used enough to\nmerit sufficient support. It is going to beco=\r\nme a part of the standard\nHeritrix package, and here in Iceland (and I beli=\r\neve also in Denmark and\nNorway) it will be used to accomplish certain focus=\r\ned crawls, i.e. crawls of\na limited section of the web with a high volatili=\r\nty. These crawls will\nlikely run 365 days a year (as opposed to the intermi=\r\nttent snapshots).\n \n&gt;\n&gt;I think what you&#39;ve been creating in ARFrontier is r=\r\neally neat and I&#39;d\n&gt;like to see it fully integrated into the central core o=\r\nf Heritrix, rather\n&gt;than an optional add-on that doesn&#39;t necessarily fully =\r\ninteroperate with\n&gt;future enhancements. \n \nCurrently, we are planning to in=\r\ntegrate the ARFrontier into Heritrix 1.4.0\n(out sometime in the next month =\r\n- hopefully). As a part of the standard\npackage it will be updated to match=\r\n future API changes at the least\n(unless/until it gets deprecated in favor =\r\nof a newer solution). \n \nAs I&#39;ve noted, there is an audience for it, and I =\r\nexpect that alone shoudl\nkeep to up to date.\n \n \n&gt;\n&gt;\n&gt;&gt; The plain truth how=\r\never is that iterative and snapshot crawling make\n&gt;&gt; very different demands=\r\n on resources etc.  The BdbFrontier isimplemented\n&gt;&gt; with the clear intenti=\r\non of optimizing it for large scale, non repeating\n&gt;&gt; crawls. The ARFrontie=\r\nr is however designed for repeatedly crawling the\n&gt;&gt; same set of URIs and a=\r\ndds a considerable amount of management for that\n&gt;&gt; task. An example of thi=\r\ns, the ARFrontier will always ensure (within\n&gt;&gt; politeness constricts) that=\r\n the URI most overdue for a visit will be the\n&gt;&gt; next one issued.  The BdbF=\r\nrontier offers little guarantee as to what URI\n&gt;&gt; will be issued next, exce=\r\npt the queues are FIFO and allows for queues to\n&gt;&gt; be held inactive when en=\r\nough active queues are being used.\n&gt;\n&gt;Does the timestamping that I suggeste=\r\nd to Stack achieve this &quot;most\n&gt;overdue&quot; goal?  I think it does, or did I mi=\r\nss something? \n \nYes, it could, but you&#39;d also have to add code to ensure t=\r\nhat the most\noverdue, yet ready, queue is always called upon to issue the n=\r\next URI (not\nto terrably difficult but, again, not an issue in snapshot cra=\r\nwling)\n \n&gt;\n&gt;I think it allows resources to be utilized equally efficiently =\r\nby both\n&gt;crawling schemes. \n \nIt is an added complication for snapshot craw=\r\nling. Those Frontiers are\ncomplicated enough without adding more :smile:\n \n=\r\nIt is also a slightly more cumbersome in dealing with the data, you need a\n=\r\nlarger key (not in itself a big deal), you now need to add code to serializ=\r\ne\nprocessed CrawlURIs (something that the BdbFrontier can&#39;t do right now).\n=\r\n \n&gt;\n&gt;\n&gt;&gt; I&#39;ll admit that you could construct a single Frontier to serve bot=\r\nh\n&gt;&gt; purposes, but it would be a matter of compromise. It is (in my opinion=\r\n)\n&gt;&gt; better to have specialized Frontiers for (what are fundamentally)\n&gt;&gt; d=\r\nifferent crawling strategies.\n&gt;\n&gt;Do different queueing strategies have to b=\r\ne different entire Frontiers?\n&gt;I&#39;d love to see all your learning from build=\r\ning the ARFrontier influence\n&gt;the currently active development going into t=\r\nhe BDBFrontier. \n \nThe don&#39;t have to. Basically, the snapshot and iterative=\r\n approaches are\nabout as diametrically opposite crawling strategies as you =\r\ncan find (at\nleast to my knowledge). So it makes sense to have at least two=\r\n Frontiers,\neach optimized for it&#39;s primary purpose.\n \n&gt;\n&gt;\n&gt;&gt; The ARFrontie=\r\nr is furthermore designed as a generic repeating frontier\n&gt;&gt; (I&#39;m planing o=\r\nn renaming it Repeating or RevisitingFrontier since it\n&gt;&gt; does not contain =\r\nany adaptive ability itself) and allows the processors\n&gt;&gt; to greatly affect=\r\n the ordering by which URIs are issued. This is a\n&gt;&gt; function that I do not=\r\n foresee in the BdbFrontier (at least not with the\n&gt;&gt; level of granularity =\r\nthe ARFrontier provides).\n&gt;\n&gt;Same question here as above about the timestam=\r\nping technique.  Have you\n&gt;devised other types of influences on the URIs be=\r\nsides when to crawl them?\n&gt;I&#39;m not able to think of anything that cannot be=\r\n mapped into a timestamp\n&gt;after which you wish it were already crawled. \n \n=\r\nNo, the timestamps provide everything needed. My point was that the\nBdbFron=\r\ntier doesn&#39;t need timestamps and isn&#39;t likely to add them.\n \n\nI do understa=\r\nnd your thoughts here, John. When I started work on the\nARFrontier, things =\r\nwere very different and there was NO WAY to modify the\nHostQueuesFrontier f=\r\nor iterative crawling. The introduction of the\nBdbFrontier does change that=\r\n a bit. It is possible to create a really\noverall generic Frontier. But it =\r\nwould most likely get incredably\ncomplicated and be very difficult to maxim=\r\nize it&#39;s performance on a given\ntype of crawl. \n \nI&#39;m sure that there is go=\r\ning to be a considerable amount of development done\non both Frontiers in th=\r\ne coming months and years, we may eventually\nconsolidate them, but currentl=\r\ny I&#39;d advocate against it for the above\ndiscussed reasons. It is simply mor=\r\ne logical to have Frontiers tailored for\na specific purpose\n \n- Kris\n\r\n------=_NextPart_000_000B_01C50900.951CA6A0\r\nContent-Type: text/html;\n\tcharset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\n\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;\n&lt;HTML&gt;&lt;HEAD&gt;=\r\n&lt;TITLE&gt;Message&lt;/TITLE&gt;\n&lt;META http-equiv=3DContent-Type content=3D&quot;text/html=\r\n; charset=3Diso-8859-1&quot;&gt;\n&lt;META content=3D&quot;MSHTML 6.00.2800.1476&quot; name=3DGEN=\r\nERATOR&gt;&lt;/HEAD&gt;\n&lt;BODY&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT s=\r\nize=3D2&gt;&gt;Hi \nKris,&lt;BR&gt;&gt;&lt;BR&gt;&gt;Help me get up to speed with what your=\r\n thinking here.&nbsp; \nI&#39;m obviously&lt;BR&gt;&gt;totally new here, so take my qu=\r\nestions as interest not \nargument.&lt;SPAN class=3D080015607-02022005&gt;&nbsp;&lt;/=\r\nSPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial&gt;&lt;FONT color=3D#000=\r\n0ff&gt;&lt;FONT size=3D2&gt;&gt;&lt;BR&gt;&gt;&gt; The \nBdbFrontier uses an &#39;already seen&#39;=\r\n map to reject duplicates. Clearly&lt;BR&gt;&gt;&gt; \nthis is unacceptable.&nbsp;=\r\n The ARFrontier uses the actual queues to weed \nout&lt;BR&gt;&gt;&gt; duplicates.=\r\n&lt;BR&gt;&gt;&lt;BR&gt;&gt;A duplicate is a duplicate in both \nsystems, right?&nbsp; A=\r\nny efficient way of&lt;BR&gt;&gt;deleting duplicates is \nfunctional, even if some=\r\n are more elegant than&lt;BR&gt;&gt;others, right?&nbsp; What \nam I missing?&lt;SPAN=\r\n \nclass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;=\r\n&lt;FONT face=3DArial color=3D#0000ff size=3D2&gt;&lt;SPAN \nclass=3D080015607-020220=\r\n05&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SPAN class=\r\n=3D080015607-02022005&gt;To a point, yes, but \na repeating Frontier&nbsp;may b=\r\ne&nbsp;interested in rediscovered URIs. I.e. if a \nnew or changed page&nbsp=\r\n;embedds another document, we may want to upgrade it&#39;s \nfetch time to &#39;now&#39;=\r\n to get a consistent snapshot.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT face=3D=\r\nArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-0202200=\r\n5&gt;&nbsp;&lt;/SPAN&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;&gt; The \nARFrontier implements a si=\r\ngnificantly different HostQueue structure,&lt;BR&gt;&gt;&gt; \ntailored for repeat=\r\ned crawling of the same URIs. These maintain a&lt;BR&gt;&gt;&gt; \npriority queue =\r\nof their URIs, when it is safe to issue them and so&lt;BR&gt;&gt;&gt; \nforth. The=\r\n ARFrontier does NOT discard the AList contents (only parts \nof&lt;BR&gt;&gt;&gt;=\r\n it) when a CURI is completed, but rather stores it for next \ntime.&lt;BR&gt;&gt;=\r\n&gt; Currently the BdbFrontier completely discards the CURI and all \nits da=\r\nta&lt;BR&gt;&gt;&gt; on successful completion of \nprocessing.&lt;BR&gt;&gt;&lt;BR&gt;&gt;Righ=\r\nt, this would clearly have to change in BDB \nFrontier to make it useful&lt;BR&gt;=\r\n&gt;for repeating crawls.&nbsp; That&#39;s part of \nwhat I was hoping Stack wou=\r\nld help&lt;BR&gt;&gt;us do in BDBFrontier :)&lt;SPAN \nclass=3D080015607-02022005&gt;&nb=\r\nsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT face=3DArial&gt;=\r\n&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;/SP=\r\nAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT face=3DArial&gt;&lt;=\r\nFONT color=3D#0000ff&gt;&lt;FONT color=3D#000000 size=3D2&gt;&lt;SPAN \nclass=3D08001560=\r\n7-02022005&gt;A point of clarity here, of course you COULD modify the \nBdbFron=\r\ntier to be flexible enough to handle both strategies. In fact the \nARFronti=\r\ner will manage&nbsp;ok in a broad crawl if you just set the &#39;time of \nnext =\r\nfetch&#39; well into the future each time. But it is not going to be optimized =\r\n\nfor that. And the reverse is true of the BdbFrontier, even if it implement=\r\ned \neverything needed for a repeating policy, it would never be optimized f=\r\nor \nthat.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT face=3D=\r\nArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT color=3D#000000 size=3D2&gt;&lt;SPAN \nclass=3D0=\r\n80015607-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FON=\r\nT&gt;&lt;FONT face=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT color=3D#000000 size=3D2&gt;&lt;=\r\nSPAN \nclass=3D080015607-02022005&gt;Stack chimed in here in another post with =\r\nsome good \ncomments. As he noted, any such adaption of the BdbFrontier woul=\r\nd call for a \nsubclass at the minimum (otherwise you risk the robust nature=\r\n of the current \nBdbFrontier).&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DI=\r\nV&gt;&lt;FONT&gt;&lt;FONT face=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT color=3D#000000 size=\r\n=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&=\r\nnbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT face=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT color=\r\n=3D#000000 size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;It&#39;s&nbsp;really a qu=\r\nestion of &#39;jack of all trades and \nmaster of none&#39; issue. If we try to make=\r\n one frontier do \neverything.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV=\r\n&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT face=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;=\r\n&lt;SPAN \nclass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;&gt;=\r\n Both \nfrontiers use BDB to serialize data.&lt;BR&gt;&gt;&lt;BR&gt;&gt;True, and they r=\r\neimplement \nthe layer between the queue and BDB.&nbsp; If&lt;BR&gt;&gt;there&#39;s a =\r\ncommon set of \nservices that could be offered by a &quot;store URI&quot;&lt;BR&gt;&gt;capab=\r\nility, then multiple \nqueuing strategies can use the *same* BDB for&lt;BR&gt;&gt;=\r\nall URIs.&lt;SPAN \nclass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FON=\r\nT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT face=3DArial&gt;&lt;FO=\r\nNT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;=\r\n&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FO=\r\nNT&gt;&lt;FONT face=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-0202200=\r\n5&gt;There really is no layer between the queue and BDB, the \nqueue uses the B=\r\nDB. They do implement different queueing strategies, each trying \nto achive=\r\n different goals. I.e. the BdbFrontier is in many way concerned with \nthrou=\r\nghput and being able to handle a very large number of both URIs AND \nhosts.=\r\n&nbsp;The repeating frontier does not concern itself as much with the \nnumb=\r\ner of hosts and take care to never loose a URI and maintains an ordered lis=\r\nt \nof them and makes sure that they are not issued \nprematurely.&lt;/SPAN&gt;&lt;/FO=\r\nNT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT f=\r\nace=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;&lt;=\r\n/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FON=\r\nT&gt;&lt;FONT face=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005=\r\n&gt;Again, nothing you couldn&#39;t modify the BDBFrontier to \ndo, it just doesn&#39;t=\r\n make sense to try and make it do everything. For a typical \nsnapshot crawl=\r\n, covering tens of thousands of domains and tens if not hundred of \nmillion=\r\ns of URIs, it just doesn&#39;t make any sense to encumber it with managing \ntim=\r\ne of next fetch etc. when FIFO does the job perfectly well. \n&lt;/SPAN&gt;&lt;/FONT&gt;=\r\n&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FON=\r\nT&gt;&lt;FONT face=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT \nsize=3D2&gt;&lt;SPAN class=3D08=\r\n0015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;Such \nmodularity allows us to=\r\n change crawling strategies more \neasily.&lt;BR&gt;&gt;Modularity here comes at t=\r\nhe cost of agreeing on a common CURI \ndesign and&lt;BR&gt;&gt;keying/querying str=\r\nucture for the CURI database.&nbsp; Are \nthere other costs&lt;BR&gt;&gt;besides t=\r\nhis?&lt;SPAN \nclass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/F=\r\nONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;=\r\nFONT&gt;&lt;FONT&gt;&lt;FONT face=3DArial color=3D#0000ff \nsize=3D2&gt;&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt=\r\n;&gt; With the addition of an AbstractFrontier it may \nbe possible to have =\r\nthe&lt;BR&gt;&gt;&gt; ARFrontier utilize that and thus limit \nduplication of code=\r\n.&lt;BR&gt;&gt;&lt;BR&gt;&gt;More than limiting code duplication, it \nkeeps human resou=\r\nrces focused on a&lt;BR&gt;&gt;smaller body of code.&nbsp; Am I \ncorrect in think=\r\ning that Stack&#39;s BDBFrontier&lt;BR&gt;&gt;will be a &quot;default&quot; Frontier \nthat gets=\r\n much more use than anything not&lt;BR&gt;&gt;actively/directly supported by \narc=\r\nhive.org developers?&nbsp; I might have&lt;BR&gt;&gt;misread that... did I?&lt;SPAN =\r\n\nclass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT=\r\n&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT=\r\n&gt;&lt;FONT face=3DArial color=3D#0000ff \nsize=3D2&gt;&lt;SPAN \nclass=3D080015607-0202=\r\n2005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;=\r\n/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT face=3DArial siz=\r\ne=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;The BdbFrontier will probably get m=\r\nore use by virtue of \nthe fact that a larger segment of the user community =\r\nis interested in snapshot \ncrawling.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FO=\r\nNT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FO=\r\nNT&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;&lt;/F=\r\nONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FON=\r\nT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT face=3DArial size=3D2&gt;&lt;SPAN \ncl=\r\nass=3D080015607-02022005&gt;I expect that the ARFrontier&#39;s functionality will =\r\n\nhowever be used enough to merit sufficient support. It is going to become =\r\na part \nof the standard Heritrix package, and here in Iceland (and I believ=\r\ne also in \nDenmark and Norway) it will be used to accomplish certain focuse=\r\nd crawls, i.e. \ncrawls of a limited section of the web with a high volatili=\r\nty. These crawls will \nlikely run 365 days a year (as opposed to the interm=\r\nittent \nsnapshots).&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;=\r\n&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT fa=\r\nce=3DArial&gt;&lt;FONT \ncolor=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-0=\r\n2022005&gt;&nbsp;&lt;/SPAN&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;I think what you&#39;ve been \ncreating in =\r\nARFrontier is really neat and I&#39;d&lt;BR&gt;&gt;like to see it fully \nintegrated i=\r\nnto the central core of Heritrix, rather&lt;BR&gt;&gt;than an optional \nadd-on th=\r\nat doesn&#39;t necessarily fully interoperate with&lt;BR&gt;&gt;future \nenhancements.=\r\n&lt;SPAN \nclass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;=\r\n&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;F=\r\nONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT face=3DArial&gt;&lt;FONT \ncolor=3D#0000ff=\r\n&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FO=\r\nNT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DI=\r\nV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT=\r\n&gt;&lt;FONT size=3D2&gt;&lt;SPAN class=3D080015607-02022005&gt;Currently, we are \nplannin=\r\ng to integrate the ARFrontier into Heritrix 1.4.0 (out sometime in the \nnex=\r\nt month - hopefully). As a part of the standard package it will be updated =\r\nto \nmatch future API changes at the least (unless/until&nbsp;it gets deprec=\r\nated in \nfavor of a newer solution). \n&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/=\r\nFONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FON=\r\nT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;S=\r\nPAN \nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;=\r\n/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FON=\r\nT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;S=\r\nPAN class=3D080015607-02022005&gt;As I&#39;ve noted, \nthere is an audience for it,=\r\n and I expect that alone shoudl keep to up to \ndate.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/=\r\nFONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;F=\r\nONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT&gt;&lt;FO=\r\nNT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;=\r\n/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;F=\r\nONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT&gt;&lt;FO=\r\nNT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;=\r\n/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;F=\r\nONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT color=3D#=\r\n0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;BR&gt;&g=\r\nt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;&gt; The plain \ntruth however is that iterative and snaps=\r\nhot crawling make&lt;BR&gt;&gt;&gt; very \ndifferent demands on resources etc.&nbs=\r\np; The BdbFrontier \nisimplemented&lt;BR&gt;&gt;&gt; with the clear intention of o=\r\nptimizing it for large \nscale, non repeating&lt;BR&gt;&gt;&gt; crawls. The ARFron=\r\ntier is however designed for \nrepeatedly crawling the&lt;BR&gt;&gt;&gt; same set =\r\nof URIs and adds a considerable \namount of management for that&lt;BR&gt;&gt;&gt; =\r\ntask. An example of this, the \nARFrontier will always ensure (within&lt;BR&gt;&gt=\r\n;&gt; politeness constricts) that \nthe URI most overdue for a visit will be=\r\n the&lt;BR&gt;&gt;&gt; next one issued.&nbsp; \nThe BdbFrontier offers little guar=\r\nantee as to what URI&lt;BR&gt;&gt;&gt; will be \nissued next, except the queues ar=\r\ne FIFO and allows for queues to&lt;BR&gt;&gt;&gt; be \nheld inactive when enough a=\r\nctive queues are being used.&lt;BR&gt;&gt;&lt;BR&gt;&gt;Does the \ntimestamping that I s=\r\nuggested to Stack achieve this &quot;most&lt;BR&gt;&gt;overdue&quot; \ngoal?&nbsp; I think i=\r\nt does, or did I miss something?&lt;SPAN \nclass=3D080015607-02022005&gt;&nbsp;&lt;/S=\r\nPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;=\r\n/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;=\r\nFONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;=\r\nSPAN \nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;=\r\n&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;=\r\nFONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DAr=\r\nial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;SPAN class=3D080015607-02022005&gt;Yes, it could, bu=\r\nt \nyou&#39;d also have to add code to ensure that the most overdue, yet ready, =\r\nqueue is \nalways called upon to issue the next URI (not to terrably difficu=\r\nlt but, again, \nnot an issue in snapshot \ncrawling)&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/F=\r\nONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;=\r\n/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FON=\r\nT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \ncla=\r\nss=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;I think it allows \nres=\r\nources to be utilized equally efficiently by both&lt;BR&gt;&gt;crawling \nschemes.=\r\n&lt;SPAN \nclass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;=\r\n&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FON=\r\nT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;=\r\nFONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \n=\r\nclass=3D080015607-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT=\r\n&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV=\r\n&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;F=\r\nONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;SPAN class=3D080015607-020220=\r\n05&gt;It is an added \ncomplication for snapshot crawling. Those Frontiers are =\r\ncomplicated enough \nwithout adding more \n:smile:&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT=\r\n&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FO=\r\nNT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT=\r\n&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D=\r\n080015607-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;=\r\n&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;=\r\nFONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FON=\r\nT \nface=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;SPAN class=3D080015607-02022005&gt;It is=\r\n also&nbsp;a \nslightly more cumbersome in dealing with the data, you need a=\r\n larger key (not in \nitself a big deal), you now need to add code to serial=\r\nize processed CrawlURIs \n(something that the BdbFrontier can&#39;t do right \nno=\r\nw).&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/=\r\nFONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT=\r\n&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3D=\r\nArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-0202200=\r\n5&gt;&nbsp;&lt;/SPAN&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;&gt; I&#39;ll admit \nthat you could cons=\r\ntruct a single Frontier to serve both&lt;BR&gt;&gt;&gt; purposes, \nbut it would b=\r\ne a matter of compromise. It is (in my opinion)&lt;BR&gt;&gt;&gt; better \nto have=\r\n specialized Frontiers for (what are fundamentally)&lt;BR&gt;&gt;&gt; different \n=\r\ncrawling strategies.&lt;BR&gt;&gt;&lt;BR&gt;&gt;Do different queueing strategies have t=\r\no be \ndifferent entire Frontiers?&lt;BR&gt;&gt;I&#39;d love to see all your learning =\r\nfrom \nbuilding the ARFrontier influence&lt;BR&gt;&gt;the currently active develop=\r\nment going \ninto the BDBFrontier.&lt;SPAN \nclass=3D080015607-02022005&gt;&nbsp;&lt;/=\r\nSPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;=\r\n&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;F=\r\nONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT=\r\n \nface=3DArial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D08001560=\r\n7-02022005&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;=\r\n/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n=\r\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FON=\r\nT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;SPAN class=3D080015=\r\n607-02022005&gt;The don&#39;t have to. \nBasically, the snapshot and iterative appr=\r\noaches are about as diametrically \nopposite crawling strategies as you can =\r\nfind (at least to my knowledge). So it \nmakes sense to have at least two Fr=\r\nontiers, each optimized for it&#39;s primary \npurpose.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FO=\r\nNT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/=\r\nFONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;=\r\nFONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DAr=\r\nial&gt;&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;=\r\n&nbsp;&lt;/SPAN&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;&lt;BR&gt;&gt;&gt; The \nARFrontier is furthermore de=\r\nsigned as a generic repeating frontier&lt;BR&gt;&gt;&gt; \n(I&#39;m planing on renamin=\r\ng it Repeating or RevisitingFrontier since it&lt;BR&gt;&gt;&gt; \ndoes not contain=\r\n any adaptive ability itself) and allows the \nprocessors&lt;BR&gt;&gt;&gt; to gre=\r\natly affect the ordering by which URIs are issued. \nThis is a&lt;BR&gt;&gt;&gt; f=\r\nunction that I do not foresee in the BdbFrontier (at \nleast not with the&lt;BR=\r\n&gt;&gt;&gt; level of granularity the ARFrontier \nprovides).&lt;BR&gt;&gt;&lt;BR&gt;&gt;Sa=\r\nme question here as above about the timestamping \ntechnique.&nbsp; Have you=\r\n&lt;BR&gt;&gt;devised other types of influences on the URIs \nbesides when to craw=\r\nl them?&lt;BR&gt;&gt;I&#39;m not able to think of anything that cannot \nbe mapped int=\r\no a timestamp&lt;BR&gt;&gt;after which you wish it were already \ncrawled.&lt;SPAN \nc=\r\nlass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;=\r\n/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT=\r\n&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT=\r\n&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;=\r\n&lt;FONT color=3D#0000ff&gt;&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;/SP=\r\nAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/=\r\nFONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;=\r\nDIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT=\r\n&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT&gt;&lt;FONT size=3D2&gt;&lt;SPAN cla=\r\nss=3D080015607-02022005&gt;No, the timestamps \nprovide everything needed. My p=\r\noint was that the BdbFrontier doesn&#39;t need \ntimestamps and isn&#39;t likely to =\r\nadd \nthem.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/=\r\nFONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;=\r\n&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FO=\r\nNT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT \nface=3DArial&gt;&lt;FONT color=3D#0000ff&gt;=\r\n&lt;FONT size=3D2&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&nbsp;&lt;/SPAN&gt;&lt;BR&gt;&lt;/FONT&gt;&lt;/=\r\nFONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;=\r\n&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;F=\r\nONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT=\r\n&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;FONT face=3DArial size=3D2&gt;=\r\nI do understand your thoughts \nhere, John. When I started work on the ARFro=\r\nntier, things were very different \nand there was NO WAY to modify the HostQ=\r\nueuesFrontier for iterative crawling. \nThe introduction of the BdbFrontier =\r\ndoes change that a bit. It is possible to \ncreate a really overall generic =\r\nFrontier. But it would most likely get \nincredably complicated and be very =\r\ndifficult to maximize it&#39;s performance on a \ngiven type of crawl. \n&lt;/FONT&gt;&lt;=\r\n/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT=\r\n&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;=\r\nFONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FON=\r\nT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;FONT face=3DArial \nsize=3D=\r\n2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/F=\r\nONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;D=\r\nIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;=\r\n&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;SPAN \nclass=3D080015607-02022005&gt;&lt;FONT face=\r\n=3DArial size=3D2&gt;I&#39;m sure that there is going to \nbe a considerable amount=\r\n of development done on both Frontiers in the coming \nmonths and years, we =\r\nmay eventually consolidate them, but currently I&#39;d advocate \nagainst it for=\r\n the above discussed reasons. It is simply more logical to have \nFrontiers =\r\ntailored for a specific \npurpose&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;=\r\n/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT=\r\n&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;=\r\n&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;SPAN \nclass=3D080015=\r\n607-02022005&gt;&lt;FONT face=3DArial \nsize=3D2&gt;&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FON=\r\nT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/F=\r\nONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&nbsp;&lt;/DIV&gt;\n&lt;DIV&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;F=\r\nONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;FONT&gt;&lt;SPAN=\r\n \nclass=3D080015607-02022005&gt;&lt;FONT face=3DArial size=3D2&gt;- \nKris&lt;/FONT&gt;&lt;/SP=\r\nAN&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/F=\r\nONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/BODY&gt;&lt;/HTML&gt;\n\r\n------=_NextPart_000_000B_01C50900.951CA6A0--\r\n\n"}}