{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":214587980,"authorName":"Christian Kohlschuetter","from":"Christian Kohlschuetter &lt;ck-heritrix@...&gt;","replyTo":"LIST","senderId":"8HOuuA3FM0j97lsdi4kpvZEL3LeWfazQyAIYCDPjdWDToea93hqiMJCkryeqvlj9AA_H1ekheGvzpBYmObQ9mzkSZ-hpEx7cTKs-A6uri-uK2uXn4Dobug","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Re: [archive-crawler] Re: TextUtils getMatcher ThreadLocal-ized","postDate":"1118139896","msgId":1919,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDIwMDUwNjA3MTIyNC41NjI5NS5jay1oZXJpdHJpeEBuZXdzY2x1Yi5kZT4=","inReplyToHeader":"PDQyQTRGOUQyLjgwNTA4MDFAYXJjaGl2ZS5vcmc+","referencesHeader":"PEUxRGRYY1YtMDAwNHNFLTdPQHNjOC1wci1jdnMxLnNvdXJjZWZvcmdlLm5ldD4gPDIwMDUwNjAzMTEzMy4yMjQwNi5jay1oZXJpdHJpeEBuZXdzY2x1Yi5kZT4gPDQyQTRGOUQyLjgwNTA4MDFAYXJjaGl2ZS5vcmc+"},"prevInTopic":1917,"nextInTopic":1920,"prevInTime":1918,"nextInTime":1920,"topicId":1906,"numMessagesInTopic":5,"msgSnippet":"Hi Gordon, yes, this example would not be valid for the getMatcher contract I suggested. I doubt that getMatcher should even support this, as it would render","rawEmail":"Return-Path: &lt;ck-heritrix@...&gt;\r\nX-Sender: ck-heritrix@...\r\nX-Apparently-To: archive-crawler@yahoogroups.com\r\nReceived: (qmail 2982 invoked from network); 7 Jun 2005 10:25:08 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m24.grp.scd.yahoo.com with QMQP; 7 Jun 2005 10:25:08 -0000\r\nReceived: from unknown (HELO mail.newsclub.de) (130.75.2.42)\n  by mta2.grp.scd.yahoo.com with SMTP; 7 Jun 2005 10:25:08 -0000\r\nReceived: (qmail 14773 invoked by uid 2002); 7 Jun 2005 10:24:56 -0000\r\nReceived: from ck-heritrix@... by nhf3.rrzn.uni-hannover.de by uid 207 with qmail-scanner-1.21 \n (clamscan: 0.67. spamassassin: 2.63.  Clear:RC:0(130.75.152.171):SA:0(-2.6/5.0):. \n Processed in 1.265363 secs); 07 Jun 2005 10:24:56 -0000\r\nX-Spam-Status: No, hits=-2.6 required=5.0\r\nReceived: from pc171.kbs.uni-hannover.de (HELO mail.newsclub.de) (webmail@...@130.75.152.171)\n  by nhf3.rrzn.uni-hannover.de with RC4-MD5 encrypted SMTP; 7 Jun 2005 10:24:54 -0000\r\nOrganization: NewsClub\r\nTo: archive-crawler@yahoogroups.com\r\nDate: Tue, 7 Jun 2005 12:24:56 +0200\r\nUser-Agent: KMail/1.8\r\nCc: Gordon Mohr &lt;gojomo@...&gt;\r\nReferences: &lt;E1DdXcV-0004sE-7O@...&gt; &lt;200506031133.22406.ck-heritrix@...&gt; &lt;42A4F9D2.8050801@...&gt;\r\nIn-Reply-To: &lt;42A4F9D2.8050801@...&gt;\r\nMIME-Version: 1.0\r\nContent-Type: text/plain;\n  charset=&quot;iso-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nContent-Disposition: inline\r\nMessage-Id: &lt;200506071224.56295.ck-heritrix@...&gt;\r\nX-eGroups-Msg-Info: 1:12:0\r\nFrom: Christian Kohlschuetter &lt;ck-heritrix@...&gt;\r\nSubject: Re: [archive-crawler] Re: TextUtils getMatcher ThreadLocal-ized\r\nX-Yahoo-Group-Post: member; u=214587980\r\n\r\nHi Gordon,\n\nyes, this example would not be valid for the getMatcher contrac=\r\nt I suggested.\n\nI doubt that getMatcher should even support this, as it wou=\r\nld render the cache \nquite useless -- only one Matcher is cached, the secon=\r\nd call will always \ninstantiate a new one (for each call to correlateMatche=\r\ns). Usually, methods \nlike correlateMatches are called for each document du=\r\nring the crawling \nprocess, so it should be visible to the reader whether a=\r\n cache is utilized or \nnot.\n\nIn this special case, a better solution would =\r\nbe either to use \nPattern.getMatcher directly (to signalize that we&#39;re not =\r\nefficiently using a \ncache), or to use two clones of the same pattern (like=\r\n PATTERN_OF_INTEREST_1 \nand PATTERN_OF_INTEREST_2).\n\nAssuming that we only =\r\nhave these two Matchers in our code, and n documents to \ncrawl (read: 10,00=\r\n0,000), we would have the following number of Matcher \ninstantiations:\n\n1. =\r\nWith Pattern.getMatcher: 2 * n\n2. Your strategy: 1 + n  (Matcher m1 is cach=\r\ned, m2 is instantiated for each \ndocument)\n3. Using two separate Pattern ob=\r\njects: 2\n\nApparently, the latter one should be preferred. However, as you a=\r\nlready \nreason, unwary programmers can break the contract to not call getMa=\r\ntcher in \nsuch an entangled way.\n\nCouldn&#39;t we simply ensure the conformance=\r\n to the (more restrictive) contract \nby throwing an Exception (Error) whene=\r\nver an attempt is made to get more than \none Matcher per Pattern? Of course=\r\n, this would require to re-introduce \nfreeMatcher() (using nulls in the Map=\r\n as you suggest). But it would _notify_ \nthe developer just when executing =\r\nthe code for the first time that he/she&#39;s \nwriting bad, inefficient code.\n\n=\r\nWhereas I would call your strategy of TextUtil.getMatcher and freeMatcher a=\r\n \n&quot;recycling factory&quot;, the policy I propose could be described as a Matcher=\r\n \n&quot;lending&quot;, where one can &quot;borrow&quot; a Matcher, and has to &quot;return&quot; it after=\r\n use \n(it cannot be borrowed twice). This idea could be emphasized by namin=\r\ng the \nmethods &quot;TextUtil.borrowMatcher&quot; and &quot;TextUtil.returnMatcher&quot; accord=\r\ningly.\n\nFor the implementation, we should make use of Java assertions for t=\r\nhis. This \nwould check contract conformance when assertions are enabled, bu=\r\nt would be \nfaster (to some degree) when they are turned off.\n\nImagine the =\r\nfollowing:\n\npublic Matcher borrowMatcher(Pattern p, CharSequence input) {\n =\r\n       if (pattern =3D=3D null) {\n            throw new IllegalArgumentExce=\r\nption(&quot;String &#39;pattern&#39; must not be \nnull&quot;);\n        }\n        final Map ma=\r\ntchers =3D (Map)TL_MATCHER_MAP.get();\n        Matcher m =3D (Matcher)matche=\r\nrs.get(pattern);\n\n        // ensure that returnMatcher has been called befo=\r\nrehands\n        assert (m !=3D null || !matchers.containsKey(pattern));\n\n  =\r\n      if(m =3D=3D null) {\n            m =3D Pattern.compile(pattern).matche=\r\nr(input);\n            matchers.put(pattern, m);\n        } else {\n          =\r\n  m.reset(input);\n        }\n        assert (matchers.put(pattern, null) =3D=\r\n=3D m);\n        return m;\n}\n\npublic void returnMatcher(Matcher m) {\n       =\r\n // mark matcher as &quot;lent&quot;\n\tassert (matchers.put(m.pattern(), m) =3D=3D nul=\r\nl);\n}\n\nDoes that make sense?\n\nChristian\n-- \nChristian Kohlsch=FCtter\nmailto=\r\n: ck -at- NewsClub.de\n\n"}}